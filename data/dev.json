[
    {
        "db_id": "concert_singer",
        "query": "select count ( * ) from singer",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the number of singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM singer",
        "original_question": "How many singers do we have?",
        "instance_id": 0
    },
    {
        "db_id": "concert_singer",
        "query": "select count ( * ) from singer",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the number of singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM singer",
        "original_question": "What is the total number of singers?",
        "instance_id": 1
    },
    {
        "db_id": "concert_singer",
        "query": "select name , country , age from singer",
        "query_toks": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer"
        ],
        "question": "Get name and country and age of singer",
        "question_toks": [
            "Get",
            "name",
            "and",
            "country",
            "and",
            "age",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "original_question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "instance_id": 2
    },
    {
        "db_id": "concert_singer",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "original_question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "instance_id": 3
    },
    {
        "db_id": "concert_singer",
        "query": "select name , country , age from singer",
        "query_toks": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer"
        ],
        "question": "Get name and country and age of singer",
        "question_toks": [
            "Get",
            "name",
            "and",
            "country",
            "and",
            "age",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "original_question": "What are the names, countries, and ages for every singer in descending order of age?",
        "instance_id": 4
    },
    {
        "db_id": "concert_singer",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
        "original_question": "What are the names, countries, and ages for every singer in descending order of age?",
        "instance_id": 5
    },
    {
        "db_id": "concert_singer",
        "query": "select avg ( age ) , min ( age ) , max ( age ) from singer",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            ",",
            "max",
            "(",
            "age",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            ",",
            "max",
            "(",
            "age",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the average value of age and the minimum value of age and the maximum value of age of singer",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "age",
            "and",
            "the",
            "minimum",
            "value",
            "of",
            "age",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "age",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "original_question": "What is the average, minimum, and maximum age of all singers from France?",
        "instance_id": 6
    },
    {
        "db_id": "concert_singer",
        "query": "where country = \"france\"",
        "query_toks": [
            "where",
            "country",
            "=",
            "\"france\""
        ],
        "query_toks_no_value": [
            "where",
            "country",
            "=",
            "\"france\""
        ],
        "question": "Keep the records that country is \"france\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "is",
            "\"france\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"France\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "original_question": "What is the average, minimum, and maximum age of all singers from France?",
        "instance_id": 7
    },
    {
        "db_id": "concert_singer",
        "query": "select avg ( age ) , min ( age ) , max ( age ) from singer",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            ",",
            "max",
            "(",
            "age",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            ",",
            "min",
            "(",
            "age",
            ")",
            ",",
            "max",
            "(",
            "age",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the average value of age and the minimum value of age and the maximum value of age of singer",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "age",
            "and",
            "the",
            "minimum",
            "value",
            "of",
            "age",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "age",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "original_question": "What is the average, minimum, and maximum age for all French singers?",
        "instance_id": 8
    },
    {
        "db_id": "concert_singer",
        "query": "where country = \"france\"",
        "query_toks": [
            "where",
            "country",
            "=",
            "\"france\""
        ],
        "query_toks_no_value": [
            "where",
            "country",
            "=",
            "\"france\""
        ],
        "question": "Keep the records that country is \"france\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "is",
            "\"france\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"France\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
        "original_question": "What is the average, minimum, and maximum age for all French singers?",
        "instance_id": 9
    },
    {
        "db_id": "concert_singer",
        "query": "select song_name , song_release_year from singer",
        "query_toks": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer"
        ],
        "question": "Get song name and song release year of singer",
        "question_toks": [
            "Get",
            "song",
            "name",
            "and",
            "song",
            "release",
            "year",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_question": "Show the name and the release year of the song by the youngest singer.",
        "instance_id": 10
    },
    {
        "db_id": "concert_singer",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_question": "Show the name and the release year of the song by the youngest singer.",
        "instance_id": 11
    },
    {
        "db_id": "concert_singer",
        "query": "select song_name , song_release_year from singer",
        "query_toks": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer"
        ],
        "question": "Get song name and song release year of singer",
        "question_toks": [
            "Get",
            "song",
            "name",
            "and",
            "song",
            "release",
            "year",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_question": "What are the names and release years for all the songs of the youngest singer?",
        "instance_id": 12
    },
    {
        "db_id": "concert_singer",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
        "original_question": "What are the names and release years for all the songs of the youngest singer?",
        "instance_id": 13
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct country from singer",
        "query_toks": [
            "select",
            "distinct",
            "country",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "country",
            "from",
            "singer"
        ],
        "question": "Get distinct and country of singer",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "country",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "original_question": "What are all distinct countries where singers above age 20 are from?",
        "instance_id": 14
    },
    {
        "db_id": "concert_singer",
        "query": "where age > 20",
        "query_toks": [
            "where",
            "age",
            ">",
            "20"
        ],
        "query_toks_no_value": [
            "where",
            "age",
            ">",
            "value"
        ],
        "question": "Keep the records that age is greater than 20",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "is",
            "greater",
            "than",
            "20"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    20.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "original_question": "What are all distinct countries where singers above age 20 are from?",
        "instance_id": 15
    },
    {
        "db_id": "concert_singer",
        "query": "select distinct country from singer",
        "query_toks": [
            "select",
            "distinct",
            "country",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "country",
            "from",
            "singer"
        ],
        "question": "Get distinct and country of singer",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "country",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "original_question": "What are  the different countries with singers above age 20?",
        "instance_id": 16
    },
    {
        "db_id": "concert_singer",
        "query": "where age > 20",
        "query_toks": [
            "where",
            "age",
            ">",
            "20"
        ],
        "query_toks_no_value": [
            "where",
            "age",
            ">",
            "value"
        ],
        "question": "Keep the records that age is greater than 20",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "is",
            "greater",
            "than",
            "20"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    20.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT country FROM singer WHERE age  >  20",
        "original_question": "What are  the different countries with singers above age 20?",
        "instance_id": 17
    },
    {
        "db_id": "concert_singer",
        "query": "select country , count ( * ) from singer",
        "query_toks": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the number and country of singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "country",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "original_question": "Show all countries and the number of singers in each country.",
        "instance_id": 18
    },
    {
        "db_id": "concert_singer",
        "query": "group by country",
        "query_toks": [
            "group",
            "by",
            "country"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country"
        ],
        "question": "Group the records based on country",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "original_question": "Show all countries and the number of singers in each country.",
        "instance_id": 19
    },
    {
        "db_id": "concert_singer",
        "query": "select country , count ( * ) from singer",
        "query_toks": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the number and country of singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "country",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "original_question": "How many singers are from each country?",
        "instance_id": 20
    },
    {
        "db_id": "concert_singer",
        "query": "group by country",
        "query_toks": [
            "group",
            "by",
            "country"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country"
        ],
        "question": "Group the records based on country",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country ,  count(*) FROM singer GROUP BY country",
        "original_question": "How many singers are from each country?",
        "instance_id": 21
    },
    {
        "db_id": "concert_singer",
        "query": "select location , name from stadium",
        "query_toks": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium"
        ],
        "query_toks_no_value": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium"
        ],
        "question": "Get location and name of stadium",
        "question_toks": [
            "Get",
            "location",
            "and",
            "name",
            "of",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "original_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "instance_id": 22
    },
    {
        "db_id": "concert_singer",
        "query": "where capacity between 5000 and 10000",
        "query_toks": [
            "where",
            "capacity",
            "between",
            "5000",
            "and",
            "10000"
        ],
        "query_toks_no_value": [
            "where",
            "capacity",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Keep the records that capacity is between 5000 and 10000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "capacity",
            "is",
            "between",
            "5000",
            "and",
            "10000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5000.0,
                    10000.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "original_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "instance_id": 23
    },
    {
        "db_id": "concert_singer",
        "query": "select location , name from stadium",
        "query_toks": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium"
        ],
        "query_toks_no_value": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium"
        ],
        "question": "Get location and name of stadium",
        "question_toks": [
            "Get",
            "location",
            "and",
            "name",
            "of",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "original_question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "instance_id": 24
    },
    {
        "db_id": "concert_singer",
        "query": "where capacity between 5000 and 10000",
        "query_toks": [
            "where",
            "capacity",
            "between",
            "5000",
            "and",
            "10000"
        ],
        "query_toks_no_value": [
            "where",
            "capacity",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Keep the records that capacity is between 5000 and 10000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "capacity",
            "is",
            "between",
            "5000",
            "and",
            "10000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5000.0,
                    10000.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "original_question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "instance_id": 25
    },
    {
        "db_id": "concert_singer",
        "query": "select max ( capacity ) , average from stadium",
        "query_toks": [
            "select",
            "max",
            "(",
            "capacity",
            ")",
            ",",
            "average",
            "from",
            "stadium"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "capacity",
            ")",
            ",",
            "average",
            "from",
            "stadium"
        ],
        "question": "Get the maximum value of capacity and average of stadium",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "capacity",
            "and",
            "average",
            "of",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select max(capacity), average from stadium",
        "original_question": "What is the maximum capacity and the average of all stadiums ?",
        "instance_id": 26
    },
    {
        "db_id": "concert_singer",
        "query": "select avg ( capacity ) , max ( capacity ) from stadium",
        "query_toks": [
            "select",
            "avg",
            "(",
            "capacity",
            ")",
            ",",
            "max",
            "(",
            "capacity",
            ")",
            "from",
            "stadium"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "capacity",
            ")",
            ",",
            "max",
            "(",
            "capacity",
            ")",
            "from",
            "stadium"
        ],
        "question": "Get the average value of capacity and the maximum value of capacity of stadium",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "capacity",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "capacity",
            "of",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select avg(capacity) ,  max(capacity) from stadium",
        "original_question": "What is the average and maximum capacities for all stadiums ?",
        "instance_id": 27
    },
    {
        "db_id": "concert_singer",
        "query": "select name , capacity from stadium",
        "query_toks": [
            "select",
            "name",
            ",",
            "capacity",
            "from",
            "stadium"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "capacity",
            "from",
            "stadium"
        ],
        "question": "Get name and capacity of stadium",
        "question_toks": [
            "Get",
            "name",
            "and",
            "capacity",
            "of",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "original_question": "What is the name and capacity for the stadium with highest average attendance?",
        "instance_id": 28
    },
    {
        "db_id": "concert_singer",
        "query": "order by average desc ",
        "query_toks": [
            "order",
            "by",
            "average",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "average",
            "desc"
        ],
        "question": "Order these records based on average and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "average",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "original_question": "What is the name and capacity for the stadium with highest average attendance?",
        "instance_id": 29
    },
    {
        "db_id": "concert_singer",
        "query": "select name , capacity from stadium",
        "query_toks": [
            "select",
            "name",
            ",",
            "capacity",
            "from",
            "stadium"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "capacity",
            "from",
            "stadium"
        ],
        "question": "Get name and capacity of stadium",
        "question_toks": [
            "Get",
            "name",
            "and",
            "capacity",
            "of",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "original_question": "What is the name and capacity for the stadium with the highest average attendance?",
        "instance_id": 30
    },
    {
        "db_id": "concert_singer",
        "query": "order by average desc ",
        "query_toks": [
            "order",
            "by",
            "average",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "average",
            "desc"
        ],
        "question": "Order these records based on average and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "average",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "original_question": "What is the name and capacity for the stadium with the highest average attendance?",
        "instance_id": 31
    },
    {
        "db_id": "concert_singer",
        "query": "select count ( * ) from concert",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert"
        ],
        "question": "Get the number of concert",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "original_question": "How many concerts are there in year 2014 or 2015?",
        "instance_id": 32
    },
    {
        "db_id": "concert_singer",
        "query": "where year = 2014 or year = 2015",
        "query_toks": [
            "where",
            "year",
            "=",
            "2014",
            "or",
            "year",
            "=",
            "2015"
        ],
        "query_toks_no_value": [
            "where",
            "year",
            "=",
            "value",
            "or",
            "year",
            "=",
            "value"
        ],
        "question": "Keep the records that year is 2014 or year is 2015",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "is",
            "2014",
            "or",
            "year",
            "is",
            "2015"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2015.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "original_question": "How many concerts are there in year 2014 or 2015?",
        "instance_id": 33
    },
    {
        "db_id": "concert_singer",
        "query": "select count ( * ) from concert",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert"
        ],
        "question": "Get the number of concert",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "original_question": "How many concerts occurred in 2014 or 2015?",
        "instance_id": 34
    },
    {
        "db_id": "concert_singer",
        "query": "where year = 2014 or year = 2015",
        "query_toks": [
            "where",
            "year",
            "=",
            "2014",
            "or",
            "year",
            "=",
            "2015"
        ],
        "query_toks_no_value": [
            "where",
            "year",
            "=",
            "value",
            "or",
            "year",
            "=",
            "value"
        ],
        "question": "Keep the records that year is 2014 or year is 2015",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "is",
            "2014",
            "or",
            "year",
            "is",
            "2015"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2015.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
        "original_question": "How many concerts occurred in 2014 or 2015?",
        "instance_id": 35
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id",
        "query_toks": [
            "select",
            "stadium.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id"
        ],
        "query_toks_no_value": [
            "select",
            "stadium.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id"
        ],
        "question": "Get the number and name of concert that has stadium",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "concert",
            "that",
            "has",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "original_question": "Show the stadium name and the number of concerts in each stadium.",
        "instance_id": 36
    },
    {
        "db_id": "concert_singer",
        "query": "group by concert.stadium_id",
        "query_toks": [
            "group",
            "by",
            "concert.stadium_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "concert.stadium_id"
        ],
        "question": "Group the records based on stadium id of concert",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "stadium",
            "id",
            "of",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "original_question": "Show the stadium name and the number of concerts in each stadium.",
        "instance_id": 37
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , count ( * ) from concert join stadium on concert.stadium_id = stadium.stadium_id",
        "query_toks": [
            "select",
            "stadium.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id"
        ],
        "query_toks_no_value": [
            "select",
            "stadium.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id"
        ],
        "question": "Get the number and name of concert that has stadium",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "concert",
            "that",
            "has",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "original_question": "For each stadium, how many concerts play there?",
        "instance_id": 38
    },
    {
        "db_id": "concert_singer",
        "query": "group by concert.stadium_id",
        "query_toks": [
            "group",
            "by",
            "concert.stadium_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "concert.stadium_id"
        ],
        "question": "Group the records based on stadium id of concert",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "stadium",
            "id",
            "of",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
        "original_question": "For each stadium, how many concerts play there?",
        "instance_id": 39
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id",
        "query_toks": [
            "select",
            "stadium.name",
            ",",
            "stadium.capacity",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id"
        ],
        "query_toks_no_value": [
            "select",
            "stadium.name",
            ",",
            "stadium.capacity",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id"
        ],
        "question": "Get name and capacity of concert that has stadium",
        "question_toks": [
            "Get",
            "name",
            "and",
            "capacity",
            "of",
            "concert",
            "that",
            "has",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "instance_id": 40
    },
    {
        "db_id": "concert_singer",
        "query": "where concert.year <= 2014 ",
        "query_toks": [
            "where",
            "concert.year",
            "<=",
            "2014"
        ],
        "query_toks_no_value": [
            "where",
            "concert.year",
            "<=",
            "value"
        ],
        "question": "Keep the records that year of concert is less than or equal to 2014",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "concert",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2014"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "instance_id": 41
    },
    {
        "db_id": "concert_singer",
        "query": "group by stadium.stadium_id",
        "query_toks": [
            "group",
            "by",
            "stadium.stadium_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "stadium.stadium_id"
        ],
        "question": "Group the records based on stadium id of stadium",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "stadium",
            "id",
            "of",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "instance_id": 42
    },
    {
        "db_id": "concert_singer",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "instance_id": 43
    },
    {
        "db_id": "concert_singer",
        "query": "select stadium.name , stadium.capacity from concert join stadium on concert.stadium_id = stadium.stadium_id",
        "query_toks": [
            "select",
            "stadium.name",
            ",",
            "stadium.capacity",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id"
        ],
        "query_toks_no_value": [
            "select",
            "stadium.name",
            ",",
            "stadium.capacity",
            "from",
            "concert",
            "join",
            "stadium",
            "on",
            "concert.stadium_id",
            "=",
            "stadium.stadium_id"
        ],
        "question": "Get name and capacity of concert that has stadium",
        "question_toks": [
            "Get",
            "name",
            "and",
            "capacity",
            "of",
            "concert",
            "that",
            "has",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "original_question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "instance_id": 44
    },
    {
        "db_id": "concert_singer",
        "query": "where concert.year > 2013 ",
        "query_toks": [
            "where",
            "concert.year",
            ">",
            "2013"
        ],
        "query_toks_no_value": [
            "where",
            "concert.year",
            ">",
            "value"
        ],
        "question": "Keep the records that year of concert is greater than 2013",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "concert",
            "is",
            "greater",
            "than",
            "2013"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2013.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "original_question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "instance_id": 45
    },
    {
        "db_id": "concert_singer",
        "query": "group by stadium.stadium_id",
        "query_toks": [
            "group",
            "by",
            "stadium.stadium_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "stadium.stadium_id"
        ],
        "question": "Group the records based on stadium id of stadium",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "stadium",
            "id",
            "of",
            "stadium"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "original_question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "instance_id": 46
    },
    {
        "db_id": "concert_singer",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",
        "original_question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "instance_id": 47
    },
    {
        "db_id": "concert_singer",
        "query": "select year from concert",
        "query_toks": [
            "select",
            "year",
            "from",
            "concert"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "concert"
        ],
        "question": "Get year of concert",
        "question_toks": [
            "Get",
            "year",
            "of",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which year has most number of concerts?",
        "instance_id": 48
    },
    {
        "db_id": "concert_singer",
        "query": "group by year",
        "query_toks": [
            "group",
            "by",
            "year"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "year"
        ],
        "question": "Group the records based on year",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "year"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which year has most number of concerts?",
        "instance_id": 49
    },
    {
        "db_id": "concert_singer",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which year has most number of concerts?",
        "instance_id": 50
    },
    {
        "db_id": "concert_singer",
        "query": "select year from concert",
        "query_toks": [
            "select",
            "year",
            "from",
            "concert"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "concert"
        ],
        "question": "Get year of concert",
        "question_toks": [
            "Get",
            "year",
            "of",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the year that had the most concerts?",
        "instance_id": 51
    },
    {
        "db_id": "concert_singer",
        "query": "group by year",
        "query_toks": [
            "group",
            "by",
            "year"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "year"
        ],
        "question": "Group the records based on year",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "year"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the year that had the most concerts?",
        "instance_id": 52
    },
    {
        "db_id": "concert_singer",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the year that had the most concerts?",
        "instance_id": 53
    },
    {
        "db_id": "concert_singer",
        "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id",
        "query_toks": [
            "select",
            "concert.concert_name",
            ",",
            "concert.theme",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "join",
            "concert",
            "on",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id"
        ],
        "query_toks_no_value": [
            "select",
            "concert.concert_name",
            ",",
            "concert.theme",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "join",
            "concert",
            "on",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id"
        ],
        "question": "Get the number and concert name and theme of singer in concert that has concert",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "concert",
            "name",
            "and",
            "theme",
            "of",
            "singer",
            "in",
            "concert",
            "that",
            "has",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "original_question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "instance_id": 54
    },
    {
        "db_id": "concert_singer",
        "query": "group by concert.concert_id",
        "query_toks": [
            "group",
            "by",
            "concert.concert_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "concert.concert_id"
        ],
        "question": "Group the records based on concert id of concert",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "concert",
            "id",
            "of",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
        "original_question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "instance_id": 55
    },
    {
        "db_id": "concert_singer",
        "query": "select concert.concert_name , concert.theme , count ( * ) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id",
        "query_toks": [
            "select",
            "concert.concert_name",
            ",",
            "concert.theme",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "join",
            "concert",
            "on",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id"
        ],
        "query_toks_no_value": [
            "select",
            "concert.concert_name",
            ",",
            "concert.theme",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "join",
            "concert",
            "on",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id"
        ],
        "question": "Get the number and concert name and theme of singer in concert that has concert",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "concert",
            "name",
            "and",
            "theme",
            "of",
            "singer",
            "in",
            "concert",
            "that",
            "has",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "original_question": "What are the names , themes , and number of singers for every concert ?",
        "instance_id": 56
    },
    {
        "db_id": "concert_singer",
        "query": "group by concert.concert_id",
        "query_toks": [
            "group",
            "by",
            "concert.concert_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "concert.concert_id"
        ],
        "question": "Group the records based on concert id of concert",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "concert",
            "id",
            "of",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",
        "original_question": "What are the names , themes , and number of singers for every concert ?",
        "instance_id": 57
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id",
        "query_toks": [
            "select",
            "singer.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "join",
            "singer",
            "on",
            "singer_in_concert.singer_id",
            "=",
            "singer.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "join",
            "singer",
            "on",
            "singer_in_concert.singer_id",
            "=",
            "singer.singer_id"
        ],
        "question": "Get the number and name of singer in concert that has singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "singer",
            "in",
            "concert",
            "that",
            "has",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_question": "List singer names and number of concerts for each singer.",
        "instance_id": 58
    },
    {
        "db_id": "concert_singer",
        "query": "group by singer.singer_id",
        "query_toks": [
            "group",
            "by",
            "singer.singer_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "singer.singer_id"
        ],
        "question": "Group the records based on singer id of singer",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "singer",
            "id",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_question": "List singer names and number of concerts for each singer.",
        "instance_id": 59
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name , count ( * ) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id",
        "query_toks": [
            "select",
            "singer.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "join",
            "singer",
            "on",
            "singer_in_concert.singer_id",
            "=",
            "singer.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer_in_concert",
            "join",
            "singer",
            "on",
            "singer_in_concert.singer_id",
            "=",
            "singer.singer_id"
        ],
        "question": "Get the number and name of singer in concert that has singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "singer",
            "in",
            "concert",
            "that",
            "has",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_question": "What are the names of the singers and number of concerts for each person?",
        "instance_id": 60
    },
    {
        "db_id": "concert_singer",
        "query": "group by singer.singer_id",
        "query_toks": [
            "group",
            "by",
            "singer.singer_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "singer.singer_id"
        ],
        "question": "Group the records based on singer id of singer",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "singer",
            "id",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
        "original_question": "What are the names of the singers and number of concerts for each person?",
        "instance_id": 61
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id",
        "query_toks": [
            "select",
            "singer.name",
            "from",
            "singer_in_concert",
            "join",
            "singer",
            "on",
            "singer_in_concert.singer_id",
            "=",
            "singer.singer_id",
            "join",
            "concert",
            "on",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name",
            "from",
            "singer_in_concert",
            "join",
            "singer",
            "on",
            "singer_in_concert.singer_id",
            "=",
            "singer.singer_id",
            "join",
            "concert",
            "on",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id"
        ],
        "question": "Get name of singer in concert that has singer and concert",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer",
            "in",
            "concert",
            "that",
            "has",
            "singer",
            "and",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "original_question": "List all singer names in concerts in year 2014.",
        "instance_id": 62
    },
    {
        "db_id": "concert_singer",
        "query": "where concert.year = 2014",
        "query_toks": [
            "where",
            "concert.year",
            "=",
            "2014"
        ],
        "query_toks_no_value": [
            "where",
            "concert.year",
            "=",
            "value"
        ],
        "question": "Keep the records that year of concert is 2014",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "concert",
            "is",
            "2014"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "original_question": "List all singer names in concerts in year 2014.",
        "instance_id": 63
    },
    {
        "db_id": "concert_singer",
        "query": "select singer.name from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id join concert on singer_in_concert.concert_id = concert.concert_id",
        "query_toks": [
            "select",
            "singer.name",
            "from",
            "singer_in_concert",
            "join",
            "singer",
            "on",
            "singer_in_concert.singer_id",
            "=",
            "singer.singer_id",
            "join",
            "concert",
            "on",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name",
            "from",
            "singer_in_concert",
            "join",
            "singer",
            "on",
            "singer_in_concert.singer_id",
            "=",
            "singer.singer_id",
            "join",
            "concert",
            "on",
            "singer_in_concert.concert_id",
            "=",
            "concert.concert_id"
        ],
        "question": "Get name of singer in concert that has singer and concert",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer",
            "in",
            "concert",
            "that",
            "has",
            "singer",
            "and",
            "concert"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "original_question": "What are the names of the singers who performed in a concert in 2014?",
        "instance_id": 64
    },
    {
        "db_id": "concert_singer",
        "query": "where concert.year = 2014",
        "query_toks": [
            "where",
            "concert.year",
            "=",
            "2014"
        ],
        "query_toks_no_value": [
            "where",
            "concert.year",
            "=",
            "value"
        ],
        "question": "Keep the records that year of concert is 2014",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "concert",
            "is",
            "2014"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    2014.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
        "original_question": "What are the names of the singers who performed in a concert in 2014?",
        "instance_id": 65
    },
    {
        "db_id": "concert_singer",
        "query": "select name , country from singer",
        "query_toks": [
            "select",
            "name",
            ",",
            "country",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            "from",
            "singer"
        ],
        "question": "Get name and country of singer",
        "question_toks": [
            "Get",
            "name",
            "and",
            "country",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "original_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "instance_id": 66
    },
    {
        "db_id": "concert_singer",
        "query": "where song_name like \"% hey %\"",
        "query_toks": [
            "where",
            "song_name",
            "like",
            "\"%",
            "hey",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "song_name",
            "like",
            "\"%",
            "hey",
            "%\""
        ],
        "question": "Keep the records that song name is in the form of \"% hey %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "song",
            "name",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "hey",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"%Hey%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "original_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "instance_id": 67
    },
    {
        "db_id": "concert_singer",
        "query": "select name , country from singer",
        "query_toks": [
            "select",
            "name",
            ",",
            "country",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            "from",
            "singer"
        ],
        "question": "Get name and country of singer",
        "question_toks": [
            "Get",
            "name",
            "and",
            "country",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "original_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "instance_id": 68
    },
    {
        "db_id": "concert_singer",
        "query": "where song_name like \"% hey %\"",
        "query_toks": [
            "where",
            "song_name",
            "like",
            "\"%",
            "hey",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "song_name",
            "like",
            "\"%",
            "hey",
            "%\""
        ],
        "question": "Keep the records that song name is in the form of \"% hey %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "song",
            "name",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "hey",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"%Hey%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
        "original_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "instance_id": 69
    },
    {
        "db_id": "pets_1",
        "query": "select count ( * ) from pets",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets"
        ],
        "question": "Get the number of pets",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
        "original_question": "Find the number of pets whose weight is heavier than 10.",
        "instance_id": 70
    },
    {
        "db_id": "pets_1",
        "query": "where weight > 10",
        "query_toks": [
            "where",
            "weight",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "where",
            "weight",
            ">",
            "value"
        ],
        "question": "Keep the records that weight is greater than 10",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "weight",
            "is",
            "greater",
            "than",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
        "original_question": "Find the number of pets whose weight is heavier than 10.",
        "instance_id": 71
    },
    {
        "db_id": "pets_1",
        "query": "select count ( * ) from pets",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "pets"
        ],
        "question": "Get the number of pets",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
        "original_question": "How many pets have a greater weight than 10?",
        "instance_id": 72
    },
    {
        "db_id": "pets_1",
        "query": "where weight > 10",
        "query_toks": [
            "where",
            "weight",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "where",
            "weight",
            ">",
            "value"
        ],
        "question": "Keep the records that weight is greater than 10",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "weight",
            "is",
            "greater",
            "than",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM pets WHERE weight  >  10",
        "original_question": "How many pets have a greater weight than 10?",
        "instance_id": 73
    },
    {
        "db_id": "pets_1",
        "query": "select weight from pets",
        "query_toks": [
            "select",
            "weight",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "weight",
            "from",
            "pets"
        ],
        "question": "Get weight of pets",
        "question_toks": [
            "Get",
            "weight",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_question": "Find the weight of the youngest dog.",
        "instance_id": 74
    },
    {
        "db_id": "pets_1",
        "query": "order by pet_age ",
        "query_toks": [
            "order",
            "by",
            "pet_age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "pet_age"
        ],
        "question": "Order these records based on pet age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "pet",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_question": "Find the weight of the youngest dog.",
        "instance_id": 75
    },
    {
        "db_id": "pets_1",
        "query": "select weight from pets",
        "query_toks": [
            "select",
            "weight",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "weight",
            "from",
            "pets"
        ],
        "question": "Get weight of pets",
        "question_toks": [
            "Get",
            "weight",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_question": "How much does the youngest dog weigh?",
        "instance_id": 76
    },
    {
        "db_id": "pets_1",
        "query": "order by pet_age ",
        "query_toks": [
            "order",
            "by",
            "pet_age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "pet_age"
        ],
        "question": "Order these records based on pet age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "pet",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_question": "How much does the youngest dog weigh?",
        "instance_id": 77
    },
    {
        "db_id": "pets_1",
        "query": "select max ( weight ) , pettype from pets",
        "query_toks": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "question": "Get the maximum value of weight and pettype of pets",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "weight",
            "and",
            "pettype",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "original_question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "instance_id": 78
    },
    {
        "db_id": "pets_1",
        "query": "group by pettype",
        "query_toks": [
            "group",
            "by",
            "pettype"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "pettype"
        ],
        "question": "Group the records based on pettype",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "pettype"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "original_question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "instance_id": 79
    },
    {
        "db_id": "pets_1",
        "query": "select max ( weight ) , pettype from pets",
        "query_toks": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "question": "Get the maximum value of weight and pettype of pets",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "weight",
            "and",
            "pettype",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "original_question": "List the maximum weight and type for each type of pet.",
        "instance_id": 80
    },
    {
        "db_id": "pets_1",
        "query": "group by pettype",
        "query_toks": [
            "group",
            "by",
            "pettype"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "pettype"
        ],
        "question": "Group the records based on pettype",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "pettype"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
        "original_question": "List the maximum weight and type for each type of pet.",
        "instance_id": 81
    },
    {
        "db_id": "pets_1",
        "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "question": "Get the number of student that has has pet",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "original_question": "Find number of pets owned by students who are older than 20.",
        "instance_id": 82
    },
    {
        "db_id": "pets_1",
        "query": "where student.age > 20",
        "query_toks": [
            "where",
            "student.age",
            ">",
            "20"
        ],
        "query_toks_no_value": [
            "where",
            "student.age",
            ">",
            "value"
        ],
        "question": "Keep the records that age of student is greater than 20",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "of",
            "student",
            "is",
            "greater",
            "than",
            "20"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    20.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "original_question": "Find number of pets owned by students who are older than 20.",
        "instance_id": 83
    },
    {
        "db_id": "pets_1",
        "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "question": "Get the number of student that has has pet",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "original_question": "How many pets are owned by students that have an age greater than 20?",
        "instance_id": 84
    },
    {
        "db_id": "pets_1",
        "query": "where student.age > 20",
        "query_toks": [
            "where",
            "student.age",
            ">",
            "20"
        ],
        "query_toks_no_value": [
            "where",
            "student.age",
            ">",
            "value"
        ],
        "question": "Keep the records that age of student is greater than 20",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "of",
            "student",
            "is",
            "greater",
            "than",
            "20"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    20.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
        "original_question": "How many pets are owned by students that have an age greater than 20?",
        "instance_id": 85
    },
    {
        "db_id": "pets_1",
        "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "has_pet.petid",
            "=",
            "pets.petid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "has_pet.petid",
            "=",
            "pets.petid"
        ],
        "question": "Get the number of student that has has pet and pets",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet",
            "and",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "original_question": "Find the number of dog pets that are raised by female students (with sex F).",
        "instance_id": 86
    },
    {
        "db_id": "pets_1",
        "query": "where student.sex = \"f\" and pets.pettype = \"dog\"",
        "query_toks": [
            "where",
            "student.sex",
            "=",
            "\"f\"",
            "and",
            "pets.pettype",
            "=",
            "\"dog\""
        ],
        "query_toks_no_value": [
            "where",
            "student.sex",
            "=",
            "\"f\"",
            "and",
            "pets.pettype",
            "=",
            "\"dog\""
        ],
        "question": "Keep the records that sex of student is \"f\" and pettype of pets is \"dog\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sex",
            "of",
            "student",
            "is",
            "\"f\"",
            "and",
            "pettype",
            "of",
            "pets",
            "is",
            "\"dog\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"F\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "original_question": "Find the number of dog pets that are raised by female students (with sex F).",
        "instance_id": 87
    },
    {
        "db_id": "pets_1",
        "query": "select count ( * ) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "has_pet.petid",
            "=",
            "pets.petid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "has_pet.petid",
            "=",
            "pets.petid"
        ],
        "question": "Get the number of student that has has pet and pets",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet",
            "and",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "original_question": "How many dog pets are raised by female students?",
        "instance_id": 88
    },
    {
        "db_id": "pets_1",
        "query": "where student.sex = \"f\" and pets.pettype = \"dog\"",
        "query_toks": [
            "where",
            "student.sex",
            "=",
            "\"f\"",
            "and",
            "pets.pettype",
            "=",
            "\"dog\""
        ],
        "query_toks_no_value": [
            "where",
            "student.sex",
            "=",
            "\"f\"",
            "and",
            "pets.pettype",
            "=",
            "\"dog\""
        ],
        "question": "Keep the records that sex of student is \"f\" and pettype of pets is \"dog\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sex",
            "of",
            "student",
            "is",
            "\"f\"",
            "and",
            "pettype",
            "of",
            "pets",
            "is",
            "\"dog\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"F\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
        "original_question": "How many dog pets are raised by female students?",
        "instance_id": 89
    },
    {
        "db_id": "pets_1",
        "query": "select count ( distinct pettype ) from pets",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "pettype",
            ")",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "pettype",
            ")",
            "from",
            "pets"
        ],
        "question": "Get the number of distinct pettype of pets",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "pettype",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT pettype) FROM pets",
        "original_question": "Find the number of distinct type of pets.",
        "instance_id": 90
    },
    {
        "db_id": "pets_1",
        "query": "select count ( distinct pettype ) from pets",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "pettype",
            ")",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "pettype",
            ")",
            "from",
            "pets"
        ],
        "question": "Get the number of distinct pettype of pets",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "pettype",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                12,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT pettype) FROM pets",
        "original_question": "How many different types of pet are there?",
        "instance_id": 91
    },
    {
        "db_id": "pets_1",
        "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid",
        "query_toks": [
            "select",
            "distinct",
            "student.fname",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "pets.petid",
            "=",
            "has_pet.petid"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "student.fname",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "pets.petid",
            "=",
            "has_pet.petid"
        ],
        "question": "Get distinct and fname of student that has has pet and pets",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "fname",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet",
            "and",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "original_question": "Find the first name of students who have cat or dog pet.",
        "instance_id": 92
    },
    {
        "db_id": "pets_1",
        "query": "where pets.pettype = \"cat\" or pets.pettype = \"dog\"",
        "query_toks": [
            "where",
            "pets.pettype",
            "=",
            "\"cat\"",
            "or",
            "pets.pettype",
            "=",
            "\"dog\""
        ],
        "query_toks_no_value": [
            "where",
            "pets.pettype",
            "=",
            "\"cat\"",
            "or",
            "pets.pettype",
            "=",
            "\"dog\""
        ],
        "question": "Keep the records that pettype of pets is \"cat\" or pettype of pets is \"dog\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "pettype",
            "of",
            "pets",
            "is",
            "\"cat\"",
            "or",
            "pettype",
            "of",
            "pets",
            "is",
            "\"dog\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "original_question": "Find the first name of students who have cat or dog pet.",
        "instance_id": 93
    },
    {
        "db_id": "pets_1",
        "query": "select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid",
        "query_toks": [
            "select",
            "distinct",
            "student.fname",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "pets.petid",
            "=",
            "has_pet.petid"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "student.fname",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "pets.petid",
            "=",
            "has_pet.petid"
        ],
        "question": "Get distinct and fname of student that has has pet and pets",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "fname",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet",
            "and",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "original_question": "What are the first names of every student who has a cat or dog as a pet?",
        "instance_id": 94
    },
    {
        "db_id": "pets_1",
        "query": "where pets.pettype = \"cat\" or pets.pettype = \"dog\"",
        "query_toks": [
            "where",
            "pets.pettype",
            "=",
            "\"cat\"",
            "or",
            "pets.pettype",
            "=",
            "\"dog\""
        ],
        "query_toks_no_value": [
            "where",
            "pets.pettype",
            "=",
            "\"cat\"",
            "or",
            "pets.pettype",
            "=",
            "\"dog\""
        ],
        "question": "Keep the records that pettype of pets is \"cat\" or pettype of pets is \"dog\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "pettype",
            "of",
            "pets",
            "is",
            "\"cat\"",
            "or",
            "pettype",
            "of",
            "pets",
            "is",
            "\"dog\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"dog\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
        "original_question": "What are the first names of every student who has a cat or dog as a pet?",
        "instance_id": 95
    },
    {
        "db_id": "pets_1",
        "query": "select pettype , weight from pets",
        "query_toks": [
            "select",
            "pettype",
            ",",
            "weight",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "pettype",
            ",",
            "weight",
            "from",
            "pets"
        ],
        "question": "Get pettype and weight of pets",
        "question_toks": [
            "Get",
            "pettype",
            "and",
            "weight",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_question": "Find the type and weight of the youngest pet.",
        "instance_id": 96
    },
    {
        "db_id": "pets_1",
        "query": "order by pet_age ",
        "query_toks": [
            "order",
            "by",
            "pet_age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "pet_age"
        ],
        "question": "Order these records based on pet age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "pet",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_question": "Find the type and weight of the youngest pet.",
        "instance_id": 97
    },
    {
        "db_id": "pets_1",
        "query": "select pettype , weight from pets",
        "query_toks": [
            "select",
            "pettype",
            ",",
            "weight",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "pettype",
            ",",
            "weight",
            "from",
            "pets"
        ],
        "question": "Get pettype and weight of pets",
        "question_toks": [
            "Get",
            "pettype",
            "and",
            "weight",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_question": "What type of pet is the youngest animal, and how much does it weigh?",
        "instance_id": 98
    },
    {
        "db_id": "pets_1",
        "query": "order by pet_age ",
        "query_toks": [
            "order",
            "by",
            "pet_age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "pet_age"
        ],
        "question": "Order these records based on pet age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "pet",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
        "original_question": "What type of pet is the youngest animal, and how much does it weigh?",
        "instance_id": 99
    },
    {
        "db_id": "pets_1",
        "query": "select petid , weight from pets",
        "query_toks": [
            "select",
            "petid",
            ",",
            "weight",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "petid",
            ",",
            "weight",
            "from",
            "pets"
        ],
        "question": "Get petid and weight of pets",
        "question_toks": [
            "Get",
            "petid",
            "and",
            "weight",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "original_question": "Find the id and weight of all pets whose age is older than 1.",
        "instance_id": 100
    },
    {
        "db_id": "pets_1",
        "query": "where pet_age > 1",
        "query_toks": [
            "where",
            "pet_age",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "where",
            "pet_age",
            ">",
            "value"
        ],
        "question": "Keep the records that pet age is greater than 1",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "pet",
            "age",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "original_question": "Find the id and weight of all pets whose age is older than 1.",
        "instance_id": 101
    },
    {
        "db_id": "pets_1",
        "query": "select petid , weight from pets",
        "query_toks": [
            "select",
            "petid",
            ",",
            "weight",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "petid",
            ",",
            "weight",
            "from",
            "pets"
        ],
        "question": "Get petid and weight of pets",
        "question_toks": [
            "Get",
            "petid",
            "and",
            "weight",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "original_question": "What is the id and weight of every pet who is older than 1?",
        "instance_id": 102
    },
    {
        "db_id": "pets_1",
        "query": "where pet_age > 1",
        "query_toks": [
            "where",
            "pet_age",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "where",
            "pet_age",
            ">",
            "value"
        ],
        "question": "Keep the records that pet age is greater than 1",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "pet",
            "age",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
        "original_question": "What is the id and weight of every pet who is older than 1?",
        "instance_id": 103
    },
    {
        "db_id": "pets_1",
        "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets",
        "query_toks": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "question": "Get the average value of pet age and the maximum value of pet age and pettype of pets",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "pet",
            "age",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "pet",
            "age",
            "and",
            "pettype",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "original_question": "Find the average and maximum age for each type of pet.",
        "instance_id": 104
    },
    {
        "db_id": "pets_1",
        "query": "group by pettype",
        "query_toks": [
            "group",
            "by",
            "pettype"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "pettype"
        ],
        "question": "Group the records based on pettype",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "pettype"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "original_question": "Find the average and maximum age for each type of pet.",
        "instance_id": 105
    },
    {
        "db_id": "pets_1",
        "query": "select avg ( pet_age ) , max ( pet_age ) , pettype from pets",
        "query_toks": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "question": "Get the average value of pet age and the maximum value of pet age and pettype of pets",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "pet",
            "age",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "pet",
            "age",
            "and",
            "pettype",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "original_question": "What is the average and maximum age for each pet type?",
        "instance_id": 106
    },
    {
        "db_id": "pets_1",
        "query": "group by pettype",
        "query_toks": [
            "group",
            "by",
            "pettype"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "pettype"
        ],
        "question": "Group the records based on pettype",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "pettype"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
        "original_question": "What is the average and maximum age for each pet type?",
        "instance_id": 107
    },
    {
        "db_id": "pets_1",
        "query": "select avg ( weight ) , pettype from pets",
        "query_toks": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "question": "Get the average value of weight and pettype of pets",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "weight",
            "and",
            "pettype",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "original_question": "Find the average weight for each pet type.",
        "instance_id": 108
    },
    {
        "db_id": "pets_1",
        "query": "group by pettype",
        "query_toks": [
            "group",
            "by",
            "pettype"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "pettype"
        ],
        "question": "Group the records based on pettype",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "pettype"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "original_question": "Find the average weight for each pet type.",
        "instance_id": 109
    },
    {
        "db_id": "pets_1",
        "query": "select avg ( weight ) , pettype from pets",
        "query_toks": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets"
        ],
        "question": "Get the average value of weight and pettype of pets",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "weight",
            "and",
            "pettype",
            "of",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "original_question": "What is the average weight for each type of pet?",
        "instance_id": 110
    },
    {
        "db_id": "pets_1",
        "query": "group by pettype",
        "query_toks": [
            "group",
            "by",
            "pettype"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "pettype"
        ],
        "question": "Group the records based on pettype",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "pettype"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
        "original_question": "What is the average weight for each type of pet?",
        "instance_id": 111
    },
    {
        "db_id": "pets_1",
        "query": "select distinct student.fname , student.age from student join has_pet",
        "query_toks": [
            "select",
            "distinct",
            "student.fname",
            ",",
            "student.age",
            "from",
            "student",
            "join",
            "has_pet"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "student.fname",
            ",",
            "student.age",
            "from",
            "student",
            "join",
            "has_pet"
        ],
        "question": "Get distinct and fname and age of student that has has pet",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "fname",
            "and",
            "age",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "original_question": "Find the first name and age of students who have a pet.",
        "instance_id": 112
    },
    {
        "db_id": "pets_1",
        "query": "select distinct student.fname , student.age from student join has_pet",
        "query_toks": [
            "select",
            "distinct",
            "student.fname",
            ",",
            "student.age",
            "from",
            "student",
            "join",
            "has_pet"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "student.fname",
            ",",
            "student.age",
            "from",
            "student",
            "join",
            "has_pet"
        ],
        "question": "Get distinct and fname and age of student that has has pet",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "fname",
            "and",
            "age",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
        "original_question": "What are the different first names and ages of the students who do have pets?",
        "instance_id": 113
    },
    {
        "db_id": "pets_1",
        "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid",
        "query_toks": [
            "select",
            "has_pet.petid",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "query_toks_no_value": [
            "select",
            "has_pet.petid",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "question": "Get petid of student that has has pet",
        "question_toks": [
            "Get",
            "petid",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "original_question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "instance_id": 114
    },
    {
        "db_id": "pets_1",
        "query": "where student.lname = \"smith\"",
        "query_toks": [
            "where",
            "student.lname",
            "=",
            "\"smith\""
        ],
        "query_toks_no_value": [
            "where",
            "student.lname",
            "=",
            "\"smith\""
        ],
        "question": "Keep the records that lname of student is \"smith\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "lname",
            "of",
            "student",
            "is",
            "\"smith\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Smith\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "original_question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "instance_id": 115
    },
    {
        "db_id": "pets_1",
        "query": "select has_pet.petid from student join has_pet on student.stuid = has_pet.stuid",
        "query_toks": [
            "select",
            "has_pet.petid",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "query_toks_no_value": [
            "select",
            "has_pet.petid",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "question": "Get petid of student that has has pet",
        "question_toks": [
            "Get",
            "petid",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "original_question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "instance_id": 116
    },
    {
        "db_id": "pets_1",
        "query": "where student.lname = \"smith\"",
        "query_toks": [
            "where",
            "student.lname",
            "=",
            "\"smith\""
        ],
        "query_toks_no_value": [
            "where",
            "student.lname",
            "=",
            "\"smith\""
        ],
        "question": "Keep the records that lname of student is \"smith\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "lname",
            "of",
            "student",
            "is",
            "\"smith\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Smith\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
        "original_question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "instance_id": 117
    },
    {
        "db_id": "pets_1",
        "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student.stuid",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student.stuid",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "question": "Get the number and stuid of student that has has pet",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "stuid",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "original_question": "Find the number of pets for each student who has any pet and student id.",
        "instance_id": 118
    },
    {
        "db_id": "pets_1",
        "query": "group by student.stuid",
        "query_toks": [
            "group",
            "by",
            "student.stuid"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student.stuid"
        ],
        "question": "Group the records based on stuid of student",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "stuid",
            "of",
            "student"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
        "original_question": "Find the number of pets for each student who has any pet and student id.",
        "instance_id": 119
    },
    {
        "db_id": "pets_1",
        "query": "select count ( * ) , student.stuid from student join has_pet on student.stuid = has_pet.stuid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student.stuid",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student.stuid",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "question": "Get the number and stuid of student that has has pet",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "stuid",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "original_question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "instance_id": 120
    },
    {
        "db_id": "pets_1",
        "query": "group by student.stuid",
        "query_toks": [
            "group",
            "by",
            "student.stuid"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student.stuid"
        ],
        "question": "Group the records based on stuid of student",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "stuid",
            "of",
            "student"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",
        "original_question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "instance_id": 121
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid",
        "query_toks": [
            "select",
            "student.fname",
            ",",
            "student.sex",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "query_toks_no_value": [
            "select",
            "student.fname",
            ",",
            "student.sex",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "question": "Get fname and sex of student that has has pet",
        "question_toks": [
            "Get",
            "fname",
            "and",
            "sex",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "original_question": "Find the first name and gender of student who have more than one pet.",
        "instance_id": 122
    },
    {
        "db_id": "pets_1",
        "query": "group by student.stuid having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "student.stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student.stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on stuid of student that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "stuid",
            "of",
            "student",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "original_question": "Find the first name and gender of student who have more than one pet.",
        "instance_id": 123
    },
    {
        "db_id": "pets_1",
        "query": "select student.fname , student.sex from student join has_pet on student.stuid = has_pet.stuid",
        "query_toks": [
            "select",
            "student.fname",
            ",",
            "student.sex",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "query_toks_no_value": [
            "select",
            "student.fname",
            ",",
            "student.sex",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid"
        ],
        "question": "Get fname and sex of student that has has pet",
        "question_toks": [
            "Get",
            "fname",
            "and",
            "sex",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "original_question": "What is the first name and gender of the all the students who have more than one pet?",
        "instance_id": 124
    },
    {
        "db_id": "pets_1",
        "query": "group by student.stuid having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "student.stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student.stuid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on stuid of student that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "stuid",
            "of",
            "student",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
        "original_question": "What is the first name and gender of the all the students who have more than one pet?",
        "instance_id": 125
    },
    {
        "db_id": "pets_1",
        "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid",
        "query_toks": [
            "select",
            "student.lname",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "pets.petid",
            "=",
            "has_pet.petid"
        ],
        "query_toks_no_value": [
            "select",
            "student.lname",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "pets.petid",
            "=",
            "has_pet.petid"
        ],
        "question": "Get lname of student that has has pet and pets",
        "question_toks": [
            "Get",
            "lname",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet",
            "and",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "original_question": "Find the last name of the student who has a cat that is age 3.",
        "instance_id": 126
    },
    {
        "db_id": "pets_1",
        "query": "where pets.pet_age = 3 and pets.pettype = \"cat\"",
        "query_toks": [
            "where",
            "pets.pet_age",
            "=",
            "3",
            "and",
            "pets.pettype",
            "=",
            "\"cat\""
        ],
        "query_toks_no_value": [
            "where",
            "pets.pet_age",
            "=",
            "value",
            "and",
            "pets.pettype",
            "=",
            "\"cat\""
        ],
        "question": "Keep the records that pet age of pets is 3 and pettype of pets is \"cat\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "pet",
            "age",
            "of",
            "pets",
            "is",
            "3",
            "and",
            "pettype",
            "of",
            "pets",
            "is",
            "\"cat\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "original_question": "Find the last name of the student who has a cat that is age 3.",
        "instance_id": 127
    },
    {
        "db_id": "pets_1",
        "query": "select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on pets.petid = has_pet.petid",
        "query_toks": [
            "select",
            "student.lname",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "pets.petid",
            "=",
            "has_pet.petid"
        ],
        "query_toks_no_value": [
            "select",
            "student.lname",
            "from",
            "student",
            "join",
            "has_pet",
            "on",
            "student.stuid",
            "=",
            "has_pet.stuid",
            "join",
            "pets",
            "on",
            "pets.petid",
            "=",
            "has_pet.petid"
        ],
        "question": "Get lname of student that has has pet and pets",
        "question_toks": [
            "Get",
            "lname",
            "of",
            "student",
            "that",
            "has",
            "has",
            "pet",
            "and",
            "pets"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "original_question": "What is the last name of the student who has a cat that is 3 years old?",
        "instance_id": 128
    },
    {
        "db_id": "pets_1",
        "query": "where pets.pet_age = 3 and pets.pettype = \"cat\"",
        "query_toks": [
            "where",
            "pets.pet_age",
            "=",
            "3",
            "and",
            "pets.pettype",
            "=",
            "\"cat\""
        ],
        "query_toks_no_value": [
            "where",
            "pets.pet_age",
            "=",
            "value",
            "and",
            "pets.pettype",
            "=",
            "\"cat\""
        ],
        "question": "Keep the records that pet age of pets is 3 and pettype of pets is \"cat\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "pet",
            "age",
            "of",
            "pets",
            "is",
            "3",
            "and",
            "pettype",
            "of",
            "pets",
            "is",
            "\"cat\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"cat\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
        "original_question": "What is the last name of the student who has a cat that is 3 years old?",
        "instance_id": 129
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from continents",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents"
        ],
        "question": "Get the number of continents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "continents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CONTINENTS;",
        "original_question": "How many continents are there?",
        "instance_id": 130
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from continents",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents"
        ],
        "question": "Get the number of continents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "continents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CONTINENTS;",
        "original_question": "What is the number of continents?",
        "instance_id": 131
    },
    {
        "db_id": "car_1",
        "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent",
        "query_toks": [
            "select",
            "continents.contid",
            ",",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent"
        ],
        "query_toks_no_value": [
            "select",
            "continents.contid",
            ",",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent"
        ],
        "question": "Get the number and contid and continent of continents that has countries",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "contid",
            "and",
            "continent",
            "of",
            "continents",
            "that",
            "has",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "instance_id": 132
    },
    {
        "db_id": "car_1",
        "query": "group by continents.contid",
        "query_toks": [
            "group",
            "by",
            "continents.contid"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "continents.contid"
        ],
        "question": "Group the records based on contid of continents",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "contid",
            "of",
            "continents"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "instance_id": 133
    },
    {
        "db_id": "car_1",
        "query": "select continents.contid , continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent",
        "query_toks": [
            "select",
            "continents.contid",
            ",",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent"
        ],
        "query_toks_no_value": [
            "select",
            "continents.contid",
            ",",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent"
        ],
        "question": "Get the number and contid and continent of continents that has countries",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "contid",
            "and",
            "continent",
            "of",
            "continents",
            "that",
            "has",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_question": "For each continent, list its id, name, and how many countries it has?",
        "instance_id": 134
    },
    {
        "db_id": "car_1",
        "query": "group by continents.contid",
        "query_toks": [
            "group",
            "by",
            "continents.contid"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "continents.contid"
        ],
        "question": "Group the records based on contid of continents",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "contid",
            "of",
            "continents"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
        "original_question": "For each continent, list its id, name, and how many countries it has?",
        "instance_id": 135
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from countries",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries"
        ],
        "question": "Get the number of countries",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM COUNTRIES;",
        "original_question": "How many countries are listed?",
        "instance_id": 136
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from countries",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries"
        ],
        "question": "Get the number of countries",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM COUNTRIES;",
        "original_question": "How many countries exist?",
        "instance_id": 137
    },
    {
        "db_id": "car_1",
        "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker",
        "query_toks": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "query_toks_no_value": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "question": "Get the number and fullname and id of car makers that has model list",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "fullname",
            "and",
            "id",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "model",
            "list"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "original_question": "How many models does each car maker produce? List maker full name, id and the number.",
        "instance_id": 138
    },
    {
        "db_id": "car_1",
        "query": "group by car_makers.id",
        "query_toks": [
            "group",
            "by",
            "car_makers.id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "car_makers.id"
        ],
        "question": "Group the records based on id of car makers",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "original_question": "How many models does each car maker produce? List maker full name, id and the number.",
        "instance_id": 139
    },
    {
        "db_id": "car_1",
        "query": "select car_makers.fullname , car_makers.id , count ( * ) from car_makers join model_list on car_makers.id = model_list.maker",
        "query_toks": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "query_toks_no_value": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "question": "Get the number and fullname and id of car makers that has model list",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "fullname",
            "and",
            "id",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "model",
            "list"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "original_question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "instance_id": 140
    },
    {
        "db_id": "car_1",
        "query": "group by car_makers.id",
        "query_toks": [
            "group",
            "by",
            "car_makers.id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "car_makers.id"
        ],
        "question": "Group the records based on id of car makers",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
        "original_question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "instance_id": 141
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get model of car names that has cars data",
        "question_toks": [
            "Get",
            "model",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "original_question": "Which model of the car has the minimum horsepower?",
        "instance_id": 142
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.horsepower asc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.horsepower",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.horsepower",
            "asc"
        ],
        "question": "Order these records based on horsepower of cars data and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "horsepower",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "original_question": "Which model of the car has the minimum horsepower?",
        "instance_id": 143
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get model of car names that has cars data",
        "question_toks": [
            "Get",
            "model",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "original_question": "What is the model of the car with the smallest amount of horsepower?",
        "instance_id": 144
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.horsepower asc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.horsepower",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.horsepower",
            "asc"
        ],
        "question": "Order these records based on horsepower of cars data and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "horsepower",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
        "original_question": "What is the model of the car with the smallest amount of horsepower?",
        "instance_id": 145
    },
    {
        "db_id": "car_1",
        "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "distinct",
            "car_makers.maker",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "car_makers.maker",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get distinct and maker of car makers that has model list and car names and cars data",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "maker",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "model",
            "list",
            "and",
            "car",
            "names",
            "and",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "original_question": "Find the name of the makers that produced some cars in the year of 1970?",
        "instance_id": 146
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.year = \"1970\"",
        "query_toks": [
            "where",
            "cars_data.year",
            "=",
            "\"1970\""
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.year",
            "=",
            "\"1970\""
        ],
        "question": "Keep the records that year of cars data is \"1970\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "cars",
            "data",
            "is",
            "\"1970\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    "\"1970\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "original_question": "Find the name of the makers that produced some cars in the year of 1970?",
        "instance_id": 147
    },
    {
        "db_id": "car_1",
        "query": "select distinct car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "distinct",
            "car_makers.maker",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "car_makers.maker",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get distinct and maker of car makers that has model list and car names and cars data",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "maker",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "model",
            "list",
            "and",
            "car",
            "names",
            "and",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "original_question": "What is the name of the different car makers who produced a car in 1970?",
        "instance_id": 148
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.year = \"1970\"",
        "query_toks": [
            "where",
            "cars_data.year",
            "=",
            "\"1970\""
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.year",
            "=",
            "\"1970\""
        ],
        "question": "Keep the records that year of cars data is \"1970\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "cars",
            "data",
            "is",
            "\"1970\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    "\"1970\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
        "original_question": "What is the name of the different car makers who produced a car in 1970?",
        "instance_id": 149
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "model_list",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "model_list",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get distinct and model of model list that has car names and cars data",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "model",
            "of",
            "model",
            "list",
            "that",
            "has",
            "car",
            "names",
            "and",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "original_question": "Which distinct car models are the produced after 1980?",
        "instance_id": 150
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.year > 1980",
        "query_toks": [
            "where",
            "cars_data.year",
            ">",
            "1980"
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.year",
            ">",
            "value"
        ],
        "question": "Keep the records that year of cars data is greater than 1980",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "cars",
            "data",
            "is",
            "greater",
            "than",
            "1980"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "original_question": "Which distinct car models are the produced after 1980?",
        "instance_id": 151
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "model_list",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "model_list",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get distinct and model of model list that has car names and cars data",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "model",
            "of",
            "model",
            "list",
            "that",
            "has",
            "car",
            "names",
            "and",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "original_question": "What are the different models for the cards produced after 1980?",
        "instance_id": 152
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.year > 1980",
        "query_toks": [
            "where",
            "cars_data.year",
            ">",
            "1980"
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.year",
            ">",
            "value"
        ],
        "question": "Keep the records that year of cars data is greater than 1980",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "cars",
            "data",
            "is",
            "greater",
            "than",
            "1980"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
        "original_question": "What are the different models for the cards produced after 1980?",
        "instance_id": 153
    },
    {
        "db_id": "car_1",
        "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country",
        "query_toks": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "question": "Get the number and continent of continents that has countries and car makers",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "continent",
            "of",
            "continents",
            "that",
            "has",
            "countries",
            "and",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_question": "How many car makers are there in each continents? List the continent name and the count.",
        "instance_id": 154
    },
    {
        "db_id": "car_1",
        "query": "group by continents.continent",
        "query_toks": [
            "group",
            "by",
            "continents.continent"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "continents.continent"
        ],
        "question": "Group the records based on continent of continents",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "continent",
            "of",
            "continents"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_question": "How many car makers are there in each continents? List the continent name and the count.",
        "instance_id": 155
    },
    {
        "db_id": "car_1",
        "query": "select continents.continent , count ( * ) from continents join countries on continents.contid = countries.continent join car_makers on countries.countryid = car_makers.country",
        "query_toks": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "select",
            "continents.continent",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "continents",
            "join",
            "countries",
            "on",
            "continents.contid",
            "=",
            "countries.continent",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "question": "Get the number and continent of continents that has countries and car makers",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "continent",
            "of",
            "continents",
            "that",
            "has",
            "countries",
            "and",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_question": "What is the name of each continent and how many car makers are there in each one?",
        "instance_id": 156
    },
    {
        "db_id": "car_1",
        "query": "group by continents.continent",
        "query_toks": [
            "group",
            "by",
            "continents.continent"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "continents.continent"
        ],
        "question": "Group the records based on continent of continents",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "continent",
            "of",
            "continents"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
        "original_question": "What is the name of each continent and how many car makers are there in each one?",
        "instance_id": 157
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid",
        "query_toks": [
            "select",
            "countries.countryname",
            "from",
            "car_makers",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "query_toks_no_value": [
            "select",
            "countries.countryname",
            "from",
            "car_makers",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "question": "Get countryname of car makers that has countries",
        "question_toks": [
            "Get",
            "countryname",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_question": "Which of the countries has the most car makers? List the country name.",
        "instance_id": 158
    },
    {
        "db_id": "car_1",
        "query": "group by car_makers.country",
        "query_toks": [
            "group",
            "by",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "car_makers.country"
        ],
        "question": "Group the records based on country of car makers",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "of",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_question": "Which of the countries has the most car makers? List the country name.",
        "instance_id": 159
    },
    {
        "db_id": "car_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_question": "Which of the countries has the most car makers? List the country name.",
        "instance_id": 160
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname from car_makers join countries on car_makers.country = countries.countryid",
        "query_toks": [
            "select",
            "countries.countryname",
            "from",
            "car_makers",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "query_toks_no_value": [
            "select",
            "countries.countryname",
            "from",
            "car_makers",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "question": "Get countryname of car makers that has countries",
        "question_toks": [
            "Get",
            "countryname",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_question": "What is the name of the country with the most car makers?",
        "instance_id": 161
    },
    {
        "db_id": "car_1",
        "query": "group by car_makers.country",
        "query_toks": [
            "group",
            "by",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "car_makers.country"
        ],
        "question": "Group the records based on country of car makers",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "of",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_question": "What is the name of the country with the most car makers?",
        "instance_id": 162
    },
    {
        "db_id": "car_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
        "original_question": "What is the name of the country with the most car makers?",
        "instance_id": 163
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) , car_makers.fullname from model_list join car_makers on model_list.maker = car_makers.id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "car_makers.fullname",
            "from",
            "model_list",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "car_makers.fullname",
            "from",
            "model_list",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id"
        ],
        "question": "Get the number and fullname of model list that has car makers",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "fullname",
            "of",
            "model",
            "list",
            "that",
            "has",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "original_question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "instance_id": 164
    },
    {
        "db_id": "car_1",
        "query": "group by car_makers.id",
        "query_toks": [
            "group",
            "by",
            "car_makers.id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "car_makers.id"
        ],
        "question": "Group the records based on id of car makers",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",
        "original_question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "instance_id": 165
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) , car_makers.fullname , car_makers.id from model_list join car_makers on model_list.maker = car_makers.id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            "from",
            "model_list",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            "from",
            "model_list",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id"
        ],
        "question": "Get the number and fullname and id of model list that has car makers",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "fullname",
            "and",
            "id",
            "of",
            "model",
            "list",
            "that",
            "has",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "original_question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "instance_id": 166
    },
    {
        "db_id": "car_1",
        "query": "group by car_makers.id",
        "query_toks": [
            "group",
            "by",
            "car_makers.id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "car_makers.id"
        ],
        "question": "Group the records based on id of car makers",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
        "original_question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "instance_id": 167
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid",
        "query_toks": [
            "select",
            "cars_data.accelerate",
            "from",
            "cars_data",
            "join",
            "car_names",
            "on",
            "cars_data.id",
            "=",
            "car_names.makeid"
        ],
        "query_toks_no_value": [
            "select",
            "cars_data.accelerate",
            "from",
            "cars_data",
            "join",
            "car_names",
            "on",
            "cars_data.id",
            "=",
            "car_names.makeid"
        ],
        "question": "Get accelerate of cars data that has car names",
        "question_toks": [
            "Get",
            "accelerate",
            "of",
            "cars",
            "data",
            "that",
            "has",
            "car",
            "names"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "original_question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "instance_id": 168
    },
    {
        "db_id": "car_1",
        "query": "where car_names.make = \"amc hornet sportabout ( sw )\"",
        "query_toks": [
            "where",
            "car_names.make",
            "=",
            "\"amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")\""
        ],
        "query_toks_no_value": [
            "where",
            "car_names.make",
            "=",
            "\"amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")\""
        ],
        "question": "Keep the records that make of car names is \"amc hornet sportabout ( sw )\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "make",
            "of",
            "car",
            "names",
            "is",
            "\"amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"amc hornet sportabout (sw)\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "original_question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "instance_id": 169
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.accelerate from cars_data join car_names on cars_data.id = car_names.makeid",
        "query_toks": [
            "select",
            "cars_data.accelerate",
            "from",
            "cars_data",
            "join",
            "car_names",
            "on",
            "cars_data.id",
            "=",
            "car_names.makeid"
        ],
        "query_toks_no_value": [
            "select",
            "cars_data.accelerate",
            "from",
            "cars_data",
            "join",
            "car_names",
            "on",
            "cars_data.id",
            "=",
            "car_names.makeid"
        ],
        "question": "Get accelerate of cars data that has car names",
        "question_toks": [
            "Get",
            "accelerate",
            "of",
            "cars",
            "data",
            "that",
            "has",
            "car",
            "names"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "original_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "instance_id": 170
    },
    {
        "db_id": "car_1",
        "query": "where car_names.make = \"amc hornet sportabout ( sw )\"",
        "query_toks": [
            "where",
            "car_names.make",
            "=",
            "\"amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")\""
        ],
        "query_toks_no_value": [
            "where",
            "car_names.make",
            "=",
            "\"amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")\""
        ],
        "question": "Keep the records that make of car names is \"amc hornet sportabout ( sw )\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "make",
            "of",
            "car",
            "names",
            "is",
            "\"amc",
            "hornet",
            "sportabout",
            "(",
            "sw",
            ")\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"amc hornet sportabout (sw)\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
        "original_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "instance_id": 171
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "question": "Get the number of car makers that has countries",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "original_question": "How many car makers are there in france?",
        "instance_id": 172
    },
    {
        "db_id": "car_1",
        "query": "where countries.countryname = \"france\"",
        "query_toks": [
            "where",
            "countries.countryname",
            "=",
            "\"france\""
        ],
        "query_toks_no_value": [
            "where",
            "countries.countryname",
            "=",
            "\"france\""
        ],
        "question": "Keep the records that countryname of countries is \"france\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "countryname",
            "of",
            "countries",
            "is",
            "\"france\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"france\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "original_question": "How many car makers are there in france?",
        "instance_id": 173
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from car_makers join countries on car_makers.country = countries.countryid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "question": "Get the number of car makers that has countries",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "original_question": "What is the number of makers of care in France?",
        "instance_id": 174
    },
    {
        "db_id": "car_1",
        "query": "where countries.countryname = \"france\"",
        "query_toks": [
            "where",
            "countries.countryname",
            "=",
            "\"france\""
        ],
        "query_toks_no_value": [
            "where",
            "countries.countryname",
            "=",
            "\"france\""
        ],
        "question": "Keep the records that countryname of countries is \"france\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "countryname",
            "of",
            "countries",
            "is",
            "\"france\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"france\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
        "original_question": "What is the number of makers of care in France?",
        "instance_id": 175
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "question": "Get the number of model list that has car makers and countries",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "model",
            "list",
            "that",
            "has",
            "car",
            "makers",
            "and",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "original_question": "How many car models are produced in the usa?",
        "instance_id": 176
    },
    {
        "db_id": "car_1",
        "query": "where countries.countryname = \"usa\"",
        "query_toks": [
            "where",
            "countries.countryname",
            "=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "countries.countryname",
            "=",
            "\"usa\""
        ],
        "question": "Keep the records that countryname of countries is \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "countryname",
            "of",
            "countries",
            "is",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"usa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "original_question": "How many car models are produced in the usa?",
        "instance_id": 177
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from model_list join car_makers on model_list.maker = car_makers.id join countries on car_makers.country = countries.countryid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "model_list",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id",
            "join",
            "countries",
            "on",
            "car_makers.country",
            "=",
            "countries.countryid"
        ],
        "question": "Get the number of model list that has car makers and countries",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "model",
            "list",
            "that",
            "has",
            "car",
            "makers",
            "and",
            "countries"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "original_question": "What is the count of the car models produced in the United States?",
        "instance_id": 178
    },
    {
        "db_id": "car_1",
        "query": "where countries.countryname = \"usa\"",
        "query_toks": [
            "where",
            "countries.countryname",
            "=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "countries.countryname",
            "=",
            "\"usa\""
        ],
        "question": "Keep the records that countryname of countries is \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "countryname",
            "of",
            "countries",
            "is",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"usa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
        "original_question": "What is the count of the car models produced in the United States?",
        "instance_id": 179
    },
    {
        "db_id": "car_1",
        "query": "select avg ( mpg ) from cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the average value of mpg of cars data",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "mpg",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "original_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "instance_id": 180
    },
    {
        "db_id": "car_1",
        "query": "where cylinders = 4",
        "query_toks": [
            "where",
            "cylinders",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            "=",
            "value"
        ],
        "question": "Keep the records that cylinders is 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "original_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "instance_id": 181
    },
    {
        "db_id": "car_1",
        "query": "select avg ( mpg ) from cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the average value of mpg of cars data",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "mpg",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "original_question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "instance_id": 182
    },
    {
        "db_id": "car_1",
        "query": "where cylinders = 4",
        "query_toks": [
            "where",
            "cylinders",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            "=",
            "value"
        ],
        "question": "Keep the records that cylinders is 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;",
        "original_question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "instance_id": 183
    },
    {
        "db_id": "car_1",
        "query": "select min ( weight ) from cars_data",
        "query_toks": [
            "select",
            "min",
            "(",
            "weight",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "weight",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the minimum value of weight of cars data",
        "question_toks": [
            "Get",
            "the",
            "minimum",
            "value",
            "of",
            "weight",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "original_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "instance_id": 184
    },
    {
        "db_id": "car_1",
        "query": "where cylinders = 8 and year = 1974",
        "query_toks": [
            "where",
            "cylinders",
            "=",
            "8",
            "and",
            "year",
            "=",
            "1974"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            "=",
            "value",
            "and",
            "year",
            "=",
            "value"
        ],
        "question": "Keep the records that cylinders is 8 and year is 1974",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "8",
            "and",
            "year",
            "is",
            "1974"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    8.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1974.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "original_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "instance_id": 185
    },
    {
        "db_id": "car_1",
        "query": "select min ( weight ) from cars_data",
        "query_toks": [
            "select",
            "min",
            "(",
            "weight",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "weight",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the minimum value of weight of cars data",
        "question_toks": [
            "Get",
            "the",
            "minimum",
            "value",
            "of",
            "weight",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "original_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "instance_id": 186
    },
    {
        "db_id": "car_1",
        "query": "where cylinders = 8 and year = 1974",
        "query_toks": [
            "where",
            "cylinders",
            "=",
            "8",
            "and",
            "year",
            "=",
            "1974"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            "=",
            "value",
            "and",
            "year",
            "=",
            "value"
        ],
        "question": "Keep the records that cylinders is 8 and year is 1974",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "8",
            "and",
            "year",
            "is",
            "1974"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    8.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1974.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974",
        "original_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "instance_id": 187
    },
    {
        "db_id": "car_1",
        "query": "select maker , model from model_list",
        "query_toks": [
            "select",
            "maker",
            ",",
            "model",
            "from",
            "model_list"
        ],
        "query_toks_no_value": [
            "select",
            "maker",
            ",",
            "model",
            "from",
            "model_list"
        ],
        "question": "Get maker and model of model list",
        "question_toks": [
            "Get",
            "maker",
            "and",
            "model",
            "of",
            "model",
            "list"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "original_question": "What are all the makers and models?",
        "instance_id": 188
    },
    {
        "db_id": "car_1",
        "query": "select maker , model from model_list",
        "query_toks": [
            "select",
            "maker",
            ",",
            "model",
            "from",
            "model_list"
        ],
        "query_toks_no_value": [
            "select",
            "maker",
            ",",
            "model",
            "from",
            "model_list"
        ],
        "question": "Get maker and model of model list",
        "question_toks": [
            "Get",
            "maker",
            "and",
            "model",
            "of",
            "model",
            "list"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Maker ,  Model FROM MODEL_LIST;",
        "original_question": "What are the makers and models?",
        "instance_id": 189
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country",
        "query_toks": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryid",
            "from",
            "countries",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryid",
            "from",
            "countries",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "question": "Get countryname and countryid of countries that has car makers",
        "question_toks": [
            "Get",
            "countryname",
            "and",
            "countryid",
            "of",
            "countries",
            "that",
            "has",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "original_question": "What are the countries having at least one car maker? List name and id.",
        "instance_id": 190
    },
    {
        "db_id": "car_1",
        "query": "group by countries.countryid having count ( * ) <= 1",
        "query_toks": [
            "group",
            "by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on countryid of countries that the number is less than or equal to 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countryid",
            "of",
            "countries",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "original_question": "What are the countries having at least one car maker? List name and id.",
        "instance_id": 191
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname , countries.countryid from countries join car_makers on countries.countryid = car_makers.country",
        "query_toks": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryid",
            "from",
            "countries",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "select",
            "countries.countryname",
            ",",
            "countries.countryid",
            "from",
            "countries",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "question": "Get countryname and countryid of countries that has car makers",
        "question_toks": [
            "Get",
            "countryname",
            "and",
            "countryid",
            "of",
            "countries",
            "that",
            "has",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "original_question": "What are the names and ids of all countries with at least one car maker?",
        "instance_id": 192
    },
    {
        "db_id": "car_1",
        "query": "group by countries.countryid having count ( * ) <= 1",
        "query_toks": [
            "group",
            "by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on countryid of countries that the number is less than or equal to 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countryid",
            "of",
            "countries",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
        "original_question": "What are the names and ids of all countries with at least one car maker?",
        "instance_id": 193
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the number of cars data",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "original_question": "What is the number of the cars with horsepower more than 150?",
        "instance_id": 194
    },
    {
        "db_id": "car_1",
        "query": "where horsepower > 150",
        "query_toks": [
            "where",
            "horsepower",
            ">",
            "150"
        ],
        "query_toks_no_value": [
            "where",
            "horsepower",
            ">",
            "value"
        ],
        "question": "Keep the records that horsepower is greater than 150",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "horsepower",
            "is",
            "greater",
            "than",
            "150"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    150.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "original_question": "What is the number of the cars with horsepower more than 150?",
        "instance_id": 195
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the number of cars data",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "original_question": "What is the number of cars with a horsepower greater than 150?",
        "instance_id": 196
    },
    {
        "db_id": "car_1",
        "query": "where horsepower > 150",
        "query_toks": [
            "where",
            "horsepower",
            ">",
            "150"
        ],
        "query_toks_no_value": [
            "where",
            "horsepower",
            ">",
            "value"
        ],
        "question": "Keep the records that horsepower is greater than 150",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "horsepower",
            "is",
            "greater",
            "than",
            "150"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    150.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;",
        "original_question": "What is the number of cars with a horsepower greater than 150?",
        "instance_id": 197
    },
    {
        "db_id": "car_1",
        "query": "select avg ( weight ) , year from cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data"
        ],
        "question": "Get the average value of weight and year of cars data",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "weight",
            "and",
            "year",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "original_question": "What is the average weight of cars each year?",
        "instance_id": 198
    },
    {
        "db_id": "car_1",
        "query": "group by year",
        "query_toks": [
            "group",
            "by",
            "year"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "year"
        ],
        "question": "Group the records based on year",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "year"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "original_question": "What is the average weight of cars each year?",
        "instance_id": 199
    },
    {
        "db_id": "car_1",
        "query": "select avg ( weight ) , year from cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data"
        ],
        "question": "Get the average value of weight and year of cars data",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "weight",
            "and",
            "year",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "original_question": "What is the average weight and year for each year?",
        "instance_id": 200
    },
    {
        "db_id": "car_1",
        "query": "group by year",
        "query_toks": [
            "group",
            "by",
            "year"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "year"
        ],
        "question": "Group the records based on year",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "year"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",
        "original_question": "What is the average weight and year for each year?",
        "instance_id": 201
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country",
        "query_toks": [
            "select",
            "countries.countryname",
            "from",
            "countries",
            "join",
            "continents",
            "on",
            "countries.continent",
            "=",
            "continents.contid",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "select",
            "countries.countryname",
            "from",
            "countries",
            "join",
            "continents",
            "on",
            "countries.continent",
            "=",
            "continents.contid",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "question": "Get countryname of countries that has continents and car makers",
        "question_toks": [
            "Get",
            "countryname",
            "of",
            "countries",
            "that",
            "has",
            "continents",
            "and",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_question": "Which countries in europe have at least 3 car manufacturers?",
        "instance_id": 202
    },
    {
        "db_id": "car_1",
        "query": "where continents.continent = \"europe\" ",
        "query_toks": [
            "where",
            "continents.continent",
            "=",
            "\"europe\""
        ],
        "query_toks_no_value": [
            "where",
            "continents.continent",
            "=",
            "\"europe\""
        ],
        "question": "Keep the records that continent of continents is \"europe\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "of",
            "continents",
            "is",
            "\"europe\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"europe\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_question": "Which countries in europe have at least 3 car manufacturers?",
        "instance_id": 203
    },
    {
        "db_id": "car_1",
        "query": "group by countries.countryname having count ( * ) <= 3",
        "query_toks": [
            "group",
            "by",
            "countries.countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "3"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countries.countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on countryname of countries that the number is less than or equal to 3",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countryname",
            "of",
            "countries",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_question": "Which countries in europe have at least 3 car manufacturers?",
        "instance_id": 204
    },
    {
        "db_id": "car_1",
        "query": "select countries.countryname from countries join continents on countries.continent = continents.contid join car_makers on countries.countryid = car_makers.country",
        "query_toks": [
            "select",
            "countries.countryname",
            "from",
            "countries",
            "join",
            "continents",
            "on",
            "countries.continent",
            "=",
            "continents.contid",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "select",
            "countries.countryname",
            "from",
            "countries",
            "join",
            "continents",
            "on",
            "countries.continent",
            "=",
            "continents.contid",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "question": "Get countryname of countries that has continents and car makers",
        "question_toks": [
            "Get",
            "countryname",
            "of",
            "countries",
            "that",
            "has",
            "continents",
            "and",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_question": "What are the names of all European countries with at least 3 manufacturers?",
        "instance_id": 205
    },
    {
        "db_id": "car_1",
        "query": "where continents.continent = \"europe\" ",
        "query_toks": [
            "where",
            "continents.continent",
            "=",
            "\"europe\""
        ],
        "query_toks_no_value": [
            "where",
            "continents.continent",
            "=",
            "\"europe\""
        ],
        "question": "Keep the records that continent of continents is \"europe\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "of",
            "continents",
            "is",
            "\"europe\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"europe\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_question": "What are the names of all European countries with at least 3 manufacturers?",
        "instance_id": 206
    },
    {
        "db_id": "car_1",
        "query": "group by countries.countryname having count ( * ) <= 3",
        "query_toks": [
            "group",
            "by",
            "countries.countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "3"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countries.countryname",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on countryname of countries that the number is less than or equal to 3",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countryname",
            "of",
            "countries",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
        "original_question": "What are the names of all European countries with at least 3 manufacturers?",
        "instance_id": 207
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "cars_data.horsepower",
            ",",
            "car_names.make",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "cars_data.horsepower",
            ",",
            "car_names.make",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get horsepower and make of car names that has cars data",
        "question_toks": [
            "Get",
            "horsepower",
            "and",
            "make",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "instance_id": 208
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.cylinders = 3 ",
        "query_toks": [
            "where",
            "cars_data.cylinders",
            "=",
            "3"
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.cylinders",
            "=",
            "value"
        ],
        "question": "Keep the records that cylinders of cars data is 3",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "of",
            "cars",
            "data",
            "is",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "instance_id": 209
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.horsepower desc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.horsepower",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.horsepower",
            "desc"
        ],
        "question": "Order these records based on horsepower of cars data and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "horsepower",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "instance_id": 210
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower , car_names.make from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "cars_data.horsepower",
            ",",
            "car_names.make",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "cars_data.horsepower",
            ",",
            "car_names.make",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get horsepower and make of car names that has cars data",
        "question_toks": [
            "Get",
            "horsepower",
            "and",
            "make",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "instance_id": 211
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.cylinders = 3 ",
        "query_toks": [
            "where",
            "cars_data.cylinders",
            "=",
            "3"
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.cylinders",
            "=",
            "value"
        ],
        "question": "Keep the records that cylinders of cars data is 3",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "of",
            "cars",
            "data",
            "is",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "instance_id": 212
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.horsepower desc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.horsepower",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.horsepower",
            "desc"
        ],
        "question": "Order these records based on horsepower of cars data and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "horsepower",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "instance_id": 213
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get model of car names that has cars data",
        "question_toks": [
            "Get",
            "model",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "original_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "instance_id": 214
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.mpg desc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.mpg",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.mpg",
            "desc"
        ],
        "question": "Order these records based on mpg of cars data and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "mpg",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
        "original_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "instance_id": 215
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get model of car names that has cars data",
        "question_toks": [
            "Get",
            "model",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "original_question": "What is the car model with the highest mpg ?",
        "instance_id": 216
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.mpg desc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.mpg",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.mpg",
            "desc"
        ],
        "question": "Order these records based on mpg of cars data and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "mpg",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;",
        "original_question": "What is the car model with the highest mpg ?",
        "instance_id": 217
    },
    {
        "db_id": "car_1",
        "query": "select avg ( horsepower ) from cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the average value of horsepower of cars data",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "horsepower",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "original_question": "What is the average horsepower of the cars before 1980?",
        "instance_id": 218
    },
    {
        "db_id": "car_1",
        "query": "where year < 1980",
        "query_toks": [
            "where",
            "year",
            "<",
            "1980"
        ],
        "query_toks_no_value": [
            "where",
            "year",
            "<",
            "value"
        ],
        "question": "Keep the records that year is less than 1980",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "is",
            "less",
            "than",
            "1980"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;",
        "original_question": "What is the average horsepower of the cars before 1980?",
        "instance_id": 219
    },
    {
        "db_id": "car_1",
        "query": "select avg ( horsepower ) from cars_data",
        "query_toks": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "horsepower",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the average value of horsepower of cars data",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "horsepower",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select avg(horsepower) from cars_data where year  <  1980;",
        "original_question": "What is the average horsepower for all cars produced before 1980 ?",
        "instance_id": 220
    },
    {
        "db_id": "car_1",
        "query": "where year < 1980",
        "query_toks": [
            "where",
            "year",
            "<",
            "1980"
        ],
        "query_toks_no_value": [
            "where",
            "year",
            "<",
            "value"
        ],
        "question": "Keep the records that year is less than 1980",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "is",
            "less",
            "than",
            "1980"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select avg(horsepower) from cars_data where year  <  1980;",
        "original_question": "What is the average horsepower for all cars produced before 1980 ?",
        "instance_id": 221
    },
    {
        "db_id": "car_1",
        "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "avg",
            "(",
            "cars_data.edispl",
            ")",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "cars_data.edispl",
            ")",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get the average value of edispl of car names that has cars data",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "edispl",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "original_question": "What is the average edispl of the cars of model volvo?",
        "instance_id": 222
    },
    {
        "db_id": "car_1",
        "query": "where car_names.model = \"volvo\"",
        "query_toks": [
            "where",
            "car_names.model",
            "=",
            "\"volvo\""
        ],
        "query_toks_no_value": [
            "where",
            "car_names.model",
            "=",
            "\"volvo\""
        ],
        "question": "Keep the records that model of car names is \"volvo\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "model",
            "of",
            "car",
            "names",
            "is",
            "\"volvo\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"volvo\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "original_question": "What is the average edispl of the cars of model volvo?",
        "instance_id": 223
    },
    {
        "db_id": "car_1",
        "query": "select avg ( cars_data.edispl ) from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "avg",
            "(",
            "cars_data.edispl",
            ")",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "cars_data.edispl",
            ")",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get the average value of edispl of car names that has cars data",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "edispl",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "original_question": "What is the average edispl for all volvos?",
        "instance_id": 224
    },
    {
        "db_id": "car_1",
        "query": "where car_names.model = \"volvo\"",
        "query_toks": [
            "where",
            "car_names.model",
            "=",
            "\"volvo\""
        ],
        "query_toks_no_value": [
            "where",
            "car_names.model",
            "=",
            "\"volvo\""
        ],
        "question": "Keep the records that model of car names is \"volvo\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "model",
            "of",
            "car",
            "names",
            "is",
            "\"volvo\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"volvo\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';",
        "original_question": "What is the average edispl for all volvos?",
        "instance_id": 225
    },
    {
        "db_id": "car_1",
        "query": "select max ( accelerate ) , cylinders from cars_data",
        "query_toks": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data"
        ],
        "question": "Get the maximum value of accelerate and cylinders of cars data",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "accelerate",
            "and",
            "cylinders",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "original_question": "What is the maximum accelerate for different number of cylinders?",
        "instance_id": 226
    },
    {
        "db_id": "car_1",
        "query": "group by cylinders",
        "query_toks": [
            "group",
            "by",
            "cylinders"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "cylinders"
        ],
        "question": "Group the records based on cylinders",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "cylinders"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "original_question": "What is the maximum accelerate for different number of cylinders?",
        "instance_id": 227
    },
    {
        "db_id": "car_1",
        "query": "select max ( accelerate ) , cylinders from cars_data",
        "query_toks": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data"
        ],
        "question": "Get the maximum value of accelerate and cylinders of cars data",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "accelerate",
            "and",
            "cylinders",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "original_question": "What is the maximum accelerate for all the different cylinders?",
        "instance_id": 228
    },
    {
        "db_id": "car_1",
        "query": "group by cylinders",
        "query_toks": [
            "group",
            "by",
            "cylinders"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "cylinders"
        ],
        "question": "Group the records based on cylinders",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "cylinders"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",
        "original_question": "What is the maximum accelerate for all the different cylinders?",
        "instance_id": 229
    },
    {
        "db_id": "car_1",
        "query": "select model from car_names",
        "query_toks": [
            "select",
            "model",
            "from",
            "car_names"
        ],
        "query_toks_no_value": [
            "select",
            "model",
            "from",
            "car_names"
        ],
        "question": "Get model of car names",
        "question_toks": [
            "Get",
            "model",
            "of",
            "car",
            "names"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "Which model has the most version(make) of cars?",
        "instance_id": 230
    },
    {
        "db_id": "car_1",
        "query": "group by model",
        "query_toks": [
            "group",
            "by",
            "model"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "model"
        ],
        "question": "Group the records based on model",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "model"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "Which model has the most version(make) of cars?",
        "instance_id": 231
    },
    {
        "db_id": "car_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "Which model has the most version(make) of cars?",
        "instance_id": 232
    },
    {
        "db_id": "car_1",
        "query": "select model from car_names",
        "query_toks": [
            "select",
            "model",
            "from",
            "car_names"
        ],
        "query_toks_no_value": [
            "select",
            "model",
            "from",
            "car_names"
        ],
        "question": "Get model of car names",
        "question_toks": [
            "Get",
            "model",
            "of",
            "car",
            "names"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "What model has the most different versions?",
        "instance_id": 233
    },
    {
        "db_id": "car_1",
        "query": "group by model",
        "query_toks": [
            "group",
            "by",
            "model"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "model"
        ],
        "question": "Group the records based on model",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "model"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    14,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "What model has the most different versions?",
        "instance_id": 234
    },
    {
        "db_id": "car_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "What model has the most different versions?",
        "instance_id": 235
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the number of cars data",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "original_question": "How many cars have more than 4 cylinders?",
        "instance_id": 236
    },
    {
        "db_id": "car_1",
        "query": "where cylinders > 4",
        "query_toks": [
            "where",
            "cylinders",
            ">",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            ">",
            "value"
        ],
        "question": "Keep the records that cylinders is greater than 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "greater",
            "than",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "original_question": "How many cars have more than 4 cylinders?",
        "instance_id": 237
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the number of cars data",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "original_question": "What is the number of cars with more than 4 cylinders?",
        "instance_id": 238
    },
    {
        "db_id": "car_1",
        "query": "where cylinders > 4",
        "query_toks": [
            "where",
            "cylinders",
            ">",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            ">",
            "value"
        ],
        "question": "Keep the records that cylinders is greater than 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "greater",
            "than",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;",
        "original_question": "What is the number of cars with more than 4 cylinders?",
        "instance_id": 239
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the number of cars data",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "original_question": "how many cars were produced in 1980?",
        "instance_id": 240
    },
    {
        "db_id": "car_1",
        "query": "where year = 1980",
        "query_toks": [
            "where",
            "year",
            "=",
            "1980"
        ],
        "query_toks_no_value": [
            "where",
            "year",
            "=",
            "value"
        ],
        "question": "Keep the records that year is 1980",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "is",
            "1980"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "original_question": "how many cars were produced in 1980?",
        "instance_id": 241
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the number of cars data",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "original_question": "In 1980, how many cars were made?",
        "instance_id": 242
    },
    {
        "db_id": "car_1",
        "query": "where year = 1980",
        "query_toks": [
            "where",
            "year",
            "=",
            "1980"
        ],
        "query_toks_no_value": [
            "where",
            "year",
            "=",
            "value"
        ],
        "question": "Keep the records that year is 1980",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "is",
            "1980"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;",
        "original_question": "In 1980, how many cars were made?",
        "instance_id": 243
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "question": "Get the number of car makers that has model list",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "model",
            "list"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "original_question": "How many car models were produced by the maker with full name American Motor Company?",
        "instance_id": 244
    },
    {
        "db_id": "car_1",
        "query": "where car_makers.fullname = \"american motor company\"",
        "query_toks": [
            "where",
            "car_makers.fullname",
            "=",
            "\"american",
            "motor",
            "company\""
        ],
        "query_toks_no_value": [
            "where",
            "car_makers.fullname",
            "=",
            "\"american",
            "motor",
            "company\""
        ],
        "question": "Keep the records that fullname of car makers is \"american motor company\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "fullname",
            "of",
            "car",
            "makers",
            "is",
            "\"american",
            "motor",
            "company\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"American Motor Company\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "original_question": "How many car models were produced by the maker with full name American Motor Company?",
        "instance_id": 245
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from car_makers join model_list on car_makers.id = model_list.maker",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "question": "Get the number of car makers that has model list",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "model",
            "list"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "original_question": "What is the number of car models created by the car maker American Motor Company?",
        "instance_id": 246
    },
    {
        "db_id": "car_1",
        "query": "where car_makers.fullname = \"american motor company\"",
        "query_toks": [
            "where",
            "car_makers.fullname",
            "=",
            "\"american",
            "motor",
            "company\""
        ],
        "query_toks_no_value": [
            "where",
            "car_makers.fullname",
            "=",
            "\"american",
            "motor",
            "company\""
        ],
        "question": "Keep the records that fullname of car makers is \"american motor company\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "fullname",
            "of",
            "car",
            "makers",
            "is",
            "\"american",
            "motor",
            "company\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"American Motor Company\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
        "original_question": "What is the number of car models created by the car maker American Motor Company?",
        "instance_id": 247
    },
    {
        "db_id": "car_1",
        "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker",
        "query_toks": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "query_toks_no_value": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "question": "Get fullname and id of car makers that has model list",
        "question_toks": [
            "Get",
            "fullname",
            "and",
            "id",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "model",
            "list"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_question": "Which makers designed more than 3 car models? List full name and the id.",
        "instance_id": 248
    },
    {
        "db_id": "car_1",
        "query": "group by car_makers.id having count ( * ) > 3",
        "query_toks": [
            "group",
            "by",
            "car_makers.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "car_makers.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on id of car makers that the number is greater than 3",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "car",
            "makers",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_question": "Which makers designed more than 3 car models? List full name and the id.",
        "instance_id": 249
    },
    {
        "db_id": "car_1",
        "query": "select car_makers.fullname , car_makers.id from car_makers join model_list on car_makers.id = model_list.maker",
        "query_toks": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "query_toks_no_value": [
            "select",
            "car_makers.fullname",
            ",",
            "car_makers.id",
            "from",
            "car_makers",
            "join",
            "model_list",
            "on",
            "car_makers.id",
            "=",
            "model_list.maker"
        ],
        "question": "Get fullname and id of car makers that has model list",
        "question_toks": [
            "Get",
            "fullname",
            "and",
            "id",
            "of",
            "car",
            "makers",
            "that",
            "has",
            "model",
            "list"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_question": "What are the names and ids of all makers with more than 3 models?",
        "instance_id": 250
    },
    {
        "db_id": "car_1",
        "query": "group by car_makers.id having count ( * ) > 3",
        "query_toks": [
            "group",
            "by",
            "car_makers.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "3"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "car_makers.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on id of car makers that the number is greater than 3",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "car",
            "makers",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
        "original_question": "What are the names and ids of all makers with more than 3 models?",
        "instance_id": 251
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "car_names",
            "join",
            "model_list",
            "on",
            "car_names.model",
            "=",
            "model_list.model",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "car_names",
            "join",
            "model_list",
            "on",
            "car_names.model",
            "=",
            "model_list.model",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get distinct and model of car names that has model list and car makers and cars data",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "model",
            "of",
            "car",
            "names",
            "that",
            "has",
            "model",
            "list",
            "and",
            "car",
            "makers",
            "and",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "instance_id": 252
    },
    {
        "db_id": "car_1",
        "query": "where car_makers.fullname = \"general motors\" or cars_data.weight > 3500",
        "query_toks": [
            "where",
            "car_makers.fullname",
            "=",
            "\"general",
            "motors\"",
            "or",
            "cars_data.weight",
            ">",
            "3500"
        ],
        "query_toks_no_value": [
            "where",
            "car_makers.fullname",
            "=",
            "\"general",
            "motors\"",
            "or",
            "cars_data.weight",
            ">",
            "3500"
        ],
        "question": "Keep the records that fullname of car makers is \"general motors\" or weight of cars data is greater than 3500",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "fullname",
            "of",
            "car",
            "makers",
            "is",
            "\"general",
            "motors\"",
            "or",
            "weight",
            "of",
            "cars",
            "data",
            "is",
            "greater",
            "than",
            "3500"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"General Motors\"",
                    null
                ],
                "or",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3500.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "instance_id": 253
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from car_names join model_list on car_names.model = model_list.model join car_makers on model_list.maker = car_makers.id join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "car_names",
            "join",
            "model_list",
            "on",
            "car_names.model",
            "=",
            "model_list.model",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "car_names",
            "join",
            "model_list",
            "on",
            "car_names.model",
            "=",
            "model_list.model",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get distinct and model of car names that has model list and car makers and cars data",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "model",
            "of",
            "car",
            "names",
            "that",
            "has",
            "model",
            "list",
            "and",
            "car",
            "makers",
            "and",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "instance_id": 254
    },
    {
        "db_id": "car_1",
        "query": "where car_makers.fullname = \"general motors\" or cars_data.weight > 3500",
        "query_toks": [
            "where",
            "car_makers.fullname",
            "=",
            "\"general",
            "motors\"",
            "or",
            "cars_data.weight",
            ">",
            "3500"
        ],
        "query_toks_no_value": [
            "where",
            "car_makers.fullname",
            "=",
            "\"general",
            "motors\"",
            "or",
            "cars_data.weight",
            ">",
            "3500"
        ],
        "question": "Keep the records that fullname of car makers is \"general motors\" or weight of cars data is greater than 3500",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "fullname",
            "of",
            "car",
            "makers",
            "is",
            "\"general",
            "motors\"",
            "or",
            "weight",
            "of",
            "cars",
            "data",
            "is",
            "greater",
            "than",
            "3500"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"General Motors\"",
                    null
                ],
                "or",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3500.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
        "original_question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "instance_id": 255
    },
    {
        "db_id": "car_1",
        "query": "select distinct year from cars_data",
        "query_toks": [
            "select",
            "distinct",
            "year",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "year",
            "from",
            "cars_data"
        ],
        "question": "Get distinct and year of cars data",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "year",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "original_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "instance_id": 256
    },
    {
        "db_id": "car_1",
        "query": "where weight between 3000 and 4000",
        "query_toks": [
            "where",
            "weight",
            "between",
            "3000",
            "and",
            "4000"
        ],
        "query_toks_no_value": [
            "where",
            "weight",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Keep the records that weight is between 3000 and 4000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "weight",
            "is",
            "between",
            "3000",
            "and",
            "4000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    4000.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "original_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "instance_id": 257
    },
    {
        "db_id": "car_1",
        "query": "select distinct year from cars_data",
        "query_toks": [
            "select",
            "distinct",
            "year",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "year",
            "from",
            "cars_data"
        ],
        "question": "Get distinct and year of cars data",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "year",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "original_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "instance_id": 258
    },
    {
        "db_id": "car_1",
        "query": "where weight between 3000 and 4000",
        "query_toks": [
            "where",
            "weight",
            "between",
            "3000",
            "and",
            "4000"
        ],
        "query_toks_no_value": [
            "where",
            "weight",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Keep the records that weight is between 3000 and 4000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "weight",
            "is",
            "between",
            "3000",
            "and",
            "4000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    4000.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select distinct year from cars_data where weight between 3000 and 4000;",
        "original_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "instance_id": 259
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data",
        "query_toks": [
            "select",
            "cars_data.horsepower",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "cars_data.horsepower",
            "from",
            "cars_data"
        ],
        "question": "Get horsepower of cars data",
        "question_toks": [
            "Get",
            "horsepower",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "original_question": "What is the horsepower of the car with the largest accelerate?",
        "instance_id": 260
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.accelerate desc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.accelerate",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.accelerate",
            "desc"
        ],
        "question": "Order these records based on accelerate of cars data and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "accelerate",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "original_question": "What is the horsepower of the car with the largest accelerate?",
        "instance_id": 261
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.horsepower from cars_data",
        "query_toks": [
            "select",
            "cars_data.horsepower",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "cars_data.horsepower",
            "from",
            "cars_data"
        ],
        "question": "Get horsepower of cars data",
        "question_toks": [
            "Get",
            "horsepower",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "original_question": "What is the horsepower of the car with the greatest accelerate?",
        "instance_id": 262
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.accelerate desc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.accelerate",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.accelerate",
            "desc"
        ],
        "question": "Order these records based on accelerate of cars data and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "accelerate",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
        "original_question": "What is the horsepower of the car with the greatest accelerate?",
        "instance_id": 263
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid",
        "query_toks": [
            "select",
            "cars_data.cylinders",
            "from",
            "cars_data",
            "join",
            "car_names",
            "on",
            "cars_data.id",
            "=",
            "car_names.makeid"
        ],
        "query_toks_no_value": [
            "select",
            "cars_data.cylinders",
            "from",
            "cars_data",
            "join",
            "car_names",
            "on",
            "cars_data.id",
            "=",
            "car_names.makeid"
        ],
        "question": "Get cylinders of cars data that has car names",
        "question_toks": [
            "Get",
            "cylinders",
            "of",
            "cars",
            "data",
            "that",
            "has",
            "car",
            "names"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "instance_id": 264
    },
    {
        "db_id": "car_1",
        "query": "where car_names.model = \"volvo\" ",
        "query_toks": [
            "where",
            "car_names.model",
            "=",
            "\"volvo\""
        ],
        "query_toks_no_value": [
            "where",
            "car_names.model",
            "=",
            "\"volvo\""
        ],
        "question": "Keep the records that model of car names is \"volvo\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "model",
            "of",
            "car",
            "names",
            "is",
            "\"volvo\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"volvo\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "instance_id": 265
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.accelerate asc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.accelerate",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.accelerate",
            "asc"
        ],
        "question": "Order these records based on accelerate of cars data and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "accelerate",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "instance_id": 266
    },
    {
        "db_id": "car_1",
        "query": "select cars_data.cylinders from cars_data join car_names on cars_data.id = car_names.makeid",
        "query_toks": [
            "select",
            "cars_data.cylinders",
            "from",
            "cars_data",
            "join",
            "car_names",
            "on",
            "cars_data.id",
            "=",
            "car_names.makeid"
        ],
        "query_toks_no_value": [
            "select",
            "cars_data.cylinders",
            "from",
            "cars_data",
            "join",
            "car_names",
            "on",
            "cars_data.id",
            "=",
            "car_names.makeid"
        ],
        "question": "Get cylinders of cars data that has car names",
        "question_toks": [
            "Get",
            "cylinders",
            "of",
            "cars",
            "data",
            "that",
            "has",
            "car",
            "names"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "instance_id": 267
    },
    {
        "db_id": "car_1",
        "query": "where car_names.model = \"volvo\" ",
        "query_toks": [
            "where",
            "car_names.model",
            "=",
            "\"volvo\""
        ],
        "query_toks_no_value": [
            "where",
            "car_names.model",
            "=",
            "\"volvo\""
        ],
        "question": "Keep the records that model of car names is \"volvo\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "model",
            "of",
            "car",
            "names",
            "is",
            "\"volvo\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"volvo\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "instance_id": 268
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.accelerate asc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.accelerate",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.accelerate",
            "asc"
        ],
        "question": "Order these records based on accelerate of cars data and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "accelerate",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
        "original_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "instance_id": 269
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "question": "Get the number of countries that has car makers",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "countries",
            "that",
            "has",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "original_question": "How many countries has more than 2 car makers ?",
        "instance_id": 270
    },
    {
        "db_id": "car_1",
        "query": "group by countries.countryid having count ( * ) > 2",
        "query_toks": [
            "group",
            "by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on countryid of countries that the number is greater than 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countryid",
            "of",
            "countries",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "original_question": "How many countries has more than 2 car makers ?",
        "instance_id": 271
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from countries join car_makers on countries.countryid = car_makers.country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "countries",
            "join",
            "car_makers",
            "on",
            "countries.countryid",
            "=",
            "car_makers.country"
        ],
        "question": "Get the number of countries that has car makers",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "countries",
            "that",
            "has",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "original_question": "What is the number of countries with more than 2 car makers ?",
        "instance_id": 272
    },
    {
        "db_id": "car_1",
        "query": "group by countries.countryid having count ( * ) > 2",
        "query_toks": [
            "group",
            "by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countries.countryid",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on countryid of countries that the number is greater than 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countryid",
            "of",
            "countries",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2",
        "original_question": "What is the number of countries with more than 2 car makers ?",
        "instance_id": 273
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the number of cars data",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "original_question": "How many cars has over 6 cylinders?",
        "instance_id": 274
    },
    {
        "db_id": "car_1",
        "query": "where cylinders > 6",
        "query_toks": [
            "where",
            "cylinders",
            ">",
            "6"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            ">",
            "value"
        ],
        "question": "Keep the records that cylinders is greater than 6",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "greater",
            "than",
            "6"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    6.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "original_question": "How many cars has over 6 cylinders?",
        "instance_id": 275
    },
    {
        "db_id": "car_1",
        "query": "select count ( * ) from cars_data",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the number of cars data",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "original_question": "What is the number of carsw ith over 6 cylinders?",
        "instance_id": 276
    },
    {
        "db_id": "car_1",
        "query": "where cylinders > 6",
        "query_toks": [
            "where",
            "cylinders",
            ">",
            "6"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            ">",
            "value"
        ],
        "question": "Keep the records that cylinders is greater than 6",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "greater",
            "than",
            "6"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    6.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;",
        "original_question": "What is the number of carsw ith over 6 cylinders?",
        "instance_id": 277
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get model of car names that has cars data",
        "question_toks": [
            "Get",
            "model",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "instance_id": 278
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.cylinders = 4 ",
        "query_toks": [
            "where",
            "cars_data.cylinders",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.cylinders",
            "=",
            "value"
        ],
        "question": "Keep the records that cylinders of cars data is 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "of",
            "cars",
            "data",
            "is",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "instance_id": 279
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.horsepower desc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.horsepower",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.horsepower",
            "desc"
        ],
        "question": "Order these records based on horsepower of cars data and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "horsepower",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "instance_id": 280
    },
    {
        "db_id": "car_1",
        "query": "select car_names.model from car_names join cars_data on car_names.makeid = cars_data.id",
        "query_toks": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "query_toks_no_value": [
            "select",
            "car_names.model",
            "from",
            "car_names",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id"
        ],
        "question": "Get model of car names that has cars data",
        "question_toks": [
            "Get",
            "model",
            "of",
            "car",
            "names",
            "that",
            "has",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "instance_id": 281
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.cylinders = 4 ",
        "query_toks": [
            "where",
            "cars_data.cylinders",
            "=",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.cylinders",
            "=",
            "value"
        ],
        "question": "Keep the records that cylinders of cars data is 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "of",
            "cars",
            "data",
            "is",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "instance_id": 282
    },
    {
        "db_id": "car_1",
        "query": "order by cars_data.horsepower desc ",
        "query_toks": [
            "order",
            "by",
            "cars_data.horsepower",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "cars_data.horsepower",
            "desc"
        ],
        "question": "Order these records based on horsepower of cars data and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "horsepower",
            "of",
            "cars",
            "data",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;",
        "original_question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "instance_id": 283
    },
    {
        "db_id": "car_1",
        "query": "select max ( mpg ) from cars_data",
        "query_toks": [
            "select",
            "max",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the maximum value of mpg of cars data",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "mpg",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "original_question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "instance_id": 284
    },
    {
        "db_id": "car_1",
        "query": "where cylinders = 8 or year < 1980",
        "query_toks": [
            "where",
            "cylinders",
            "=",
            "8",
            "or",
            "year",
            "<",
            "1980"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            "=",
            "value",
            "or",
            "year",
            "<",
            "value"
        ],
        "question": "Keep the records that cylinders is 8 or year is less than 1980",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "8",
            "or",
            "year",
            "is",
            "less",
            "than",
            "1980"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    8.0,
                    null
                ],
                "or",
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "original_question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "instance_id": 285
    },
    {
        "db_id": "car_1",
        "query": "select max ( mpg ) from cars_data",
        "query_toks": [
            "select",
            "max",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "mpg",
            ")",
            "from",
            "cars_data"
        ],
        "question": "Get the maximum value of mpg of cars data",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "mpg",
            "of",
            "cars",
            "data"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "original_question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "instance_id": 286
    },
    {
        "db_id": "car_1",
        "query": "where cylinders = 8 or year < 1980",
        "query_toks": [
            "where",
            "cylinders",
            "=",
            "8",
            "or",
            "year",
            "<",
            "1980"
        ],
        "query_toks_no_value": [
            "where",
            "cylinders",
            "=",
            "value",
            "or",
            "year",
            "<",
            "value"
        ],
        "question": "Keep the records that cylinders is 8 or year is less than 1980",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "cylinders",
            "is",
            "8",
            "or",
            "year",
            "is",
            "less",
            "than",
            "1980"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ],
                    8.0,
                    null
                ],
                "or",
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    1980.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980",
        "original_question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "instance_id": 287
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id",
        "query_toks": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "model_list",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "model_list",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id"
        ],
        "question": "Get distinct and model of model list that has car names and cars data and car makers",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "model",
            "of",
            "model",
            "list",
            "that",
            "has",
            "car",
            "names",
            "and",
            "cars",
            "data",
            "and",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "original_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "instance_id": 288
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.weight < 3500 and car_makers.fullname != \"ford motor company\"",
        "query_toks": [
            "where",
            "cars_data.weight",
            "<",
            "3500",
            "and",
            "car_makers.fullname",
            "!=",
            "\"ford",
            "motor",
            "company\""
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.weight",
            "<",
            "3500",
            "and",
            "car_makers.fullname",
            "!=",
            "\"ford",
            "motor",
            "company\""
        ],
        "question": "Keep the records that weight of cars data is less than 3500 and fullname of car makers is not \"ford motor company\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "weight",
            "of",
            "cars",
            "data",
            "is",
            "less",
            "than",
            "3500",
            "and",
            "fullname",
            "of",
            "car",
            "makers",
            "is",
            "not",
            "\"ford",
            "motor",
            "company\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3500.0,
                    null
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"Ford Motor Company\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "original_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "instance_id": 289
    },
    {
        "db_id": "car_1",
        "query": "select distinct model_list.model from model_list join car_names on model_list.model = car_names.model join cars_data on car_names.makeid = cars_data.id join car_makers on model_list.maker = car_makers.id",
        "query_toks": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "model_list",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "model_list.model",
            "from",
            "model_list",
            "join",
            "car_names",
            "on",
            "model_list.model",
            "=",
            "car_names.model",
            "join",
            "cars_data",
            "on",
            "car_names.makeid",
            "=",
            "cars_data.id",
            "join",
            "car_makers",
            "on",
            "model_list.maker",
            "=",
            "car_makers.id"
        ],
        "question": "Get distinct and model of model list that has car names and cars data and car makers",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "model",
            "of",
            "model",
            "list",
            "that",
            "has",
            "car",
            "names",
            "and",
            "cars",
            "data",
            "and",
            "car",
            "makers"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "original_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "instance_id": 290
    },
    {
        "db_id": "car_1",
        "query": "where cars_data.weight < 3500 and car_makers.fullname != \"ford motor company\"",
        "query_toks": [
            "where",
            "cars_data.weight",
            "<",
            "3500",
            "and",
            "car_makers.fullname",
            "!=",
            "\"ford",
            "motor",
            "company\""
        ],
        "query_toks_no_value": [
            "where",
            "cars_data.weight",
            "<",
            "3500",
            "and",
            "car_makers.fullname",
            "!=",
            "\"ford",
            "motor",
            "company\""
        ],
        "question": "Keep the records that weight of cars data is less than 3500 and fullname of car makers is not \"ford motor company\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "weight",
            "of",
            "cars",
            "data",
            "is",
            "less",
            "than",
            "3500",
            "and",
            "fullname",
            "of",
            "car",
            "makers",
            "is",
            "not",
            "\"ford",
            "motor",
            "company\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    3500.0,
                    null
                ],
                "and",
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"Ford Motor Company\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';",
        "original_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "instance_id": 291
    },
    {
        "db_id": "flight_2",
        "query": "select country from airlines",
        "query_toks": [
            "select",
            "country",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            "from",
            "airlines"
        ],
        "question": "Get country of airlines",
        "question_toks": [
            "Get",
            "country",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "instance_id": 292
    },
    {
        "db_id": "flight_2",
        "query": "where airline = \"jetblue airways\"",
        "query_toks": [
            "where",
            "airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "query_toks_no_value": [
            "where",
            "airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "question": "Keep the records that airline is \"jetblue airways\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "is",
            "\"jetblue",
            "airways\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "instance_id": 293
    },
    {
        "db_id": "flight_2",
        "query": "select country from airlines",
        "query_toks": [
            "select",
            "country",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            "from",
            "airlines"
        ],
        "question": "Get country of airlines",
        "question_toks": [
            "Get",
            "country",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_question": "What country is Jetblue Airways affiliated with?",
        "instance_id": 294
    },
    {
        "db_id": "flight_2",
        "query": "where airline = \"jetblue airways\"",
        "query_toks": [
            "where",
            "airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "query_toks_no_value": [
            "where",
            "airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "question": "Keep the records that airline is \"jetblue airways\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "is",
            "\"jetblue",
            "airways\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_question": "What country is Jetblue Airways affiliated with?",
        "instance_id": 295
    },
    {
        "db_id": "flight_2",
        "query": "select abbreviation from airlines",
        "query_toks": [
            "select",
            "abbreviation",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "abbreviation",
            "from",
            "airlines"
        ],
        "question": "Get abbreviation of airlines",
        "question_toks": [
            "Get",
            "abbreviation",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "instance_id": 296
    },
    {
        "db_id": "flight_2",
        "query": "where airline = \"jetblue airways\"",
        "query_toks": [
            "where",
            "airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "query_toks_no_value": [
            "where",
            "airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "question": "Keep the records that airline is \"jetblue airways\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "is",
            "\"jetblue",
            "airways\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "instance_id": 297
    },
    {
        "db_id": "flight_2",
        "query": "select abbreviation from airlines",
        "query_toks": [
            "select",
            "abbreviation",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "abbreviation",
            "from",
            "airlines"
        ],
        "question": "Get abbreviation of airlines",
        "question_toks": [
            "Get",
            "abbreviation",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_question": "Which abbreviation corresponds to Jetblue Airways?",
        "instance_id": 298
    },
    {
        "db_id": "flight_2",
        "query": "where airline = \"jetblue airways\"",
        "query_toks": [
            "where",
            "airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "query_toks_no_value": [
            "where",
            "airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "question": "Keep the records that airline is \"jetblue airways\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "is",
            "\"jetblue",
            "airways\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
        "original_question": "Which abbreviation corresponds to Jetblue Airways?",
        "instance_id": 299
    },
    {
        "db_id": "flight_2",
        "query": "select airline , abbreviation from airlines",
        "query_toks": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines"
        ],
        "question": "Get airline and abbreviation of airlines",
        "question_toks": [
            "Get",
            "airline",
            "and",
            "abbreviation",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_question": "List all airline names and their abbreviations in \"USA\".",
        "instance_id": 300
    },
    {
        "db_id": "flight_2",
        "query": "where country = \"usa\"",
        "query_toks": [
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "question": "Keep the records that country is \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "is",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_question": "List all airline names and their abbreviations in \"USA\".",
        "instance_id": 301
    },
    {
        "db_id": "flight_2",
        "query": "select airline , abbreviation from airlines",
        "query_toks": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines"
        ],
        "question": "Get airline and abbreviation of airlines",
        "question_toks": [
            "Get",
            "airline",
            "and",
            "abbreviation",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_question": "What are the airline names and abbreviations for airlines in the USA?",
        "instance_id": 302
    },
    {
        "db_id": "flight_2",
        "query": "where country = \"usa\"",
        "query_toks": [
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "question": "Keep the records that country is \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "is",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_question": "What are the airline names and abbreviations for airlines in the USA?",
        "instance_id": 303
    },
    {
        "db_id": "flight_2",
        "query": "select airportcode , airportname from airports",
        "query_toks": [
            "select",
            "airportcode",
            ",",
            "airportname",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "airportcode",
            ",",
            "airportname",
            "from",
            "airports"
        ],
        "question": "Get airportcode and airportname of airports",
        "question_toks": [
            "Get",
            "airportcode",
            "and",
            "airportname",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "original_question": "List the airport code and name in the city of Anthony.",
        "instance_id": 304
    },
    {
        "db_id": "flight_2",
        "query": "where city = \"anthony\"",
        "query_toks": [
            "where",
            "city",
            "=",
            "\"anthony\""
        ],
        "query_toks_no_value": [
            "where",
            "city",
            "=",
            "\"anthony\""
        ],
        "question": "Keep the records that city is \"anthony\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "is",
            "\"anthony\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Anthony\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "original_question": "List the airport code and name in the city of Anthony.",
        "instance_id": 305
    },
    {
        "db_id": "flight_2",
        "query": "select airportcode , airportname from airports",
        "query_toks": [
            "select",
            "airportcode",
            ",",
            "airportname",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "airportcode",
            ",",
            "airportname",
            "from",
            "airports"
        ],
        "question": "Get airportcode and airportname of airports",
        "question_toks": [
            "Get",
            "airportcode",
            "and",
            "airportname",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "original_question": "Give the airport code and airport name corresonding to the city Anthony.",
        "instance_id": 306
    },
    {
        "db_id": "flight_2",
        "query": "where city = \"anthony\"",
        "query_toks": [
            "where",
            "city",
            "=",
            "\"anthony\""
        ],
        "query_toks_no_value": [
            "where",
            "city",
            "=",
            "\"anthony\""
        ],
        "question": "Keep the records that city is \"anthony\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "is",
            "\"anthony\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Anthony\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"",
        "original_question": "Give the airport code and airport name corresonding to the city Anthony.",
        "instance_id": 307
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airlines",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "question": "Get the number of airlines",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES",
        "original_question": "How many airlines do we have?",
        "instance_id": 308
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airlines",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "question": "Get the number of airlines",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES",
        "original_question": "What is the total number of airlines?",
        "instance_id": 309
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airports",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports"
        ],
        "question": "Get the number of airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRPORTS",
        "original_question": "How many airports do we have?",
        "instance_id": 310
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airports",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airports"
        ],
        "question": "Get the number of airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRPORTS",
        "original_question": "Return the number of  airports.",
        "instance_id": 311
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "question": "Get the number of flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS",
        "original_question": "How many flights do we have?",
        "instance_id": 312
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "question": "Get the number of flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS",
        "original_question": "Return the number of flights.",
        "instance_id": 313
    },
    {
        "db_id": "flight_2",
        "query": "select airline from airlines",
        "query_toks": [
            "select",
            "airline",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            "from",
            "airlines"
        ],
        "question": "Get airline of airlines",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "original_question": "Which airline has abbreviation 'UAL'?",
        "instance_id": 314
    },
    {
        "db_id": "flight_2",
        "query": "where abbreviation = \"ual\"",
        "query_toks": [
            "where",
            "abbreviation",
            "=",
            "\"ual\""
        ],
        "query_toks_no_value": [
            "where",
            "abbreviation",
            "=",
            "\"ual\""
        ],
        "question": "Keep the records that abbreviation is \"ual\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "abbreviation",
            "is",
            "\"ual\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    "\"UAL\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "original_question": "Which airline has abbreviation 'UAL'?",
        "instance_id": 315
    },
    {
        "db_id": "flight_2",
        "query": "select airline from airlines",
        "query_toks": [
            "select",
            "airline",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            "from",
            "airlines"
        ],
        "question": "Get airline of airlines",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "original_question": "Give the airline with abbreviation 'UAL'.",
        "instance_id": 316
    },
    {
        "db_id": "flight_2",
        "query": "where abbreviation = \"ual\"",
        "query_toks": [
            "where",
            "abbreviation",
            "=",
            "\"ual\""
        ],
        "query_toks_no_value": [
            "where",
            "abbreviation",
            "=",
            "\"ual\""
        ],
        "question": "Keep the records that abbreviation is \"ual\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "abbreviation",
            "is",
            "\"ual\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    "\"UAL\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
        "original_question": "Give the airline with abbreviation 'UAL'.",
        "instance_id": 317
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airlines",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "question": "Get the number of airlines",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_question": "How many airlines are from USA?",
        "instance_id": 318
    },
    {
        "db_id": "flight_2",
        "query": "where country = \"usa\"",
        "query_toks": [
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "question": "Keep the records that country is \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "is",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_question": "How many airlines are from USA?",
        "instance_id": 319
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airlines",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines"
        ],
        "question": "Get the number of airlines",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_question": "Return the number of airlines in the USA.",
        "instance_id": 320
    },
    {
        "db_id": "flight_2",
        "query": "where country = \"usa\"",
        "query_toks": [
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "country",
            "=",
            "\"usa\""
        ],
        "question": "Keep the records that country is \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "is",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
        "original_question": "Return the number of airlines in the USA.",
        "instance_id": 321
    },
    {
        "db_id": "flight_2",
        "query": "select city , country from airports",
        "query_toks": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports"
        ],
        "question": "Get city and country of airports",
        "question_toks": [
            "Get",
            "city",
            "and",
            "country",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "original_question": "Which city and country is the Alton airport at?",
        "instance_id": 322
    },
    {
        "db_id": "flight_2",
        "query": "where airportname = \"alton\"",
        "query_toks": [
            "where",
            "airportname",
            "=",
            "\"alton\""
        ],
        "query_toks_no_value": [
            "where",
            "airportname",
            "=",
            "\"alton\""
        ],
        "question": "Keep the records that airportname is \"alton\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airportname",
            "is",
            "\"alton\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"Alton\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "original_question": "Which city and country is the Alton airport at?",
        "instance_id": 323
    },
    {
        "db_id": "flight_2",
        "query": "select city , country from airports",
        "query_toks": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports"
        ],
        "question": "Get city and country of airports",
        "question_toks": [
            "Get",
            "city",
            "and",
            "country",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "original_question": "Give the city and country for the Alton airport.",
        "instance_id": 324
    },
    {
        "db_id": "flight_2",
        "query": "where airportname = \"alton\"",
        "query_toks": [
            "where",
            "airportname",
            "=",
            "\"alton\""
        ],
        "query_toks_no_value": [
            "where",
            "airportname",
            "=",
            "\"alton\""
        ],
        "question": "Keep the records that airportname is \"alton\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airportname",
            "is",
            "\"alton\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"Alton\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"",
        "original_question": "Give the city and country for the Alton airport.",
        "instance_id": 325
    },
    {
        "db_id": "flight_2",
        "query": "select airportname from airports",
        "query_toks": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "question": "Get airportname of airports",
        "question_toks": [
            "Get",
            "airportname",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "original_question": "What is the airport name for airport 'AKO'?",
        "instance_id": 326
    },
    {
        "db_id": "flight_2",
        "query": "where airportcode = \"ako\"",
        "query_toks": [
            "where",
            "airportcode",
            "=",
            "\"ako\""
        ],
        "query_toks_no_value": [
            "where",
            "airportcode",
            "=",
            "\"ako\""
        ],
        "question": "Keep the records that airportcode is \"ako\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airportcode",
            "is",
            "\"ako\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"AKO\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "original_question": "What is the airport name for airport 'AKO'?",
        "instance_id": 327
    },
    {
        "db_id": "flight_2",
        "query": "select airportname from airports",
        "query_toks": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "question": "Get airportname of airports",
        "question_toks": [
            "Get",
            "airportname",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "original_question": "Return the name of the airport with code 'AKO'.",
        "instance_id": 328
    },
    {
        "db_id": "flight_2",
        "query": "where airportcode = \"ako\"",
        "query_toks": [
            "where",
            "airportcode",
            "=",
            "\"ako\""
        ],
        "query_toks_no_value": [
            "where",
            "airportcode",
            "=",
            "\"ako\""
        ],
        "question": "Keep the records that airportcode is \"ako\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airportcode",
            "is",
            "\"ako\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"AKO\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
        "original_question": "Return the name of the airport with code 'AKO'.",
        "instance_id": 329
    },
    {
        "db_id": "flight_2",
        "query": "select airportname from airports",
        "query_toks": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "question": "Get airportname of airports",
        "question_toks": [
            "Get",
            "airportname",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "original_question": "What are airport names at City 'Aberdeen'?",
        "instance_id": 330
    },
    {
        "db_id": "flight_2",
        "query": "where city = \"aberdeen\"",
        "query_toks": [
            "where",
            "city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "original_question": "What are airport names at City 'Aberdeen'?",
        "instance_id": 331
    },
    {
        "db_id": "flight_2",
        "query": "select airportname from airports",
        "query_toks": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "query_toks_no_value": [
            "select",
            "airportname",
            "from",
            "airports"
        ],
        "question": "Get airportname of airports",
        "question_toks": [
            "Get",
            "airportname",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "original_question": "What are the names of airports in Aberdeen?",
        "instance_id": 332
    },
    {
        "db_id": "flight_2",
        "query": "where city = \"aberdeen\"",
        "query_toks": [
            "where",
            "city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
        "original_question": "What are the names of airports in Aberdeen?",
        "instance_id": 333
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "question": "Get the number of flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_question": "How many flights depart from 'APG'?",
        "instance_id": 334
    },
    {
        "db_id": "flight_2",
        "query": "where sourceairport = \"apg\"",
        "query_toks": [
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "query_toks_no_value": [
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "question": "Keep the records that sourceairport is \"apg\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sourceairport",
            "is",
            "\"apg\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_question": "How many flights depart from 'APG'?",
        "instance_id": 335
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "question": "Get the number of flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_question": "Count the number of flights departing from 'APG'.",
        "instance_id": 336
    },
    {
        "db_id": "flight_2",
        "query": "where sourceairport = \"apg\"",
        "query_toks": [
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "query_toks_no_value": [
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "question": "Keep the records that sourceairport is \"apg\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sourceairport",
            "is",
            "\"apg\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_question": "Count the number of flights departing from 'APG'.",
        "instance_id": 337
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "question": "Get the number of flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "original_question": "How many flights have destination ATO?",
        "instance_id": 338
    },
    {
        "db_id": "flight_2",
        "query": "where destairport = \"ato\"",
        "query_toks": [
            "where",
            "destairport",
            "=",
            "\"ato\""
        ],
        "query_toks_no_value": [
            "where",
            "destairport",
            "=",
            "\"ato\""
        ],
        "question": "Keep the records that destairport is \"ato\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "destairport",
            "is",
            "\"ato\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"ATO\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "original_question": "How many flights have destination ATO?",
        "instance_id": 339
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights"
        ],
        "question": "Get the number of flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "original_question": "Count the number of flights into ATO.",
        "instance_id": 340
    },
    {
        "db_id": "flight_2",
        "query": "where destairport = \"ato\"",
        "query_toks": [
            "where",
            "destairport",
            "=",
            "\"ato\""
        ],
        "query_toks_no_value": [
            "where",
            "destairport",
            "=",
            "\"ato\""
        ],
        "question": "Keep the records that destairport is \"ato\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "destairport",
            "is",
            "\"ato\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"ATO\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
        "original_question": "Count the number of flights into ATO.",
        "instance_id": 341
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get the number of flights that has airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "How many flights depart from City Aberdeen?",
        "instance_id": 342
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "How many flights depart from City Aberdeen?",
        "instance_id": 343
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.sourceairport = airports.airportcode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get the number of flights that has airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "Return the number of flights departing from Aberdeen.",
        "instance_id": 344
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "Return the number of flights departing from Aberdeen.",
        "instance_id": 345
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get the number of flights that has airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "How many flights arriving in Aberdeen city?",
        "instance_id": 346
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "How many flights arriving in Aberdeen city?",
        "instance_id": 347
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get the number of flights that has airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "Return the number of flights arriving in Aberdeen.",
        "instance_id": 348
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "Return the number of flights arriving in Aberdeen.",
        "instance_id": 349
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get the number of flights that has airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "original_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "instance_id": 350
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"ashley\" and airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"ashley\"",
            "and",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"ashley\"",
            "and",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"ashley\" and city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"ashley\"",
            "and",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Ashley\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "original_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "instance_id": 351
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airports on flights.sourceairport = airports.airportcode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get the number of flights that has airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "original_question": "How many flights fly from Aberdeen to Ashley?",
        "instance_id": 352
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"ashley\" and airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"ashley\"",
            "and",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"ashley\"",
            "and",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"ashley\" and city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"ashley\"",
            "and",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Ashley\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
        "original_question": "How many flights fly from Aberdeen to Ashley?",
        "instance_id": 353
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airlines",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airlines",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "question": "Get the number of flights that has airlines",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "original_question": "How many flights does airline 'JetBlue Airways' have?",
        "instance_id": 354
    },
    {
        "db_id": "flight_2",
        "query": "where airlines.airline = \"jetblue airways\"",
        "query_toks": [
            "where",
            "airlines.airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "query_toks_no_value": [
            "where",
            "airlines.airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "question": "Keep the records that airline of airlines is \"jetblue airways\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "of",
            "airlines",
            "is",
            "\"jetblue",
            "airways\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "original_question": "How many flights does airline 'JetBlue Airways' have?",
        "instance_id": 355
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airlines on flights.airline = airlines.uid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airlines",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airlines",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "question": "Get the number of flights that has airlines",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "original_question": "Give the number of Jetblue Airways flights.",
        "instance_id": 356
    },
    {
        "db_id": "flight_2",
        "query": "where airlines.airline = \"jetblue airways\"",
        "query_toks": [
            "where",
            "airlines.airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "query_toks_no_value": [
            "where",
            "airlines.airline",
            "=",
            "\"jetblue",
            "airways\""
        ],
        "question": "Keep the records that airline of airlines is \"jetblue airways\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "of",
            "airlines",
            "is",
            "\"jetblue",
            "airways\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"JetBlue Airways\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
        "original_question": "Give the number of Jetblue Airways flights.",
        "instance_id": 357
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "question": "Get the number of airlines that has flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "instance_id": 358
    },
    {
        "db_id": "flight_2",
        "query": "where airlines.airline = \"united airlines\" and flights.destairport = \"asy\"",
        "query_toks": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "flights.destairport",
            "=",
            "\"asy\""
        ],
        "query_toks_no_value": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "flights.destairport",
            "=",
            "\"asy\""
        ],
        "question": "Keep the records that airline of airlines is \"united airlines\" and destairport of flights is \"asy\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "of",
            "airlines",
            "is",
            "\"united",
            "airlines\"",
            "and",
            "destairport",
            "of",
            "flights",
            "is",
            "\"asy\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"ASY\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "instance_id": 359
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "question": "Get the number of airlines that has flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "instance_id": 360
    },
    {
        "db_id": "flight_2",
        "query": "where airlines.airline = \"united airlines\" and flights.destairport = \"asy\"",
        "query_toks": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "flights.destairport",
            "=",
            "\"asy\""
        ],
        "query_toks_no_value": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "flights.destairport",
            "=",
            "\"asy\""
        ],
        "question": "Keep the records that airline of airlines is \"united airlines\" and destairport of flights is \"asy\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "of",
            "airlines",
            "is",
            "\"united",
            "airlines\"",
            "and",
            "destairport",
            "of",
            "flights",
            "is",
            "\"asy\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"ASY\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"",
        "original_question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "instance_id": 361
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "question": "Get the number of airlines that has flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "original_question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "instance_id": 362
    },
    {
        "db_id": "flight_2",
        "query": "where airlines.airline = \"united airlines\" and flights.sourceairport = \"ahd\"",
        "query_toks": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "flights.sourceairport",
            "=",
            "\"ahd\""
        ],
        "query_toks_no_value": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "flights.sourceairport",
            "=",
            "\"ahd\""
        ],
        "question": "Keep the records that airline of airlines is \"united airlines\" and sourceairport of flights is \"ahd\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "of",
            "airlines",
            "is",
            "\"united",
            "airlines\"",
            "and",
            "sourceairport",
            "of",
            "flights",
            "is",
            "\"ahd\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"AHD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "original_question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "instance_id": 363
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from airlines join flights on flights.airline = airlines.uid",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "flights.airline",
            "=",
            "airlines.uid"
        ],
        "question": "Get the number of airlines that has flights",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "original_question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "instance_id": 364
    },
    {
        "db_id": "flight_2",
        "query": "where airlines.airline = \"united airlines\" and flights.sourceairport = \"ahd\"",
        "query_toks": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "flights.sourceairport",
            "=",
            "\"ahd\""
        ],
        "query_toks_no_value": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\"",
            "and",
            "flights.sourceairport",
            "=",
            "\"ahd\""
        ],
        "question": "Keep the records that airline of airlines is \"united airlines\" and sourceairport of flights is \"ahd\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "of",
            "airlines",
            "is",
            "\"united",
            "airlines\"",
            "and",
            "sourceairport",
            "of",
            "flights",
            "is",
            "\"ahd\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"AHD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
        "original_question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "instance_id": 365
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode",
            "join",
            "airlines",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode",
            "join",
            "airlines",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get the number of flights that has airports and airlines",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports",
            "and",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "original_question": "How many United Airlines flights go to City 'Aberdeen'?",
        "instance_id": 366
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\" and airlines.airline = \"united airlines\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\"",
            "and",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\"",
            "and",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\" and airline of airlines is \"united airlines\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\"",
            "and",
            "airline",
            "of",
            "airlines",
            "is",
            "\"united",
            "airlines\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "original_question": "How many United Airlines flights go to City 'Aberdeen'?",
        "instance_id": 367
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode join airlines on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode",
            "join",
            "airlines",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode",
            "join",
            "airlines",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get the number of flights that has airports and airlines",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports",
            "and",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "original_question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "instance_id": 368
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\" and airlines.airline = \"united airlines\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\"",
            "and",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\"",
            "and",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\" and airline of airlines is \"united airlines\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\"",
            "and",
            "airline",
            "of",
            "airlines",
            "is",
            "\"united",
            "airlines\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
        "original_question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "instance_id": 369
    },
    {
        "db_id": "flight_2",
        "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport",
        "query_toks": [
            "select",
            "airports.city",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport"
        ],
        "query_toks_no_value": [
            "select",
            "airports.city",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport"
        ],
        "question": "Get city of airports that has flights",
        "question_toks": [
            "Get",
            "city",
            "of",
            "airports",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has most number of arriving flights?",
        "instance_id": 370
    },
    {
        "db_id": "flight_2",
        "query": "group by airports.city",
        "query_toks": [
            "group",
            "by",
            "airports.city"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airports.city"
        ],
        "question": "Group the records based on city of airports",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "city",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has most number of arriving flights?",
        "instance_id": 371
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has most number of arriving flights?",
        "instance_id": 372
    },
    {
        "db_id": "flight_2",
        "query": "select airports.city from airports join flights on airports.airportcode = flights.destairport",
        "query_toks": [
            "select",
            "airports.city",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport"
        ],
        "query_toks_no_value": [
            "select",
            "airports.city",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport"
        ],
        "question": "Get city of airports that has flights",
        "question_toks": [
            "Get",
            "city",
            "of",
            "airports",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has the most frequent destination airport?",
        "instance_id": 373
    },
    {
        "db_id": "flight_2",
        "query": "group by airports.city",
        "query_toks": [
            "group",
            "by",
            "airports.city"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airports.city"
        ],
        "question": "Group the records based on city of airports",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "city",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has the most frequent destination airport?",
        "instance_id": 374
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has the most frequent destination airport?",
        "instance_id": 375
    },
    {
        "db_id": "flight_2",
        "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport",
        "query_toks": [
            "select",
            "airports.city",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "query_toks_no_value": [
            "select",
            "airports.city",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "question": "Get city of airports that has flights",
        "question_toks": [
            "Get",
            "city",
            "of",
            "airports",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has most number of departing flights?",
        "instance_id": 376
    },
    {
        "db_id": "flight_2",
        "query": "group by airports.city",
        "query_toks": [
            "group",
            "by",
            "airports.city"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airports.city"
        ],
        "question": "Group the records based on city of airports",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "city",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has most number of departing flights?",
        "instance_id": 377
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city has most number of departing flights?",
        "instance_id": 378
    },
    {
        "db_id": "flight_2",
        "query": "select airports.city from airports join flights on airports.airportcode = flights.sourceairport",
        "query_toks": [
            "select",
            "airports.city",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "query_toks_no_value": [
            "select",
            "airports.city",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "question": "Get city of airports that has flights",
        "question_toks": [
            "Get",
            "city",
            "of",
            "airports",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city is the most frequent source airport?",
        "instance_id": 379
    },
    {
        "db_id": "flight_2",
        "query": "group by airports.city",
        "query_toks": [
            "group",
            "by",
            "airports.city"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airports.city"
        ],
        "question": "Group the records based on city of airports",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "city",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city is the most frequent source airport?",
        "instance_id": 380
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which city is the most frequent source airport?",
        "instance_id": 381
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport",
        "query_toks": [
            "select",
            "airports.airportcode",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport",
            "or",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "query_toks_no_value": [
            "select",
            "airports.airportcode",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport",
            "or",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "question": "Get airportcode of airports that has flights",
        "question_toks": [
            "Get",
            "airportcode",
            "of",
            "airports",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the code of airport that has the highest number of flights?",
        "instance_id": 382
    },
    {
        "db_id": "flight_2",
        "query": "group by airports.airportcode",
        "query_toks": [
            "group",
            "by",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airports.airportcode"
        ],
        "question": "Group the records based on airportcode of airports",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airportcode",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the code of airport that has the highest number of flights?",
        "instance_id": 383
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the code of airport that has the highest number of flights?",
        "instance_id": 384
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport",
        "query_toks": [
            "select",
            "airports.airportcode",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport",
            "or",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "query_toks_no_value": [
            "select",
            "airports.airportcode",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport",
            "or",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "question": "Get airportcode of airports that has flights",
        "question_toks": [
            "Get",
            "airportcode",
            "of",
            "airports",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the airport code of the airport with the most flights?",
        "instance_id": 385
    },
    {
        "db_id": "flight_2",
        "query": "group by airports.airportcode",
        "query_toks": [
            "group",
            "by",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airports.airportcode"
        ],
        "question": "Group the records based on airportcode of airports",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airportcode",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the airport code of the airport with the most flights?",
        "instance_id": 386
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the airport code of the airport with the most flights?",
        "instance_id": 387
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport",
        "query_toks": [
            "select",
            "airports.airportcode",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport",
            "or",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "query_toks_no_value": [
            "select",
            "airports.airportcode",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport",
            "or",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "question": "Get airportcode of airports that has flights",
        "question_toks": [
            "Get",
            "airportcode",
            "of",
            "airports",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_question": "What is the code of airport that has fewest number of flights?",
        "instance_id": 388
    },
    {
        "db_id": "flight_2",
        "query": "group by airports.airportcode",
        "query_toks": [
            "group",
            "by",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airports.airportcode"
        ],
        "question": "Group the records based on airportcode of airports",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airportcode",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_question": "What is the code of airport that has fewest number of flights?",
        "instance_id": 389
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "question": "Order these records based on the number",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_question": "What is the code of airport that has fewest number of flights?",
        "instance_id": 390
    },
    {
        "db_id": "flight_2",
        "query": "select airports.airportcode from airports join flights on airports.airportcode = flights.destairport or airports.airportcode = flights.sourceairport",
        "query_toks": [
            "select",
            "airports.airportcode",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport",
            "or",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "query_toks_no_value": [
            "select",
            "airports.airportcode",
            "from",
            "airports",
            "join",
            "flights",
            "on",
            "airports.airportcode",
            "=",
            "flights.destairport",
            "or",
            "airports.airportcode",
            "=",
            "flights.sourceairport"
        ],
        "question": "Get airportcode of airports that has flights",
        "question_toks": [
            "Get",
            "airportcode",
            "of",
            "airports",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_question": "Give the code of the airport with the least flights.",
        "instance_id": 391
    },
    {
        "db_id": "flight_2",
        "query": "group by airports.airportcode",
        "query_toks": [
            "group",
            "by",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airports.airportcode"
        ],
        "question": "Group the records based on airportcode of airports",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airportcode",
            "of",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_question": "Give the code of the airport with the least flights.",
        "instance_id": 392
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "question": "Order these records based on the number",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "original_question": "Give the code of the airport with the least flights.",
        "instance_id": 393
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which airline has most number of flights?",
        "instance_id": 394
    },
    {
        "db_id": "flight_2",
        "query": "group by airlines.airline",
        "query_toks": [
            "group",
            "by",
            "airlines.airline"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airlines.airline"
        ],
        "question": "Group the records based on airline of airlines",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airline",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which airline has most number of flights?",
        "instance_id": 395
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which airline has most number of flights?",
        "instance_id": 396
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What airline serves the most flights?",
        "instance_id": 397
    },
    {
        "db_id": "flight_2",
        "query": "group by airlines.airline",
        "query_toks": [
            "group",
            "by",
            "airlines.airline"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airlines.airline"
        ],
        "question": "Group the records based on airline of airlines",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airline",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What airline serves the most flights?",
        "instance_id": 398
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What airline serves the most flights?",
        "instance_id": 399
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.abbreviation",
            ",",
            "airlines.country",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.abbreviation",
            ",",
            "airlines.country",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get abbreviation and country of airlines that has flights",
        "question_toks": [
            "Get",
            "abbreviation",
            "and",
            "country",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "instance_id": 400
    },
    {
        "db_id": "flight_2",
        "query": "group by airlines.airline",
        "query_toks": [
            "group",
            "by",
            "airlines.airline"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airlines.airline"
        ],
        "question": "Group the records based on airline of airlines",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airline",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "instance_id": 401
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "question": "Order these records based on the number",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "instance_id": 402
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.abbreviation",
            ",",
            "airlines.country",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.abbreviation",
            ",",
            "airlines.country",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get abbreviation and country of airlines that has flights",
        "question_toks": [
            "Get",
            "abbreviation",
            "and",
            "country",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "instance_id": 403
    },
    {
        "db_id": "flight_2",
        "query": "group by airlines.airline",
        "query_toks": [
            "group",
            "by",
            "airlines.airline"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airlines.airline"
        ],
        "question": "Group the records based on airline of airlines",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airline",
            "of",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "instance_id": 404
    },
    {
        "db_id": "flight_2",
        "query": "order by count ( * ) ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "question": "Order these records based on the number",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
        "original_question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "instance_id": 405
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_question": "What are airlines that have some flight departing from airport 'AHD'?",
        "instance_id": 406
    },
    {
        "db_id": "flight_2",
        "query": "where flights.sourceairport = \"ahd\"",
        "query_toks": [
            "where",
            "flights.sourceairport",
            "=",
            "\"ahd\""
        ],
        "query_toks_no_value": [
            "where",
            "flights.sourceairport",
            "=",
            "\"ahd\""
        ],
        "question": "Keep the records that sourceairport of flights is \"ahd\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sourceairport",
            "of",
            "flights",
            "is",
            "\"ahd\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"AHD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_question": "What are airlines that have some flight departing from airport 'AHD'?",
        "instance_id": 407
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_question": "Which airlines have a flight with source airport AHD?",
        "instance_id": 408
    },
    {
        "db_id": "flight_2",
        "query": "where flights.sourceairport = \"ahd\"",
        "query_toks": [
            "where",
            "flights.sourceairport",
            "=",
            "\"ahd\""
        ],
        "query_toks_no_value": [
            "where",
            "flights.sourceairport",
            "=",
            "\"ahd\""
        ],
        "question": "Keep the records that sourceairport of flights is \"ahd\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sourceairport",
            "of",
            "flights",
            "is",
            "\"ahd\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"AHD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"",
        "original_question": "Which airlines have a flight with source airport AHD?",
        "instance_id": 409
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "original_question": "What are airlines that have flights arriving at airport 'AHD'?",
        "instance_id": 410
    },
    {
        "db_id": "flight_2",
        "query": "where flights.destairport = \"ahd\"",
        "query_toks": [
            "where",
            "flights.destairport",
            "=",
            "\"ahd\""
        ],
        "query_toks_no_value": [
            "where",
            "flights.destairport",
            "=",
            "\"ahd\""
        ],
        "question": "Keep the records that destairport of flights is \"ahd\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "destairport",
            "of",
            "flights",
            "is",
            "\"ahd\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"AHD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "original_question": "What are airlines that have flights arriving at airport 'AHD'?",
        "instance_id": 411
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "original_question": "Which airlines have a flight with destination airport AHD?",
        "instance_id": 412
    },
    {
        "db_id": "flight_2",
        "query": "where flights.destairport = \"ahd\"",
        "query_toks": [
            "where",
            "flights.destairport",
            "=",
            "\"ahd\""
        ],
        "query_toks_no_value": [
            "where",
            "flights.destairport",
            "=",
            "\"ahd\""
        ],
        "question": "Keep the records that destairport of flights is \"ahd\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "destairport",
            "of",
            "flights",
            "is",
            "\"ahd\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"AHD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"",
        "original_question": "Which airlines have a flight with destination airport AHD?",
        "instance_id": 413
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "original_question": "Find all airlines that have at least 10 flights.",
        "instance_id": 414
    },
    {
        "db_id": "flight_2",
        "query": "group by airlines.airline having count ( * ) > 10",
        "query_toks": [
            "group",
            "by",
            "airlines.airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airlines.airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on airline of airlines that the number is greater than 10",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airline",
            "of",
            "airlines",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "original_question": "Find all airlines that have at least 10 flights.",
        "instance_id": 415
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "original_question": "Which airlines have at least 10 flights?",
        "instance_id": 416
    },
    {
        "db_id": "flight_2",
        "query": "group by airlines.airline having count ( * ) > 10",
        "query_toks": [
            "group",
            "by",
            "airlines.airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airlines.airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on airline of airlines that the number is greater than 10",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airline",
            "of",
            "airlines",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10",
        "original_question": "Which airlines have at least 10 flights?",
        "instance_id": 417
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "original_question": "Find all airlines that have fewer than 200 flights.",
        "instance_id": 418
    },
    {
        "db_id": "flight_2",
        "query": "group by airlines.airline having count ( * ) < 200",
        "query_toks": [
            "group",
            "by",
            "airlines.airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "200"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airlines.airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "value"
        ],
        "question": "Group the records based on airline of airlines that the number is less than 200",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airline",
            "of",
            "airlines",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "200"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    200.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "original_question": "Find all airlines that have fewer than 200 flights.",
        "instance_id": 419
    },
    {
        "db_id": "flight_2",
        "query": "select airlines.airline from airlines join flights on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "airlines.airline",
            "from",
            "airlines",
            "join",
            "flights",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get airline of airlines that has flights",
        "question_toks": [
            "Get",
            "airline",
            "of",
            "airlines",
            "that",
            "has",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "original_question": "Which airlines have less than 200 flights?",
        "instance_id": 420
    },
    {
        "db_id": "flight_2",
        "query": "group by airlines.airline having count ( * ) < 200",
        "query_toks": [
            "group",
            "by",
            "airlines.airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "200"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "airlines.airline",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "value"
        ],
        "question": "Group the records based on airline of airlines that the number is less than 200",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "airline",
            "of",
            "airlines",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "200"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    200.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200",
        "original_question": "Which airlines have less than 200 flights?",
        "instance_id": 421
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airlines",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airlines",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get flightno of flights that has airlines",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights",
            "that",
            "has",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "original_question": "What are flight numbers of Airline \"United Airlines\"?",
        "instance_id": 422
    },
    {
        "db_id": "flight_2",
        "query": "where airlines.airline = \"united airlines\"",
        "query_toks": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "query_toks_no_value": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "question": "Keep the records that airline of airlines is \"united airlines\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "of",
            "airlines",
            "is",
            "\"united",
            "airlines\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "original_question": "What are flight numbers of Airline \"United Airlines\"?",
        "instance_id": 423
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights join airlines on airlines.uid = flights.airline",
        "query_toks": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airlines",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "query_toks_no_value": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airlines",
            "on",
            "airlines.uid",
            "=",
            "flights.airline"
        ],
        "question": "Get flightno of flights that has airlines",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights",
            "that",
            "has",
            "airlines"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "original_question": "Which flight numbers correspond to United Airlines flights?",
        "instance_id": 424
    },
    {
        "db_id": "flight_2",
        "query": "where airlines.airline = \"united airlines\"",
        "query_toks": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "query_toks_no_value": [
            "where",
            "airlines.airline",
            "=",
            "\"united",
            "airlines\""
        ],
        "question": "Keep the records that airline of airlines is \"united airlines\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "airline",
            "of",
            "airlines",
            "is",
            "\"united",
            "airlines\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"United Airlines\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"",
        "original_question": "Which flight numbers correspond to United Airlines flights?",
        "instance_id": 425
    },
    {
        "db_id": "flight_2",
        "query": "select flightno from flights",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "question": "Get flightno of flights",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "instance_id": 426
    },
    {
        "db_id": "flight_2",
        "query": "where sourceairport = \"apg\"",
        "query_toks": [
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "query_toks_no_value": [
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "question": "Keep the records that sourceairport is \"apg\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sourceairport",
            "is",
            "\"apg\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "instance_id": 427
    },
    {
        "db_id": "flight_2",
        "query": "select flightno from flights",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "question": "Get flightno of flights",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_question": "Give the flight numbers of flights leaving from APG.",
        "instance_id": 428
    },
    {
        "db_id": "flight_2",
        "query": "where sourceairport = \"apg\"",
        "query_toks": [
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "query_toks_no_value": [
            "where",
            "sourceairport",
            "=",
            "\"apg\""
        ],
        "question": "Keep the records that sourceairport is \"apg\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sourceairport",
            "is",
            "\"apg\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
        "original_question": "Give the flight numbers of flights leaving from APG.",
        "instance_id": 429
    },
    {
        "db_id": "flight_2",
        "query": "select flightno from flights",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "question": "Get flightno of flights",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "original_question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "instance_id": 430
    },
    {
        "db_id": "flight_2",
        "query": "where destairport = \"apg\"",
        "query_toks": [
            "where",
            "destairport",
            "=",
            "\"apg\""
        ],
        "query_toks_no_value": [
            "where",
            "destairport",
            "=",
            "\"apg\""
        ],
        "question": "Keep the records that destairport is \"apg\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "destairport",
            "is",
            "\"apg\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "original_question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "instance_id": 431
    },
    {
        "db_id": "flight_2",
        "query": "select flightno from flights",
        "query_toks": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "query_toks_no_value": [
            "select",
            "flightno",
            "from",
            "flights"
        ],
        "question": "Get flightno of flights",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "original_question": "Give the flight numbers of flights landing at APG.",
        "instance_id": 432
    },
    {
        "db_id": "flight_2",
        "query": "where destairport = \"apg\"",
        "query_toks": [
            "where",
            "destairport",
            "=",
            "\"apg\""
        ],
        "query_toks_no_value": [
            "where",
            "destairport",
            "=",
            "\"apg\""
        ],
        "question": "Keep the records that destairport is \"apg\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "destairport",
            "is",
            "\"apg\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"APG\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"",
        "original_question": "Give the flight numbers of flights landing at APG.",
        "instance_id": 433
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode",
        "query_toks": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get flightno of flights that has airports",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "instance_id": 434
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "instance_id": 435
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights join airports on flights.sourceairport = airports.airportcode",
        "query_toks": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.sourceairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get flightno of flights that has airports",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "Give the flight numbers of flights leaving from Aberdeen.",
        "instance_id": 436
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "Give the flight numbers of flights leaving from Aberdeen.",
        "instance_id": 437
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode",
        "query_toks": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get flightno of flights that has airports",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "instance_id": 438
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "instance_id": 439
    },
    {
        "db_id": "flight_2",
        "query": "select flights.flightno from flights join airports on flights.destairport = airports.airportcode",
        "query_toks": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "flights.flightno",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get flightno of flights that has airports",
        "question_toks": [
            "Get",
            "flightno",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "Give the flight numbers of flights arriving in Aberdeen.",
        "instance_id": 440
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
        "original_question": "Give the flight numbers of flights arriving in Aberdeen.",
        "instance_id": 441
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get the number of flights that has airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "instance_id": 442
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\" or airports.city = \"abilene\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\"",
            "or",
            "airports.city",
            "=",
            "\"abilene\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\"",
            "or",
            "airports.city",
            "=",
            "\"abilene\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\" or city of airports is \"abilene\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\"",
            "or",
            "city",
            "of",
            "airports",
            "is",
            "\"abilene\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Abilene\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "instance_id": 443
    },
    {
        "db_id": "flight_2",
        "query": "select count ( * ) from flights join airports on flights.destairport = airports.airportcode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "flights",
            "join",
            "airports",
            "on",
            "flights.destairport",
            "=",
            "airports.airportcode"
        ],
        "question": "Get the number of flights that has airports",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "flights",
            "that",
            "has",
            "airports"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_question": "How many flights land in Aberdeen or Abilene?",
        "instance_id": 444
    },
    {
        "db_id": "flight_2",
        "query": "where airports.city = \"aberdeen\" or airports.city = \"abilene\"",
        "query_toks": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\"",
            "or",
            "airports.city",
            "=",
            "\"abilene\""
        ],
        "query_toks_no_value": [
            "where",
            "airports.city",
            "=",
            "\"aberdeen\"",
            "or",
            "airports.city",
            "=",
            "\"abilene\""
        ],
        "question": "Keep the records that city of airports is \"aberdeen\" or city of airports is \"abilene\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "of",
            "airports",
            "is",
            "\"aberdeen\"",
            "or",
            "city",
            "of",
            "airports",
            "is",
            "\"abilene\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Aberdeen\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Abilene\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
        "original_question": "How many flights land in Aberdeen or Abilene?",
        "instance_id": 445
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( * ) from employee",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "employee"
        ],
        "question": "Get the number of employee",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "employee"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM employee",
        "original_question": "How many employees are there?",
        "instance_id": 446
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( * ) from employee",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "employee"
        ],
        "question": "Get the number of employee",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "employee"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM employee",
        "original_question": "Count the number of employees",
        "instance_id": 447
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select name from employee",
        "query_toks": [
            "select",
            "name",
            "from",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "employee"
        ],
        "question": "Get name of employee",
        "question_toks": [
            "Get",
            "name",
            "of",
            "employee"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM employee ORDER BY age",
        "original_question": "Sort employee names by their age in ascending order.",
        "instance_id": 448
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM employee ORDER BY age",
        "original_question": "Sort employee names by their age in ascending order.",
        "instance_id": 449
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select name from employee",
        "query_toks": [
            "select",
            "name",
            "from",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "employee"
        ],
        "question": "Get name of employee",
        "question_toks": [
            "Get",
            "name",
            "of",
            "employee"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM employee ORDER BY age",
        "original_question": "List the names of employees and sort in ascending order of age.",
        "instance_id": 450
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM employee ORDER BY age",
        "original_question": "List the names of employees and sort in ascending order of age.",
        "instance_id": 451
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( * ) , city from employee",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "from",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "from",
            "employee"
        ],
        "question": "Get the number and city of employee",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "city",
            "of",
            "employee"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "original_question": "What is the number of employees from each city?",
        "instance_id": 452
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by city",
        "query_toks": [
            "group",
            "by",
            "city"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "city"
        ],
        "question": "Group the records based on city",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "original_question": "What is the number of employees from each city?",
        "instance_id": 453
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( * ) , city from employee",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "from",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "city",
            "from",
            "employee"
        ],
        "question": "Get the number and city of employee",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "city",
            "of",
            "employee"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "original_question": "Count the number of employees for each city.",
        "instance_id": 454
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by city",
        "query_toks": [
            "group",
            "by",
            "city"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "city"
        ],
        "question": "Group the records based on city",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  city FROM employee GROUP BY city",
        "original_question": "Count the number of employees for each city.",
        "instance_id": 455
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select city from employee",
        "query_toks": [
            "select",
            "city",
            "from",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            "from",
            "employee"
        ],
        "question": "Get city of employee",
        "question_toks": [
            "Get",
            "city",
            "of",
            "employee"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_question": "Which cities do more than one employee under age 30 come from?",
        "instance_id": 456
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "where age < 30 ",
        "query_toks": [
            "where",
            "age",
            "<",
            "30"
        ],
        "query_toks_no_value": [
            "where",
            "age",
            "<",
            "value"
        ],
        "question": "Keep the records that age is less than 30",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "is",
            "less",
            "than",
            "30"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_question": "Which cities do more than one employee under age 30 come from?",
        "instance_id": 457
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by city having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on city that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "city",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_question": "Which cities do more than one employee under age 30 come from?",
        "instance_id": 458
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select city from employee",
        "query_toks": [
            "select",
            "city",
            "from",
            "employee"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            "from",
            "employee"
        ],
        "question": "Get city of employee",
        "question_toks": [
            "Get",
            "city",
            "of",
            "employee"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_question": "Find the cities that have more than one employee under age 30.",
        "instance_id": 459
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "where age < 30 ",
        "query_toks": [
            "where",
            "age",
            "<",
            "30"
        ],
        "query_toks_no_value": [
            "where",
            "age",
            "<",
            "value"
        ],
        "question": "Keep the records that age is less than 30",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "is",
            "less",
            "than",
            "30"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_question": "Find the cities that have more than one employee under age 30.",
        "instance_id": 460
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by city having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "city",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on city that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "city",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
        "original_question": "Find the cities that have more than one employee under age 30.",
        "instance_id": 461
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( * ) , location from shop",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "location",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "location",
            "from",
            "shop"
        ],
        "question": "Get the number and location of shop",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "location",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "original_question": "Find the number of shops in each location.",
        "instance_id": 462
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by location",
        "query_toks": [
            "group",
            "by",
            "location"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "location"
        ],
        "question": "Group the records based on location",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "location"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "original_question": "Find the number of shops in each location.",
        "instance_id": 463
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( * ) , location from shop",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "location",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "location",
            "from",
            "shop"
        ],
        "question": "Get the number and location of shop",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "location",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "original_question": "How many shops are there in each location?",
        "instance_id": 464
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by location",
        "query_toks": [
            "group",
            "by",
            "location"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "location"
        ],
        "question": "Group the records based on location",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "location"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
        "original_question": "How many shops are there in each location?",
        "instance_id": 465
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select manager_name , district from shop",
        "query_toks": [
            "select",
            "manager_name",
            ",",
            "district",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "manager_name",
            ",",
            "district",
            "from",
            "shop"
        ],
        "question": "Get manager name and district of shop",
        "question_toks": [
            "Get",
            "manager",
            "name",
            "and",
            "district",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "original_question": "Find the manager name and district of the shop whose number of products is the largest.",
        "instance_id": 466
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by number_products desc ",
        "query_toks": [
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "question": "Order these records based on number products and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "number",
            "products",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "original_question": "Find the manager name and district of the shop whose number of products is the largest.",
        "instance_id": 467
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select manager_name , district from shop",
        "query_toks": [
            "select",
            "manager_name",
            ",",
            "district",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "manager_name",
            ",",
            "district",
            "from",
            "shop"
        ],
        "question": "Get manager name and district of shop",
        "question_toks": [
            "Get",
            "manager",
            "name",
            "and",
            "district",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "original_question": "What are the manager name and district of the shop that sells the largest number of products?",
        "instance_id": 468
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by number_products desc ",
        "query_toks": [
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "question": "Order these records based on number products and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "number",
            "products",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
        "original_question": "What are the manager name and district of the shop that sells the largest number of products?",
        "instance_id": 469
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select min ( number_products ) , max ( number_products ) from shop",
        "query_toks": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            ",",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            ",",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "question": "Get the minimum value of number products and the maximum value of number products of shop",
        "question_toks": [
            "Get",
            "the",
            "minimum",
            "value",
            "of",
            "number",
            "products",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "number",
            "products",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "original_question": "find the minimum and maximum number of products of all stores.",
        "instance_id": 470
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select min ( number_products ) , max ( number_products ) from shop",
        "query_toks": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            ",",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "number_products",
            ")",
            ",",
            "max",
            "(",
            "number_products",
            ")",
            "from",
            "shop"
        ],
        "question": "Get the minimum value of number products and the maximum value of number products of shop",
        "question_toks": [
            "Get",
            "the",
            "minimum",
            "value",
            "of",
            "number",
            "products",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "number",
            "products",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
        "original_question": "What are the minimum and maximum number of products across all the shops?",
        "instance_id": 471
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select name , location , district from shop",
        "query_toks": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop"
        ],
        "question": "Get name and location and district of shop",
        "question_toks": [
            "Get",
            "name",
            "and",
            "location",
            "and",
            "district",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "original_question": "Return the name, location and district of all shops in descending order of number of products.",
        "instance_id": 472
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by number_products ",
        "query_toks": [
            "order",
            "by",
            "number_products"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "number_products"
        ],
        "question": "Order these records based on number products",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "number",
            "products"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "original_question": "Return the name, location and district of all shops in descending order of number of products.",
        "instance_id": 473
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select name , location , district from shop",
        "query_toks": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop"
        ],
        "question": "Get name and location and district of shop",
        "question_toks": [
            "Get",
            "name",
            "and",
            "location",
            "and",
            "district",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "original_question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "instance_id": 474
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by number_products ",
        "query_toks": [
            "order",
            "by",
            "number_products"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "number_products"
        ],
        "question": "Order these records based on number products",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "number",
            "products"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
        "original_question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "instance_id": 475
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id",
        "query_toks": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "evaluation",
            "on",
            "employee.employee_id",
            "=",
            "evaluation.employee_id"
        ],
        "query_toks_no_value": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "evaluation",
            "on",
            "employee.employee_id",
            "=",
            "evaluation.employee_id"
        ],
        "question": "Get name of employee that has evaluation",
        "question_toks": [
            "Get",
            "name",
            "of",
            "employee",
            "that",
            "has",
            "evaluation"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "find the name of employee who was awarded the most times in the evaluation.",
        "instance_id": 476
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by evaluation.employee_id",
        "query_toks": [
            "group",
            "by",
            "evaluation.employee_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "evaluation.employee_id"
        ],
        "question": "Group the records based on employee id of evaluation",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "employee",
            "id",
            "of",
            "evaluation"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "find the name of employee who was awarded the most times in the evaluation.",
        "instance_id": 477
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "find the name of employee who was awarded the most times in the evaluation.",
        "instance_id": 478
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id",
        "query_toks": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "evaluation",
            "on",
            "employee.employee_id",
            "=",
            "evaluation.employee_id"
        ],
        "query_toks_no_value": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "evaluation",
            "on",
            "employee.employee_id",
            "=",
            "evaluation.employee_id"
        ],
        "question": "Get name of employee that has evaluation",
        "question_toks": [
            "Get",
            "name",
            "of",
            "employee",
            "that",
            "has",
            "evaluation"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "instance_id": 479
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by evaluation.employee_id",
        "query_toks": [
            "group",
            "by",
            "evaluation.employee_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "evaluation.employee_id"
        ],
        "question": "Group the records based on employee id of evaluation",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "employee",
            "id",
            "of",
            "evaluation"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "instance_id": 480
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "instance_id": 481
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id",
        "query_toks": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "evaluation",
            "on",
            "employee.employee_id",
            "=",
            "evaluation.employee_id"
        ],
        "query_toks_no_value": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "evaluation",
            "on",
            "employee.employee_id",
            "=",
            "evaluation.employee_id"
        ],
        "question": "Get name of employee that has evaluation",
        "question_toks": [
            "Get",
            "name",
            "of",
            "employee",
            "that",
            "has",
            "evaluation"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "original_question": "Find the name of the employee who got the highest one time bonus.",
        "instance_id": 482
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by evaluation.bonus desc ",
        "query_toks": [
            "order",
            "by",
            "evaluation.bonus",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "evaluation.bonus",
            "desc"
        ],
        "question": "Order these records based on bonus of evaluation and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "bonus",
            "of",
            "evaluation",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "original_question": "Find the name of the employee who got the highest one time bonus.",
        "instance_id": 483
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id",
        "query_toks": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "evaluation",
            "on",
            "employee.employee_id",
            "=",
            "evaluation.employee_id"
        ],
        "query_toks_no_value": [
            "select",
            "employee.name",
            "from",
            "employee",
            "join",
            "evaluation",
            "on",
            "employee.employee_id",
            "=",
            "evaluation.employee_id"
        ],
        "question": "Get name of employee that has evaluation",
        "question_toks": [
            "Get",
            "name",
            "of",
            "employee",
            "that",
            "has",
            "evaluation"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "original_question": "Which employee received the biggest bonus? Give me the employee name.",
        "instance_id": 484
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by evaluation.bonus desc ",
        "query_toks": [
            "order",
            "by",
            "evaluation.bonus",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "evaluation.bonus",
            "desc"
        ],
        "question": "Order these records based on bonus of evaluation and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "bonus",
            "of",
            "evaluation",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            17,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
        "original_question": "Which employee received the biggest bonus? Give me the employee name.",
        "instance_id": 485
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id",
        "query_toks": [
            "select",
            "shop.name",
            "from",
            "hiring",
            "join",
            "shop",
            "on",
            "hiring.shop_id",
            "=",
            "shop.shop_id"
        ],
        "query_toks_no_value": [
            "select",
            "shop.name",
            "from",
            "hiring",
            "join",
            "shop",
            "on",
            "hiring.shop_id",
            "=",
            "shop.shop_id"
        ],
        "question": "Get name of hiring that has shop",
        "question_toks": [
            "Get",
            "name",
            "of",
            "hiring",
            "that",
            "has",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the shop that is hiring the largest number of employees?",
        "instance_id": 486
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by hiring.shop_id",
        "query_toks": [
            "group",
            "by",
            "hiring.shop_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hiring.shop_id"
        ],
        "question": "Group the records based on shop id of hiring",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "shop",
            "id",
            "of",
            "hiring"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the shop that is hiring the largest number of employees?",
        "instance_id": 487
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the shop that is hiring the largest number of employees?",
        "instance_id": 488
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select shop.name from hiring join shop on hiring.shop_id = shop.shop_id",
        "query_toks": [
            "select",
            "shop.name",
            "from",
            "hiring",
            "join",
            "shop",
            "on",
            "hiring.shop_id",
            "=",
            "shop.shop_id"
        ],
        "query_toks_no_value": [
            "select",
            "shop.name",
            "from",
            "hiring",
            "join",
            "shop",
            "on",
            "hiring.shop_id",
            "=",
            "shop.shop_id"
        ],
        "question": "Get name of hiring that has shop",
        "question_toks": [
            "Get",
            "name",
            "of",
            "hiring",
            "that",
            "has",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which shop has the most employees? Give me the shop name.",
        "instance_id": 489
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by hiring.shop_id",
        "query_toks": [
            "group",
            "by",
            "hiring.shop_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hiring.shop_id"
        ],
        "question": "Group the records based on shop id of hiring",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "shop",
            "id",
            "of",
            "hiring"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which shop has the most employees? Give me the shop name.",
        "instance_id": 490
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which shop has the most employees? Give me the shop name.",
        "instance_id": 491
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "shop.name",
            "from",
            "hiring",
            "join",
            "shop",
            "on",
            "hiring.shop_id",
            "=",
            "shop.shop_id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "shop.name",
            "from",
            "hiring",
            "join",
            "shop",
            "on",
            "hiring.shop_id",
            "=",
            "shop.shop_id"
        ],
        "question": "Get the number and name of hiring that has shop",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "hiring",
            "that",
            "has",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "original_question": "Find the number of employees hired in each shop; show the shop name as well.",
        "instance_id": 492
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by shop.name",
        "query_toks": [
            "group",
            "by",
            "shop.name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "shop.name"
        ],
        "question": "Group the records based on name of shop",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "original_question": "Find the number of employees hired in each shop; show the shop name as well.",
        "instance_id": 493
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( * ) , shop.name from hiring join shop on hiring.shop_id = shop.shop_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "shop.name",
            "from",
            "hiring",
            "join",
            "shop",
            "on",
            "hiring.shop_id",
            "=",
            "shop.shop_id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "shop.name",
            "from",
            "hiring",
            "join",
            "shop",
            "on",
            "hiring.shop_id",
            "=",
            "shop.shop_id"
        ],
        "question": "Get the number and name of hiring that has shop",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "hiring",
            "that",
            "has",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "original_question": "For each shop, return the number of employees working there and the name of the shop.",
        "instance_id": 494
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "group by shop.name",
        "query_toks": [
            "group",
            "by",
            "shop.name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "shop.name"
        ],
        "question": "Group the records based on name of shop",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
        "original_question": "For each shop, return the number of employees working there and the name of the shop.",
        "instance_id": 495
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select sum ( bonus ) from evaluation",
        "query_toks": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation"
        ],
        "question": "Get the sum of bonus and sum of evaluation",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "bonus",
            "and",
            "sum",
            "of",
            "evaluation"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(bonus) FROM evaluation",
        "original_question": "What is total bonus given in all evaluations?",
        "instance_id": 496
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select sum ( bonus ) from evaluation",
        "query_toks": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "bonus",
            ")",
            "from",
            "evaluation"
        ],
        "question": "Get the sum of bonus and sum of evaluation",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "bonus",
            "and",
            "sum",
            "of",
            "evaluation"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(bonus) FROM evaluation",
        "original_question": "Find the total amount of bonus given in all the evaluations.",
        "instance_id": 497
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select * from hiring",
        "query_toks": [
            "select",
            "*",
            "from",
            "hiring"
        ],
        "query_toks_no_value": [
            "select",
            "*",
            "from",
            "hiring"
        ],
        "question": "Get all of hiring",
        "question_toks": [
            "Get",
            "all",
            "of",
            "hiring"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT * FROM hiring",
        "original_question": "Give me all the information about hiring.",
        "instance_id": 498
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select * from hiring",
        "query_toks": [
            "select",
            "*",
            "from",
            "hiring"
        ],
        "query_toks_no_value": [
            "select",
            "*",
            "from",
            "hiring"
        ],
        "question": "Get all of hiring",
        "question_toks": [
            "Get",
            "all",
            "of",
            "hiring"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT * FROM hiring",
        "original_question": "What is all the information about hiring?",
        "instance_id": 499
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( distinct location ) from shop",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "location",
            ")",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "location",
            ")",
            "from",
            "shop"
        ],
        "question": "Get the number of distinct location of shop",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "location",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "original_question": "How many different store locations are there?",
        "instance_id": 500
    },
    {
        "db_id": "employee_hire_evaluation",
        "query": "select count ( distinct location ) from shop",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "location",
            ")",
            "from",
            "shop"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "location",
            ")",
            "from",
            "shop"
        ],
        "question": "Get the number of distinct location of shop",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "location",
            "of",
            "shop"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                7,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT LOCATION) FROM shop",
        "original_question": "Count the number of distinct store locations.",
        "instance_id": 501
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from documents",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "question": "Get the number of documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Documents",
        "original_question": "How many documents do we have?",
        "instance_id": 502
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from documents",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "question": "Get the number of documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Documents",
        "original_question": "Count the number of documents.",
        "instance_id": 503
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id , document_name , document_description from documents",
        "query_toks": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "Get document id and document name and document description of documents",
        "question_toks": [
            "Get",
            "document",
            "id",
            "and",
            "document",
            "name",
            "and",
            "document",
            "description",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "original_question": "List document IDs, document names, and document descriptions for all documents.",
        "instance_id": 504
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id , document_name , document_description from documents",
        "query_toks": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "Get document id and document name and document description of documents",
        "question_toks": [
            "Get",
            "document",
            "id",
            "and",
            "document",
            "name",
            "and",
            "document",
            "description",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  document_name ,  document_description FROM Documents",
        "original_question": "What are the ids, names, and descriptions for all documents?",
        "instance_id": 505
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_name , template_id from documents",
        "query_toks": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents"
        ],
        "question": "Get document name and template id of documents",
        "question_toks": [
            "Get",
            "document",
            "name",
            "and",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "original_question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "instance_id": 506
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where document_description like \"% w %\"",
        "query_toks": [
            "where",
            "document_description",
            "like",
            "\"%",
            "w",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "document_description",
            "like",
            "\"%",
            "w",
            "%\""
        ],
        "question": "Keep the records that document description is in the form of \"% w %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "description",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "w",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"%w%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "original_question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "instance_id": 507
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_name , template_id from documents",
        "query_toks": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents"
        ],
        "question": "Get document name and template id of documents",
        "question_toks": [
            "Get",
            "document",
            "name",
            "and",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "original_question": "Return the names and template ids for documents that contain the letter w in their description.",
        "instance_id": 508
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where document_description like \"% w %\"",
        "query_toks": [
            "where",
            "document_description",
            "like",
            "\"%",
            "w",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "document_description",
            "like",
            "\"%",
            "w",
            "%\""
        ],
        "question": "Keep the records that document description is in the form of \"% w %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "description",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "w",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"%w%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
        "original_question": "Return the names and template ids for documents that contain the letter w in their description.",
        "instance_id": 509
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id , template_id , document_description from documents",
        "query_toks": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "Get document id and template id and document description of documents",
        "question_toks": [
            "Get",
            "document",
            "id",
            "and",
            "template",
            "id",
            "and",
            "document",
            "description",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "original_question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "instance_id": 510
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where document_name = \"robbin cv\"",
        "query_toks": [
            "where",
            "document_name",
            "=",
            "\"robbin",
            "cv\""
        ],
        "query_toks_no_value": [
            "where",
            "document_name",
            "=",
            "\"robbin",
            "cv\""
        ],
        "question": "Keep the records that document name is \"robbin cv\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "is",
            "\"robbin",
            "cv\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Robbin CV\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "original_question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "instance_id": 511
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id , template_id , document_description from documents",
        "query_toks": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "Get document id and template id and document description of documents",
        "question_toks": [
            "Get",
            "document",
            "id",
            "and",
            "template",
            "id",
            "and",
            "document",
            "description",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "original_question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "instance_id": 512
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where document_name = \"robbin cv\"",
        "query_toks": [
            "where",
            "document_name",
            "=",
            "\"robbin",
            "cv\""
        ],
        "query_toks_no_value": [
            "where",
            "document_name",
            "=",
            "\"robbin",
            "cv\""
        ],
        "question": "Keep the records that document name is \"robbin cv\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "is",
            "\"robbin",
            "cv\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Robbin CV\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
        "original_question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "instance_id": 513
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( distinct template_id ) from documents",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents"
        ],
        "question": "Get the number of distinct template id of documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "original_question": "How many different templates do all document use?",
        "instance_id": 514
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( distinct template_id ) from documents",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "template_id",
            ")",
            "from",
            "documents"
        ],
        "question": "Get the number of distinct template id of documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT template_id) FROM Documents",
        "original_question": "Count the number of different templates used for documents.",
        "instance_id": 515
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "join",
            "templates",
            "on",
            "documents.template_id",
            "=",
            "templates.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "join",
            "templates",
            "on",
            "documents.template_id",
            "=",
            "templates.template_id"
        ],
        "question": "Get the number of documents that has templates",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "documents",
            "that",
            "has",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "original_question": "How many documents are using the template with type code 'PPT'?",
        "instance_id": 516
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where templates.template_type_code = \"ppt\"",
        "query_toks": [
            "where",
            "templates.template_type_code",
            "=",
            "\"ppt\""
        ],
        "query_toks_no_value": [
            "where",
            "templates.template_type_code",
            "=",
            "\"ppt\""
        ],
        "question": "Keep the records that template type code of templates is \"ppt\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "is",
            "\"ppt\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"PPT\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "original_question": "How many documents are using the template with type code 'PPT'?",
        "instance_id": 517
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from documents join templates on documents.template_id = templates.template_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "join",
            "templates",
            "on",
            "documents.template_id",
            "=",
            "templates.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents",
            "join",
            "templates",
            "on",
            "documents.template_id",
            "=",
            "templates.template_id"
        ],
        "question": "Get the number of documents that has templates",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "documents",
            "that",
            "has",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "original_question": "Count the number of documents that use the PPT template type.",
        "instance_id": 518
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where templates.template_type_code = \"ppt\"",
        "query_toks": [
            "where",
            "templates.template_type_code",
            "=",
            "\"ppt\""
        ],
        "query_toks_no_value": [
            "where",
            "templates.template_type_code",
            "=",
            "\"ppt\""
        ],
        "question": "Keep the records that template type code of templates is \"ppt\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "is",
            "\"ppt\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"PPT\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
        "original_question": "Count the number of documents that use the PPT template type.",
        "instance_id": 519
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_id , count ( * ) from documents",
        "query_toks": [
            "select",
            "template_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "question": "Get the number and template id of documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "original_question": "Show all template ids and number of documents using each template.",
        "instance_id": 520
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_id",
        "query_toks": [
            "group",
            "by",
            "template_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_id"
        ],
        "question": "Group the records based on template id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "original_question": "Show all template ids and number of documents using each template.",
        "instance_id": 521
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_id , count ( * ) from documents",
        "query_toks": [
            "select",
            "template_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "documents"
        ],
        "question": "Get the number and template id of documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "original_question": "What are all different template ids used for documents, and how many times were each of them used?",
        "instance_id": 522
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_id",
        "query_toks": [
            "group",
            "by",
            "template_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_id"
        ],
        "question": "Group the records based on template id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "original_question": "What are all different template ids used for documents, and how many times were each of them used?",
        "instance_id": 523
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id",
        "query_toks": [
            "select",
            "documents.template_id",
            ",",
            "templates.template_type_code",
            "from",
            "documents",
            "join",
            "templates",
            "on",
            "documents.template_id",
            "=",
            "templates.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "documents.template_id",
            ",",
            "templates.template_type_code",
            "from",
            "documents",
            "join",
            "templates",
            "on",
            "documents.template_id",
            "=",
            "templates.template_id"
        ],
        "question": "Get template id and template type code of documents that has templates",
        "question_toks": [
            "Get",
            "template",
            "id",
            "and",
            "template",
            "type",
            "code",
            "of",
            "documents",
            "that",
            "has",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the id and type code for the template used by the most documents?",
        "instance_id": 524
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by documents.template_id",
        "query_toks": [
            "group",
            "by",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "documents.template_id"
        ],
        "question": "Group the records based on template id of documents",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the id and type code for the template used by the most documents?",
        "instance_id": 525
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the id and type code for the template used by the most documents?",
        "instance_id": 526
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.template_id , templates.template_type_code from documents join templates on documents.template_id = templates.template_id",
        "query_toks": [
            "select",
            "documents.template_id",
            ",",
            "templates.template_type_code",
            "from",
            "documents",
            "join",
            "templates",
            "on",
            "documents.template_id",
            "=",
            "templates.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "documents.template_id",
            ",",
            "templates.template_type_code",
            "from",
            "documents",
            "join",
            "templates",
            "on",
            "documents.template_id",
            "=",
            "templates.template_id"
        ],
        "question": "Get template id and template type code of documents that has templates",
        "question_toks": [
            "Get",
            "template",
            "id",
            "and",
            "template",
            "type",
            "code",
            "of",
            "documents",
            "that",
            "has",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "instance_id": 527
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by documents.template_id",
        "query_toks": [
            "group",
            "by",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "documents.template_id"
        ],
        "question": "Group the records based on template id of documents",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "instance_id": 528
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "instance_id": 529
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_id from documents",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "question": "Get template id of documents",
        "question_toks": [
            "Get",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "original_question": "Show ids for all templates that are used by more than one document.",
        "instance_id": 530
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_id having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on template id that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "id",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "original_question": "Show ids for all templates that are used by more than one document.",
        "instance_id": 531
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_id from documents",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "documents"
        ],
        "question": "Get template id of documents",
        "question_toks": [
            "Get",
            "template",
            "id",
            "of",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "original_question": "What are the template ids of any templates used in more than a single document?",
        "instance_id": 532
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_id having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on template id that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "id",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
        "original_question": "What are the template ids of any templates used in more than a single document?",
        "instance_id": 533
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from templates",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "question": "Get the number of templates",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Templates",
        "original_question": "How many templates do we have?",
        "instance_id": 534
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from templates",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "question": "Get the number of templates",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Templates",
        "original_question": "Count the number of templates.",
        "instance_id": 535
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_id , version_number , template_type_code from templates",
        "query_toks": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get template id and version number and template type code of templates",
        "question_toks": [
            "Get",
            "template",
            "id",
            "and",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "original_question": "Show template ids, version numbers, and template type codes for all templates.",
        "instance_id": 536
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_id , version_number , template_type_code from templates",
        "query_toks": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get template id and version number and template type code of templates",
        "question_toks": [
            "Get",
            "template",
            "id",
            "and",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
        "original_question": "What are the ids, version numbers, and type codes for each template?",
        "instance_id": 537
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct template_type_code from templates",
        "query_toks": [
            "select",
            "distinct",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get distinct and template type code of templates",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "original_question": "Show all distinct template type codes for all templates.",
        "instance_id": 538
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct template_type_code from templates",
        "query_toks": [
            "select",
            "distinct",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get distinct and template type code of templates",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "original_question": "What are the different template type codes?",
        "instance_id": 539
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_id from templates",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "templates"
        ],
        "question": "Get template id of templates",
        "question_toks": [
            "Get",
            "template",
            "id",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "original_question": "What are the ids of templates with template type code PP or PPT?",
        "instance_id": 540
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where template_type_code = \"pp\" or template_type_code = \"ppt\"",
        "query_toks": [
            "where",
            "template_type_code",
            "=",
            "\"pp\"",
            "or",
            "template_type_code",
            "=",
            "\"ppt\""
        ],
        "query_toks_no_value": [
            "where",
            "template_type_code",
            "=",
            "\"pp\"",
            "or",
            "template_type_code",
            "=",
            "\"ppt\""
        ],
        "question": "Keep the records that template type code is \"pp\" or template type code is \"ppt\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "is",
            "\"pp\"",
            "or",
            "template",
            "type",
            "code",
            "is",
            "\"ppt\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"PP\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"PPT\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "original_question": "What are the ids of templates with template type code PP or PPT?",
        "instance_id": 541
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_id from templates",
        "query_toks": [
            "select",
            "template_id",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            "from",
            "templates"
        ],
        "question": "Get template id of templates",
        "question_toks": [
            "Get",
            "template",
            "id",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "original_question": "Return the ids of templates that have the code PP or PPT.",
        "instance_id": 542
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where template_type_code = \"pp\" or template_type_code = \"ppt\"",
        "query_toks": [
            "where",
            "template_type_code",
            "=",
            "\"pp\"",
            "or",
            "template_type_code",
            "=",
            "\"ppt\""
        ],
        "query_toks_no_value": [
            "where",
            "template_type_code",
            "=",
            "\"pp\"",
            "or",
            "template_type_code",
            "=",
            "\"ppt\""
        ],
        "question": "Keep the records that template type code is \"pp\" or template type code is \"ppt\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "is",
            "\"pp\"",
            "or",
            "template",
            "type",
            "code",
            "is",
            "\"ppt\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"PP\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"PPT\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
        "original_question": "Return the ids of templates that have the code PP or PPT.",
        "instance_id": 543
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from templates",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "question": "Get the number of templates",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "original_question": "How many templates have template type code CV?",
        "instance_id": 544
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where template_type_code = \"cv\"",
        "query_toks": [
            "where",
            "template_type_code",
            "=",
            "\"cv\""
        ],
        "query_toks_no_value": [
            "where",
            "template_type_code",
            "=",
            "\"cv\""
        ],
        "question": "Keep the records that template type code is \"cv\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "is",
            "\"cv\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"CV\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "original_question": "How many templates have template type code CV?",
        "instance_id": 545
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from templates",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "question": "Get the number of templates",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "original_question": "Count the number of templates of the type CV.",
        "instance_id": 546
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where template_type_code = \"cv\"",
        "query_toks": [
            "where",
            "template_type_code",
            "=",
            "\"cv\""
        ],
        "query_toks_no_value": [
            "where",
            "template_type_code",
            "=",
            "\"cv\""
        ],
        "question": "Keep the records that template type code is \"cv\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "is",
            "\"cv\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"CV\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
        "original_question": "Count the number of templates of the type CV.",
        "instance_id": 547
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select version_number , template_type_code from templates",
        "query_toks": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get version number and template type code of templates",
        "question_toks": [
            "Get",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "original_question": "What is the version number and template type code for the template with version number later than 5?",
        "instance_id": 548
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where version_number > 5",
        "query_toks": [
            "where",
            "version_number",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "where",
            "version_number",
            ">",
            "value"
        ],
        "question": "Keep the records that version number is greater than 5",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "version",
            "number",
            "is",
            "greater",
            "than",
            "5"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "original_question": "What is the version number and template type code for the template with version number later than 5?",
        "instance_id": 549
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select version_number , template_type_code from templates",
        "query_toks": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get version number and template type code of templates",
        "question_toks": [
            "Get",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "original_question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "instance_id": 550
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where version_number > 5",
        "query_toks": [
            "where",
            "version_number",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "where",
            "version_number",
            ">",
            "value"
        ],
        "question": "Keep the records that version number is greater than 5",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "version",
            "number",
            "is",
            "greater",
            "than",
            "5"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
        "original_question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "instance_id": 551
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code , count ( * ) from templates",
        "query_toks": [
            "select",
            "template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "question": "Get the number and template type code of templates",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "original_question": "Show all template type codes and number of templates for each.",
        "instance_id": 552
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_type_code",
        "query_toks": [
            "group",
            "by",
            "template_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_type_code"
        ],
        "question": "Group the records based on template type code",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "original_question": "Show all template type codes and number of templates for each.",
        "instance_id": 553
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code , count ( * ) from templates",
        "query_toks": [
            "select",
            "template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates"
        ],
        "question": "Get the number and template type code of templates",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "original_question": "What are the different template type codes, and how many templates correspond to each?",
        "instance_id": 554
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_type_code",
        "query_toks": [
            "group",
            "by",
            "template_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_type_code"
        ],
        "question": "Group the records based on template type code",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
        "original_question": "What are the different template type codes, and how many templates correspond to each?",
        "instance_id": 555
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code from templates",
        "query_toks": [
            "select",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get template type code of templates",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which template type code has most number of templates?",
        "instance_id": 556
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_type_code",
        "query_toks": [
            "group",
            "by",
            "template_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_type_code"
        ],
        "question": "Group the records based on template type code",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which template type code has most number of templates?",
        "instance_id": 557
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which template type code has most number of templates?",
        "instance_id": 558
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code from templates",
        "query_toks": [
            "select",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get template type code of templates",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the type code of the template type that the most templates belong to.",
        "instance_id": 559
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_type_code",
        "query_toks": [
            "group",
            "by",
            "template_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_type_code"
        ],
        "question": "Group the records based on template type code",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the type code of the template type that the most templates belong to.",
        "instance_id": 560
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the type code of the template type that the most templates belong to.",
        "instance_id": 561
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code from templates",
        "query_toks": [
            "select",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get template type code of templates",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "original_question": "Show all template type codes with less than three templates.",
        "instance_id": 562
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_type_code having count ( * ) < 3",
        "query_toks": [
            "group",
            "by",
            "template_type_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "3"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_type_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "value"
        ],
        "question": "Group the records based on template type code that the number is less than 3",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "original_question": "Show all template type codes with less than three templates.",
        "instance_id": 563
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code from templates",
        "query_toks": [
            "select",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get template type code of templates",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "original_question": "What are the codes of template types that have fewer than 3 templates?",
        "instance_id": 564
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by template_type_code having count ( * ) < 3",
        "query_toks": [
            "group",
            "by",
            "template_type_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "3"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "template_type_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<",
            "value"
        ],
        "question": "Group the records based on template type code that the number is less than 3",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
        "original_question": "What are the codes of template types that have fewer than 3 templates?",
        "instance_id": 565
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select min ( version_number ) , template_type_code from templates",
        "query_toks": [
            "select",
            "min",
            "(",
            "version_number",
            ")",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "version_number",
            ")",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get the minimum value of version number and template type code of templates",
        "question_toks": [
            "Get",
            "the",
            "minimum",
            "value",
            "of",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "original_question": "What the smallest version number and its template type code?",
        "instance_id": 566
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select min ( version_number ) , template_type_code from templates",
        "query_toks": [
            "select",
            "min",
            "(",
            "version_number",
            ")",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "version_number",
            ")",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Get the minimum value of version number and template type code of templates",
        "question_toks": [
            "Get",
            "the",
            "minimum",
            "value",
            "of",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
        "original_question": "Return the lowest version number, along with its corresponding template type code.",
        "instance_id": 567
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id",
        "query_toks": [
            "select",
            "templates.template_type_code",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "templates.template_type_code",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "question": "Get template type code of templates that has documents",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "original_question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "instance_id": 568
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where documents.document_name = \"data base\"",
        "query_toks": [
            "where",
            "documents.document_name",
            "=",
            "\"data",
            "base\""
        ],
        "query_toks_no_value": [
            "where",
            "documents.document_name",
            "=",
            "\"data",
            "base\""
        ],
        "question": "Keep the records that document name of documents is \"data base\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "of",
            "documents",
            "is",
            "\"data",
            "base\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Data base\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "original_question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "instance_id": 569
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id",
        "query_toks": [
            "select",
            "templates.template_type_code",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "templates.template_type_code",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "question": "Get template type code of templates that has documents",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "original_question": "Return the template type code of the template that is used by a document named Data base.",
        "instance_id": 570
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where documents.document_name = \"data base\"",
        "query_toks": [
            "where",
            "documents.document_name",
            "=",
            "\"data",
            "base\""
        ],
        "query_toks_no_value": [
            "where",
            "documents.document_name",
            "=",
            "\"data",
            "base\""
        ],
        "question": "Keep the records that document name of documents is \"data base\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "of",
            "documents",
            "is",
            "\"data",
            "base\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Data base\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
        "original_question": "Return the template type code of the template that is used by a document named Data base.",
        "instance_id": 571
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id",
        "query_toks": [
            "select",
            "documents.document_name",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "documents.document_name",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "question": "Get document name of templates that has documents",
        "question_toks": [
            "Get",
            "document",
            "name",
            "of",
            "templates",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "original_question": "Show all document names using templates with template type code BK.",
        "instance_id": 572
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where templates.template_type_code = \"bk\"",
        "query_toks": [
            "where",
            "templates.template_type_code",
            "=",
            "\"bk\""
        ],
        "query_toks_no_value": [
            "where",
            "templates.template_type_code",
            "=",
            "\"bk\""
        ],
        "question": "Keep the records that template type code of templates is \"bk\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "is",
            "\"bk\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"BK\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "original_question": "Show all document names using templates with template type code BK.",
        "instance_id": 573
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select documents.document_name from templates join documents on templates.template_id = documents.template_id",
        "query_toks": [
            "select",
            "documents.document_name",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "documents.document_name",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "question": "Get document name of templates that has documents",
        "question_toks": [
            "Get",
            "document",
            "name",
            "of",
            "templates",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "original_question": "What are the names of documents that use templates with the code BK?",
        "instance_id": 574
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where templates.template_type_code = \"bk\"",
        "query_toks": [
            "where",
            "templates.template_type_code",
            "=",
            "\"bk\""
        ],
        "query_toks_no_value": [
            "where",
            "templates.template_type_code",
            "=",
            "\"bk\""
        ],
        "question": "Keep the records that template type code of templates is \"bk\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "is",
            "\"bk\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"BK\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
        "original_question": "What are the names of documents that use templates with the code BK?",
        "instance_id": 575
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id",
        "query_toks": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "question": "Get the number and template type code of templates that has documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "original_question": "Show all template type codes and the number of documents using each type.",
        "instance_id": 576
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by templates.template_type_code",
        "query_toks": [
            "group",
            "by",
            "templates.template_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "templates.template_type_code"
        ],
        "question": "Group the records based on template type code of templates",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "original_question": "Show all template type codes and the number of documents using each type.",
        "instance_id": 577
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code , count ( * ) from templates join documents on templates.template_id = documents.template_id",
        "query_toks": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "templates.template_type_code",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "question": "Get the number and template type code of templates that has documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "original_question": "What are the different template type codes, and how many documents use each type?",
        "instance_id": 578
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by templates.template_type_code",
        "query_toks": [
            "group",
            "by",
            "templates.template_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "templates.template_type_code"
        ],
        "question": "Group the records based on template type code of templates",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
        "original_question": "What are the different template type codes, and how many documents use each type?",
        "instance_id": 579
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id",
        "query_toks": [
            "select",
            "templates.template_type_code",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "templates.template_type_code",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "question": "Get template type code of templates that has documents",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which template type code is used by most number of documents?",
        "instance_id": 580
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by templates.template_type_code",
        "query_toks": [
            "group",
            "by",
            "templates.template_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "templates.template_type_code"
        ],
        "question": "Group the records based on template type code of templates",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which template type code is used by most number of documents?",
        "instance_id": 581
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which template type code is used by most number of documents?",
        "instance_id": 582
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_type_code from templates join documents on templates.template_id = documents.template_id",
        "query_toks": [
            "select",
            "templates.template_type_code",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "query_toks_no_value": [
            "select",
            "templates.template_type_code",
            "from",
            "templates",
            "join",
            "documents",
            "on",
            "templates.template_id",
            "=",
            "documents.template_id"
        ],
        "question": "Get template type code of templates that has documents",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "templates",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the code of the template type that is most commonly used in documents.",
        "instance_id": 583
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by templates.template_type_code",
        "query_toks": [
            "group",
            "by",
            "templates.template_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "templates.template_type_code"
        ],
        "question": "Group the records based on template type code of templates",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "template",
            "type",
            "code",
            "of",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the code of the template type that is most commonly used in documents.",
        "instance_id": 584
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the code of the template type that is most commonly used in documents.",
        "instance_id": 585
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code , template_type_description from ref_template_types",
        "query_toks": [
            "select",
            "template_type_code",
            ",",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            ",",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "question": "Get template type code and template type description of ref template types",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "and",
            "template",
            "type",
            "description",
            "of",
            "ref",
            "template",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "original_question": "Show all template type codes and descriptions.",
        "instance_id": 586
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code , template_type_description from ref_template_types",
        "query_toks": [
            "select",
            "template_type_code",
            ",",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            ",",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "question": "Get template type code and template type description of ref template types",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "and",
            "template",
            "type",
            "description",
            "of",
            "ref",
            "template",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
        "original_question": "What are the type codes and descriptions for all template types?",
        "instance_id": 587
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_description from ref_template_types",
        "query_toks": [
            "select",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "question": "Get template type description of ref template types",
        "question_toks": [
            "Get",
            "template",
            "type",
            "description",
            "of",
            "ref",
            "template",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "original_question": "What is the template type descriptions for template type code \"AD\".",
        "instance_id": 588
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where template_type_code = \"ad\"",
        "query_toks": [
            "where",
            "template_type_code",
            "=",
            "\"ad\""
        ],
        "query_toks_no_value": [
            "where",
            "template_type_code",
            "=",
            "\"ad\""
        ],
        "question": "Keep the records that template type code is \"ad\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "is",
            "\"ad\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "\"AD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "original_question": "What is the template type descriptions for template type code \"AD\".",
        "instance_id": 589
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_description from ref_template_types",
        "query_toks": [
            "select",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_description",
            "from",
            "ref_template_types"
        ],
        "question": "Get template type description of ref template types",
        "question_toks": [
            "Get",
            "template",
            "type",
            "description",
            "of",
            "ref",
            "template",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "original_question": "Return the template type description of the template type with the code AD.",
        "instance_id": 590
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where template_type_code = \"ad\"",
        "query_toks": [
            "where",
            "template_type_code",
            "=",
            "\"ad\""
        ],
        "query_toks_no_value": [
            "where",
            "template_type_code",
            "=",
            "\"ad\""
        ],
        "question": "Keep the records that template type code is \"ad\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "code",
            "is",
            "\"ad\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "\"AD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
        "original_question": "Return the template type description of the template type with the code AD.",
        "instance_id": 591
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code from ref_template_types",
        "query_toks": [
            "select",
            "template_type_code",
            "from",
            "ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "ref_template_types"
        ],
        "question": "Get template type code of ref template types",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "ref",
            "template",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "original_question": "What is the template type code for template type description \"Book\".",
        "instance_id": 592
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where template_type_description = \"book\"",
        "query_toks": [
            "where",
            "template_type_description",
            "=",
            "\"book\""
        ],
        "query_toks_no_value": [
            "where",
            "template_type_description",
            "=",
            "\"book\""
        ],
        "question": "Keep the records that template type description is \"book\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "description",
            "is",
            "\"book\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Book\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "original_question": "What is the template type code for template type description \"Book\".",
        "instance_id": 593
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select template_type_code from ref_template_types",
        "query_toks": [
            "select",
            "template_type_code",
            "from",
            "ref_template_types"
        ],
        "query_toks_no_value": [
            "select",
            "template_type_code",
            "from",
            "ref_template_types"
        ],
        "question": "Get template type code of ref template types",
        "question_toks": [
            "Get",
            "template",
            "type",
            "code",
            "of",
            "ref",
            "template",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "original_question": "Return the type code of the template type with the description \"Book\".",
        "instance_id": 594
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where template_type_description = \"book\"",
        "query_toks": [
            "where",
            "template_type_description",
            "=",
            "\"book\""
        ],
        "query_toks_no_value": [
            "where",
            "template_type_description",
            "=",
            "\"book\""
        ],
        "question": "Keep the records that template type description is \"book\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "description",
            "is",
            "\"book\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Book\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
        "original_question": "Return the type code of the template type with the description \"Book\".",
        "instance_id": 595
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents",
        "query_toks": [
            "select",
            "distinct",
            "ref_template_types.template_type_description",
            "from",
            "ref_template_types",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates.template_type_code",
            "join",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "ref_template_types.template_type_description",
            "from",
            "ref_template_types",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates.template_type_code",
            "join",
            "documents"
        ],
        "question": "Get distinct and template type description of ref template types that has templates and documents",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "template",
            "type",
            "description",
            "of",
            "ref",
            "template",
            "types",
            "that",
            "has",
            "templates",
            "and",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "original_question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "instance_id": 596
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents",
        "query_toks": [
            "select",
            "distinct",
            "ref_template_types.template_type_description",
            "from",
            "ref_template_types",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates.template_type_code",
            "join",
            "documents"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "ref_template_types.template_type_description",
            "from",
            "ref_template_types",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates.template_type_code",
            "join",
            "documents"
        ],
        "question": "Get distinct and template type description of ref template types that has templates and documents",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "template",
            "type",
            "description",
            "of",
            "ref",
            "template",
            "types",
            "that",
            "has",
            "templates",
            "and",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
        "original_question": "Return the different descriptions for templates that have been used in a document.",
        "instance_id": 597
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code",
        "query_toks": [
            "select",
            "templates.template_id",
            "from",
            "ref_template_types",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates.template_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "templates.template_id",
            "from",
            "ref_template_types",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates.template_type_code"
        ],
        "question": "Get template id of ref template types that has templates",
        "question_toks": [
            "Get",
            "template",
            "id",
            "of",
            "ref",
            "template",
            "types",
            "that",
            "has",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "original_question": "What are the template ids with template type description \"Presentation\".",
        "instance_id": 598
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where ref_template_types.template_type_description = \"presentation\"",
        "query_toks": [
            "where",
            "ref_template_types.template_type_description",
            "=",
            "\"presentation\""
        ],
        "query_toks_no_value": [
            "where",
            "ref_template_types.template_type_description",
            "=",
            "\"presentation\""
        ],
        "question": "Keep the records that template type description of ref template types is \"presentation\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "description",
            "of",
            "ref",
            "template",
            "types",
            "is",
            "\"presentation\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Presentation\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "original_question": "What are the template ids with template type description \"Presentation\".",
        "instance_id": 599
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select templates.template_id from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code",
        "query_toks": [
            "select",
            "templates.template_id",
            "from",
            "ref_template_types",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates.template_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "templates.template_id",
            "from",
            "ref_template_types",
            "join",
            "templates",
            "on",
            "ref_template_types.template_type_code",
            "=",
            "templates.template_type_code"
        ],
        "question": "Get template id of ref template types that has templates",
        "question_toks": [
            "Get",
            "template",
            "id",
            "of",
            "ref",
            "template",
            "types",
            "that",
            "has",
            "templates"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "original_question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "instance_id": 600
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where ref_template_types.template_type_description = \"presentation\"",
        "query_toks": [
            "where",
            "ref_template_types.template_type_description",
            "=",
            "\"presentation\""
        ],
        "query_toks_no_value": [
            "where",
            "ref_template_types.template_type_description",
            "=",
            "\"presentation\""
        ],
        "question": "Keep the records that template type description of ref template types is \"presentation\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "template",
            "type",
            "description",
            "of",
            "ref",
            "template",
            "types",
            "is",
            "\"presentation\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Presentation\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
        "original_question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "instance_id": 601
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from paragraphs",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "question": "Get the number of paragraphs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Paragraphs",
        "original_question": "How many paragraphs in total?",
        "instance_id": 602
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from paragraphs",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "question": "Get the number of paragraphs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Paragraphs",
        "original_question": "Count the number of paragraphs.",
        "instance_id": 603
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get the number of paragraphs that has documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "original_question": "How many paragraphs for the document with name 'Summer Show'?",
        "instance_id": 604
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where documents.document_name = \"summer show\"",
        "query_toks": [
            "where",
            "documents.document_name",
            "=",
            "\"summer",
            "show\""
        ],
        "query_toks_no_value": [
            "where",
            "documents.document_name",
            "=",
            "\"summer",
            "show\""
        ],
        "question": "Keep the records that document name of documents is \"summer show\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "of",
            "documents",
            "is",
            "\"summer",
            "show\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Summer Show\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "original_question": "How many paragraphs for the document with name 'Summer Show'?",
        "instance_id": 605
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get the number of paragraphs that has documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "original_question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "instance_id": 606
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where documents.document_name = \"summer show\"",
        "query_toks": [
            "where",
            "documents.document_name",
            "=",
            "\"summer",
            "show\""
        ],
        "query_toks_no_value": [
            "where",
            "documents.document_name",
            "=",
            "\"summer",
            "show\""
        ],
        "question": "Keep the records that document name of documents is \"summer show\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "of",
            "documents",
            "is",
            "\"summer",
            "show\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Summer Show\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
        "original_question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "instance_id": 607
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select other_details from paragraphs",
        "query_toks": [
            "select",
            "other_details",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "other_details",
            "from",
            "paragraphs"
        ],
        "question": "Get other details of paragraphs",
        "question_toks": [
            "Get",
            "other",
            "details",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "original_question": "Show paragraph details for paragraph with text 'Korea ' .",
        "instance_id": 608
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where paragraph_text like \"korea\"",
        "query_toks": [
            "where",
            "paragraph_text",
            "like",
            "\"korea\""
        ],
        "query_toks_no_value": [
            "where",
            "paragraph_text",
            "like",
            "\"korea\""
        ],
        "question": "Keep the records that paragraph text is in the form of \"korea\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "paragraph",
            "text",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"korea\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "\"korea\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "original_question": "Show paragraph details for paragraph with text 'Korea ' .",
        "instance_id": 609
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select other_details from paragraphs",
        "query_toks": [
            "select",
            "other_details",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "other_details",
            "from",
            "paragraphs"
        ],
        "question": "Get other details of paragraphs",
        "question_toks": [
            "Get",
            "other",
            "details",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "original_question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "instance_id": 610
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where paragraph_text like \"korea\"",
        "query_toks": [
            "where",
            "paragraph_text",
            "like",
            "\"korea\""
        ],
        "query_toks_no_value": [
            "where",
            "paragraph_text",
            "like",
            "\"korea\""
        ],
        "question": "Keep the records that paragraph text is in the form of \"korea\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "paragraph",
            "text",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"korea\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "\"korea\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select other_details from paragraphs where paragraph_text like 'korea'",
        "original_question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "instance_id": 611
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "paragraphs.paragraph_text",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "paragraphs.paragraph_text",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get paragraph id and paragraph text of paragraphs that has documents",
        "question_toks": [
            "Get",
            "paragraph",
            "id",
            "and",
            "paragraph",
            "text",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "original_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "instance_id": 612
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where documents.document_name = \"welcome to ny\"",
        "query_toks": [
            "where",
            "documents.document_name",
            "=",
            "\"welcome",
            "to",
            "ny\""
        ],
        "query_toks_no_value": [
            "where",
            "documents.document_name",
            "=",
            "\"welcome",
            "to",
            "ny\""
        ],
        "question": "Keep the records that document name of documents is \"welcome to ny\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "of",
            "documents",
            "is",
            "\"welcome",
            "to",
            "ny\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Welcome to NY\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "original_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "instance_id": 613
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_id , paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "paragraphs.paragraph_text",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "paragraphs.paragraph_id",
            ",",
            "paragraphs.paragraph_text",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get paragraph id and paragraph text of paragraphs that has documents",
        "question_toks": [
            "Get",
            "paragraph",
            "id",
            "and",
            "paragraph",
            "text",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "original_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "instance_id": 614
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where documents.document_name = \"welcome to ny\"",
        "query_toks": [
            "where",
            "documents.document_name",
            "=",
            "\"welcome",
            "to",
            "ny\""
        ],
        "query_toks_no_value": [
            "where",
            "documents.document_name",
            "=",
            "\"welcome",
            "to",
            "ny\""
        ],
        "question": "Keep the records that document name of documents is \"welcome to ny\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "of",
            "documents",
            "is",
            "\"welcome",
            "to",
            "ny\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Welcome to NY\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
        "original_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "instance_id": 615
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "paragraphs.paragraph_text",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "paragraphs.paragraph_text",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get paragraph text of paragraphs that has documents",
        "question_toks": [
            "Get",
            "paragraph",
            "text",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "original_question": "Show all paragraph texts for the document \"Customer reviews\".",
        "instance_id": 616
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where documents.document_name = \"customer reviews\"",
        "query_toks": [
            "where",
            "documents.document_name",
            "=",
            "\"customer",
            "reviews\""
        ],
        "query_toks_no_value": [
            "where",
            "documents.document_name",
            "=",
            "\"customer",
            "reviews\""
        ],
        "question": "Keep the records that document name of documents is \"customer reviews\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "of",
            "documents",
            "is",
            "\"customer",
            "reviews\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Customer reviews\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "original_question": "Show all paragraph texts for the document \"Customer reviews\".",
        "instance_id": 617
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "paragraphs.paragraph_text",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "paragraphs.paragraph_text",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get paragraph text of paragraphs that has documents",
        "question_toks": [
            "Get",
            "paragraph",
            "text",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "original_question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "instance_id": 618
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "where documents.document_name = \"customer reviews\"",
        "query_toks": [
            "where",
            "documents.document_name",
            "=",
            "\"customer",
            "reviews\""
        ],
        "query_toks_no_value": [
            "where",
            "documents.document_name",
            "=",
            "\"customer",
            "reviews\""
        ],
        "question": "Keep the records that document name of documents is \"customer reviews\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "document",
            "name",
            "of",
            "documents",
            "is",
            "\"customer",
            "reviews\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Customer reviews\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
        "original_question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "instance_id": 619
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id , count ( * ) from paragraphs",
        "query_toks": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "question": "Get the number and document id of paragraphs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "original_question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "instance_id": 620
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by document_id",
        "query_toks": [
            "group",
            "by",
            "document_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "document_id"
        ],
        "question": "Group the records based on document id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "original_question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "instance_id": 621
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by document_id ",
        "query_toks": [
            "order",
            "by",
            "document_id"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "document_id"
        ],
        "question": "Order these records based on document id",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "document",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "original_question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "instance_id": 622
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id , count ( * ) from paragraphs",
        "query_toks": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs"
        ],
        "question": "Get the number and document id of paragraphs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "original_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "instance_id": 623
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by document_id",
        "query_toks": [
            "group",
            "by",
            "document_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "document_id"
        ],
        "question": "Group the records based on document id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "original_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "instance_id": 624
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by document_id ",
        "query_toks": [
            "order",
            "by",
            "document_id"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "document_id"
        ],
        "question": "Order these records based on document id",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "document",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
        "original_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "instance_id": 625
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get the number and document id and document name of paragraphs that has documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "document",
            "id",
            "and",
            "document",
            "name",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "original_question": "Show all document ids, names and the number of paragraphs in each document.",
        "instance_id": 626
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by paragraphs.document_id",
        "query_toks": [
            "group",
            "by",
            "paragraphs.document_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "paragraphs.document_id"
        ],
        "question": "Group the records based on document id of paragraphs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "original_question": "Show all document ids, names and the number of paragraphs in each document.",
        "instance_id": 627
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id , documents.document_name , count ( * ) from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get the number and document id and document name of paragraphs that has documents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "document",
            "id",
            "and",
            "document",
            "name",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "original_question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "instance_id": 628
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by paragraphs.document_id",
        "query_toks": [
            "group",
            "by",
            "paragraphs.document_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "paragraphs.document_id"
        ],
        "question": "Group the records based on document id of paragraphs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
        "original_question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "instance_id": 629
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id from paragraphs",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "question": "Get document id of paragraphs",
        "question_toks": [
            "Get",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "original_question": "List all document ids with at least two paragraphs.",
        "instance_id": 630
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by document_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on document id that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "original_question": "List all document ids with at least two paragraphs.",
        "instance_id": 631
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id from paragraphs",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "question": "Get document id of paragraphs",
        "question_toks": [
            "Get",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "original_question": "What are the ids of documents that have 2 or more paragraphs?",
        "instance_id": 632
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by document_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on document id that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
        "original_question": "What are the ids of documents that have 2 or more paragraphs?",
        "instance_id": 633
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get document id and document name of paragraphs that has documents",
        "question_toks": [
            "Get",
            "document",
            "id",
            "and",
            "document",
            "name",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the document id and name with greatest number of paragraphs?",
        "instance_id": 634
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by paragraphs.document_id",
        "query_toks": [
            "group",
            "by",
            "paragraphs.document_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "paragraphs.document_id"
        ],
        "question": "Group the records based on document id of paragraphs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the document id and name with greatest number of paragraphs?",
        "instance_id": 635
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the document id and name with greatest number of paragraphs?",
        "instance_id": 636
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select paragraphs.document_id , documents.document_name from paragraphs join documents on paragraphs.document_id = documents.document_id",
        "query_toks": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "query_toks_no_value": [
            "select",
            "paragraphs.document_id",
            ",",
            "documents.document_name",
            "from",
            "paragraphs",
            "join",
            "documents",
            "on",
            "paragraphs.document_id",
            "=",
            "documents.document_id"
        ],
        "question": "Get document id and document name of paragraphs that has documents",
        "question_toks": [
            "Get",
            "document",
            "id",
            "and",
            "document",
            "name",
            "of",
            "paragraphs",
            "that",
            "has",
            "documents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the id and name of the document with the most paragraphs.",
        "instance_id": 637
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by paragraphs.document_id",
        "query_toks": [
            "group",
            "by",
            "paragraphs.document_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "paragraphs.document_id"
        ],
        "question": "Group the records based on document id of paragraphs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the id and name of the document with the most paragraphs.",
        "instance_id": 638
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the id and name of the document with the most paragraphs.",
        "instance_id": 639
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id from paragraphs",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "question": "Get document id of paragraphs",
        "question_toks": [
            "Get",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "What is the document id with least number of paragraphs?",
        "instance_id": 640
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by document_id",
        "query_toks": [
            "group",
            "by",
            "document_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "document_id"
        ],
        "question": "Group the records based on document id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "What is the document id with least number of paragraphs?",
        "instance_id": 641
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) asc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "question": "Order these records based on the number and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "What is the document id with least number of paragraphs?",
        "instance_id": 642
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id from paragraphs",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "question": "Get document id of paragraphs",
        "question_toks": [
            "Get",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Return the id of the document with the fewest paragraphs.",
        "instance_id": 643
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by document_id",
        "query_toks": [
            "group",
            "by",
            "document_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "document_id"
        ],
        "question": "Group the records based on document id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Return the id of the document with the fewest paragraphs.",
        "instance_id": 644
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "order by count ( * ) asc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "question": "Order these records based on the number and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Return the id of the document with the fewest paragraphs.",
        "instance_id": 645
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id from paragraphs",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "question": "Get document id of paragraphs",
        "question_toks": [
            "Get",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "original_question": "What is the document id with 1 to 2 paragraphs?",
        "instance_id": 646
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by document_id having count ( * ) between 1 and 2",
        "query_toks": [
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "1",
            "and",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Group the records based on document id that the number is between 1 and 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id",
            "that",
            "the",
            "number",
            "is",
            "between",
            "1",
            "and",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    2.0
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "original_question": "What is the document id with 1 to 2 paragraphs?",
        "instance_id": 647
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "select document_id from paragraphs",
        "query_toks": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            "from",
            "paragraphs"
        ],
        "question": "Get document id of paragraphs",
        "question_toks": [
            "Get",
            "document",
            "id",
            "of",
            "paragraphs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "original_question": "Give the ids of documents that have between one and two paragraphs.",
        "instance_id": 648
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query": "group by document_id having count ( * ) between 1 and 2",
        "query_toks": [
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "1",
            "and",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "document_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Group the records based on document id that the number is between 1 and 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "document",
            "id",
            "that",
            "the",
            "number",
            "is",
            "between",
            "1",
            "and",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    15,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    2.0
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
        "original_question": "Give the ids of documents that have between one and two paragraphs.",
        "instance_id": 649
    },
    {
        "db_id": "course_teach",
        "query": "select count ( * ) from teacher",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "question": "Get the number of teacher",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM teacher",
        "original_question": "How many teachers are there?",
        "instance_id": 650
    },
    {
        "db_id": "course_teach",
        "query": "select count ( * ) from teacher",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "question": "Get the number of teacher",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM teacher",
        "original_question": "What is the total count of teachers?",
        "instance_id": 651
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "question": "Get name of teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "original_question": "List the names of teachers in ascending order of age.",
        "instance_id": 652
    },
    {
        "db_id": "course_teach",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "original_question": "List the names of teachers in ascending order of age.",
        "instance_id": 653
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "question": "Get name of teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "original_question": "What are the names of the teachers ordered by ascending age?",
        "instance_id": 654
    },
    {
        "db_id": "course_teach",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "original_question": "What are the names of the teachers ordered by ascending age?",
        "instance_id": 655
    },
    {
        "db_id": "course_teach",
        "query": "select age , hometown from teacher",
        "query_toks": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "Get age and hometown of teacher",
        "question_toks": [
            "Get",
            "age",
            "and",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Age ,  Hometown FROM teacher",
        "original_question": "What are the age and hometown of teachers?",
        "instance_id": 656
    },
    {
        "db_id": "course_teach",
        "query": "select age , hometown from teacher",
        "query_toks": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "Get age and hometown of teacher",
        "question_toks": [
            "Get",
            "age",
            "and",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Age ,  Hometown FROM teacher",
        "original_question": "What is the age and hometown of every teacher?",
        "instance_id": 657
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "question": "Get name of teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "original_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "instance_id": 658
    },
    {
        "db_id": "course_teach",
        "query": "where hometown != \"little lever urban district\"",
        "query_toks": [
            "where",
            "hometown",
            "!=",
            "\"little",
            "lever",
            "urban",
            "district\""
        ],
        "query_toks_no_value": [
            "where",
            "hometown",
            "!=",
            "\"little",
            "lever",
            "urban",
            "district\""
        ],
        "question": "Keep the records that hometown is not \"little lever urban district\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "hometown",
            "is",
            "not",
            "\"little",
            "lever",
            "urban",
            "district\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"little lever urban district\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "original_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "instance_id": 659
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "question": "Get name of teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "original_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "instance_id": 660
    },
    {
        "db_id": "course_teach",
        "query": "where hometown != \"little lever urban district\"",
        "query_toks": [
            "where",
            "hometown",
            "!=",
            "\"little",
            "lever",
            "urban",
            "district\""
        ],
        "query_toks_no_value": [
            "where",
            "hometown",
            "!=",
            "\"little",
            "lever",
            "urban",
            "district\""
        ],
        "question": "Keep the records that hometown is not \"little lever urban district\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "hometown",
            "is",
            "not",
            "\"little",
            "lever",
            "urban",
            "district\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"little lever urban district\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select name from teacher where hometown != \"little lever urban district\"",
        "original_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "instance_id": 661
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "question": "Get name of teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "original_question": "Show the name of teachers aged either 32 or 33?",
        "instance_id": 662
    },
    {
        "db_id": "course_teach",
        "query": "where age = 32 or age = 33",
        "query_toks": [
            "where",
            "age",
            "=",
            "32",
            "or",
            "age",
            "=",
            "33"
        ],
        "query_toks_no_value": [
            "where",
            "age",
            "=",
            "value",
            "or",
            "age",
            "=",
            "value"
        ],
        "question": "Keep the records that age is 32 or age is 33",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "is",
            "32",
            "or",
            "age",
            "is",
            "33"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    32.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    33.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "original_question": "Show the name of teachers aged either 32 or 33?",
        "instance_id": 663
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher",
        "query_toks": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "teacher"
        ],
        "question": "Get name of teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "original_question": "What are the names of the teachers who are aged either 32 or 33?",
        "instance_id": 664
    },
    {
        "db_id": "course_teach",
        "query": "where age = 32 or age = 33",
        "query_toks": [
            "where",
            "age",
            "=",
            "32",
            "or",
            "age",
            "=",
            "33"
        ],
        "query_toks_no_value": [
            "where",
            "age",
            "=",
            "value",
            "or",
            "age",
            "=",
            "value"
        ],
        "question": "Keep the records that age is 32 or age is 33",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "is",
            "32",
            "or",
            "age",
            "is",
            "33"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    32.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    33.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
        "original_question": "What are the names of the teachers who are aged either 32 or 33?",
        "instance_id": 665
    },
    {
        "db_id": "course_teach",
        "query": "select hometown from teacher",
        "query_toks": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "Get hometown of teacher",
        "question_toks": [
            "Get",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "original_question": "What is the hometown of the youngest teacher?",
        "instance_id": 666
    },
    {
        "db_id": "course_teach",
        "query": "order by age asc ",
        "query_toks": [
            "order",
            "by",
            "age",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age",
            "asc"
        ],
        "question": "Order these records based on age and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "original_question": "What is the hometown of the youngest teacher?",
        "instance_id": 667
    },
    {
        "db_id": "course_teach",
        "query": "select hometown from teacher",
        "query_toks": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "Get hometown of teacher",
        "question_toks": [
            "Get",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "original_question": "Where is the youngest teacher from?",
        "instance_id": 668
    },
    {
        "db_id": "course_teach",
        "query": "order by age asc ",
        "query_toks": [
            "order",
            "by",
            "age",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age",
            "asc"
        ],
        "question": "Order these records based on age and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
        "original_question": "Where is the youngest teacher from?",
        "instance_id": 669
    },
    {
        "db_id": "course_teach",
        "query": "select hometown , count ( * ) from teacher",
        "query_toks": [
            "select",
            "hometown",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "question": "Get the number and hometown of teacher",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "original_question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "instance_id": 670
    },
    {
        "db_id": "course_teach",
        "query": "group by hometown",
        "query_toks": [
            "group",
            "by",
            "hometown"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hometown"
        ],
        "question": "Group the records based on hometown",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "hometown"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "original_question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "instance_id": 671
    },
    {
        "db_id": "course_teach",
        "query": "select hometown , count ( * ) from teacher",
        "query_toks": [
            "select",
            "hometown",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "teacher"
        ],
        "question": "Get the number and hometown of teacher",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "original_question": "For each hometown, how many teachers are there?",
        "instance_id": 672
    },
    {
        "db_id": "course_teach",
        "query": "group by hometown",
        "query_toks": [
            "group",
            "by",
            "hometown"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hometown"
        ],
        "question": "Group the records based on hometown",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "hometown"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
        "original_question": "For each hometown, how many teachers are there?",
        "instance_id": 673
    },
    {
        "db_id": "course_teach",
        "query": "select hometown from teacher",
        "query_toks": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "Get hometown of teacher",
        "question_toks": [
            "Get",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "List the most common hometown of teachers.",
        "instance_id": 674
    },
    {
        "db_id": "course_teach",
        "query": "group by hometown",
        "query_toks": [
            "group",
            "by",
            "hometown"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hometown"
        ],
        "question": "Group the records based on hometown",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "hometown"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "List the most common hometown of teachers.",
        "instance_id": 675
    },
    {
        "db_id": "course_teach",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "List the most common hometown of teachers.",
        "instance_id": 676
    },
    {
        "db_id": "course_teach",
        "query": "select hometown from teacher",
        "query_toks": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "Get hometown of teacher",
        "question_toks": [
            "Get",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the most commmon hometowns for teachers?",
        "instance_id": 677
    },
    {
        "db_id": "course_teach",
        "query": "group by hometown",
        "query_toks": [
            "group",
            "by",
            "hometown"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hometown"
        ],
        "question": "Group the records based on hometown",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "hometown"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the most commmon hometowns for teachers?",
        "instance_id": 678
    },
    {
        "db_id": "course_teach",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the most commmon hometowns for teachers?",
        "instance_id": 679
    },
    {
        "db_id": "course_teach",
        "query": "select hometown from teacher",
        "query_toks": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "Get hometown of teacher",
        "question_toks": [
            "Get",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "original_question": "Show the hometowns shared by at least two teachers.",
        "instance_id": 680
    },
    {
        "db_id": "course_teach",
        "query": "group by hometown having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on hometown that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "hometown",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "original_question": "Show the hometowns shared by at least two teachers.",
        "instance_id": 681
    },
    {
        "db_id": "course_teach",
        "query": "select hometown from teacher",
        "query_toks": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "Get hometown of teacher",
        "question_toks": [
            "Get",
            "hometown",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "original_question": "What are the towns from which at least two teachers come from?",
        "instance_id": 682
    },
    {
        "db_id": "course_teach",
        "query": "group by hometown having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hometown",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on hometown that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "hometown",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    7,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2",
        "original_question": "What are the towns from which at least two teachers come from?",
        "instance_id": 683
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher",
        "query_toks": [
            "select",
            "teacher.name",
            ",",
            "course.course",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            ",",
            "course.course",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher"
        ],
        "question": "Get name and course of course arrange that has course and teacher",
        "question_toks": [
            "Get",
            "name",
            "and",
            "course",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "course",
            "and",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "original_question": "Show names of teachers and the courses they are arranged to teach.",
        "instance_id": 684
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher",
        "query_toks": [
            "select",
            "teacher.name",
            ",",
            "course.course",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            ",",
            "course.course",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher"
        ],
        "question": "Get name and course of course arrange that has course and teacher",
        "question_toks": [
            "Get",
            "name",
            "and",
            "course",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "course",
            "and",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
        "original_question": "What is the name of each teacher and what course they teach?",
        "instance_id": 685
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id",
        "query_toks": [
            "select",
            "teacher.name",
            ",",
            "course.course",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            ",",
            "course.course",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "question": "Get name and course of course arrange that has course and teacher",
        "question_toks": [
            "Get",
            "name",
            "and",
            "course",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "course",
            "and",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "original_question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "instance_id": 686
    },
    {
        "db_id": "course_teach",
        "query": "order by teacher.name ",
        "query_toks": [
            "order",
            "by",
            "teacher.name"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "teacher.name"
        ],
        "question": "Order these records based on name of teacher",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "original_question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "instance_id": 687
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , course.course from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id",
        "query_toks": [
            "select",
            "teacher.name",
            ",",
            "course.course",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            ",",
            "course.course",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "question": "Get name and course of course arrange that has course and teacher",
        "question_toks": [
            "Get",
            "name",
            "and",
            "course",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "course",
            "and",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "original_question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "instance_id": 688
    },
    {
        "db_id": "course_teach",
        "query": "order by teacher.name ",
        "query_toks": [
            "order",
            "by",
            "teacher.name"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "teacher.name"
        ],
        "question": "Order these records based on name of teacher",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
        "original_question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "instance_id": 689
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id",
        "query_toks": [
            "select",
            "teacher.name",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "question": "Get name of course arrange that has course and teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "course",
            "and",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "original_question": "Show the name of the teacher for the math course.",
        "instance_id": 690
    },
    {
        "db_id": "course_teach",
        "query": "where course.course = \"math\"",
        "query_toks": [
            "where",
            "course.course",
            "=",
            "\"math\""
        ],
        "query_toks_no_value": [
            "where",
            "course.course",
            "=",
            "\"math\""
        ],
        "question": "Keep the records that course of course is \"math\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "course",
            "of",
            "course",
            "is",
            "\"math\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    "\"Math\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "original_question": "Show the name of the teacher for the math course.",
        "instance_id": 691
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id",
        "query_toks": [
            "select",
            "teacher.name",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            "from",
            "course_arrange",
            "join",
            "course",
            "on",
            "course_arrange.course_id",
            "=",
            "course.course_id",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "question": "Get name of course arrange that has course and teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "course",
            "and",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "original_question": "What are the names of the people who teach math courses?",
        "instance_id": 692
    },
    {
        "db_id": "course_teach",
        "query": "where course.course = \"math\"",
        "query_toks": [
            "where",
            "course.course",
            "=",
            "\"math\""
        ],
        "query_toks_no_value": [
            "where",
            "course.course",
            "=",
            "\"math\""
        ],
        "question": "Keep the records that course of course is \"math\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "course",
            "of",
            "course",
            "is",
            "\"math\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    "\"Math\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
        "original_question": "What are the names of the people who teach math courses?",
        "instance_id": 693
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
        "query_toks": [
            "select",
            "teacher.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "question": "Get the number and name of course arrange that has teacher",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "original_question": "Show names of teachers and the number of courses they teach.",
        "instance_id": 694
    },
    {
        "db_id": "course_teach",
        "query": "group by teacher.name",
        "query_toks": [
            "group",
            "by",
            "teacher.name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "teacher.name"
        ],
        "question": "Group the records based on name of teacher",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "original_question": "Show names of teachers and the number of courses they teach.",
        "instance_id": 695
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name , count ( * ) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
        "query_toks": [
            "select",
            "teacher.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "course_arrange",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "question": "Get the number and name of course arrange that has teacher",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "original_question": "What are the names of the teachers and how many courses do they teach?",
        "instance_id": 696
    },
    {
        "db_id": "course_teach",
        "query": "group by teacher.name",
        "query_toks": [
            "group",
            "by",
            "teacher.name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "teacher.name"
        ],
        "question": "Group the records based on name of teacher",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
        "original_question": "What are the names of the teachers and how many courses do they teach?",
        "instance_id": 697
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
        "query_toks": [
            "select",
            "teacher.name",
            "from",
            "course_arrange",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            "from",
            "course_arrange",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "question": "Get name of course arrange that has teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "original_question": "Show names of teachers that teach at least two courses.",
        "instance_id": 698
    },
    {
        "db_id": "course_teach",
        "query": "group by teacher.name having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "teacher.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "teacher.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on name of teacher that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "teacher",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "original_question": "Show names of teachers that teach at least two courses.",
        "instance_id": 699
    },
    {
        "db_id": "course_teach",
        "query": "select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id",
        "query_toks": [
            "select",
            "teacher.name",
            "from",
            "course_arrange",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "query_toks_no_value": [
            "select",
            "teacher.name",
            "from",
            "course_arrange",
            "join",
            "teacher",
            "on",
            "course_arrange.teacher_id",
            "=",
            "teacher.teacher_id"
        ],
        "question": "Get name of course arrange that has teacher",
        "question_toks": [
            "Get",
            "name",
            "of",
            "course",
            "arrange",
            "that",
            "has",
            "teacher"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "original_question": "What are the names of the teachers who teach at least two courses?",
        "instance_id": 700
    },
    {
        "db_id": "course_teach",
        "query": "group by teacher.name having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "teacher.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "teacher.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on name of teacher that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "teacher",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "original_question": "What are the names of the teachers who teach at least two courses?",
        "instance_id": 701
    },
    {
        "db_id": "museum_visit",
        "query": "select count ( * ) from visitor",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "visitor"
        ],
        "question": "Get the number of visitor",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "visitor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM visitor WHERE age  <  30",
        "original_question": "How many visitors below age 30 are there?",
        "instance_id": 702
    },
    {
        "db_id": "museum_visit",
        "query": "where age < 30",
        "query_toks": [
            "where",
            "age",
            "<",
            "30"
        ],
        "query_toks_no_value": [
            "where",
            "age",
            "<",
            "value"
        ],
        "question": "Keep the records that age is less than 30",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "age",
            "is",
            "less",
            "than",
            "30"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    30.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM visitor WHERE age  <  30",
        "original_question": "How many visitors below age 30 are there?",
        "instance_id": 703
    },
    {
        "db_id": "museum_visit",
        "query": "select name from visitor",
        "query_toks": [
            "select",
            "name",
            "from",
            "visitor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "visitor"
        ],
        "question": "Get name of visitor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "visitor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "original_question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "instance_id": 704
    },
    {
        "db_id": "museum_visit",
        "query": "where level_of_membership > 4 ",
        "query_toks": [
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "level_of_membership",
            ">",
            "value"
        ],
        "question": "Keep the records that level of membership is greater than 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "level",
            "of",
            "membership",
            "is",
            "greater",
            "than",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "original_question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "instance_id": 705
    },
    {
        "db_id": "museum_visit",
        "query": "order by level_of_membership ",
        "query_toks": [
            "order",
            "by",
            "level_of_membership"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "level_of_membership"
        ],
        "question": "Order these records based on level of membership",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "level",
            "of",
            "membership"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
        "original_question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "instance_id": 706
    },
    {
        "db_id": "museum_visit",
        "query": "select avg ( age ) from visitor",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "visitor"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "visitor"
        ],
        "question": "Get the average value of age of visitor",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "age",
            "of",
            "visitor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "original_question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "instance_id": 707
    },
    {
        "db_id": "museum_visit",
        "query": "where level_of_membership >= 4",
        "query_toks": [
            "where",
            "level_of_membership",
            ">=",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "level_of_membership",
            ">=",
            "value"
        ],
        "question": "Keep the records that level of membership is greater than or equal to 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "level",
            "of",
            "membership",
            "is",
            "greater",
            "than",
            "or",
            "equal",
            "to",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    6,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
        "original_question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "instance_id": 708
    },
    {
        "db_id": "museum_visit",
        "query": "select name , level_of_membership from visitor",
        "query_toks": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor"
        ],
        "question": "Get name and level of membership of visitor",
        "question_toks": [
            "Get",
            "name",
            "and",
            "level",
            "of",
            "membership",
            "of",
            "visitor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "original_question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "instance_id": 709
    },
    {
        "db_id": "museum_visit",
        "query": "where level_of_membership > 4 ",
        "query_toks": [
            "where",
            "level_of_membership",
            ">",
            "4"
        ],
        "query_toks_no_value": [
            "where",
            "level_of_membership",
            ">",
            "value"
        ],
        "question": "Keep the records that level of membership is greater than 4",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "level",
            "of",
            "membership",
            "is",
            "greater",
            "than",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "original_question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "instance_id": 710
    },
    {
        "db_id": "museum_visit",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
        "original_question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "instance_id": 711
    },
    {
        "db_id": "museum_visit",
        "query": "select museum_id , name from museum",
        "query_toks": [
            "select",
            "museum_id",
            ",",
            "name",
            "from",
            "museum"
        ],
        "query_toks_no_value": [
            "select",
            "museum_id",
            ",",
            "name",
            "from",
            "museum"
        ],
        "question": "Get museum id and name of museum",
        "question_toks": [
            "Get",
            "museum",
            "id",
            "and",
            "name",
            "of",
            "museum"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "original_question": "Find the id and name of the museum that has the most staff members?",
        "instance_id": 712
    },
    {
        "db_id": "museum_visit",
        "query": "order by num_of_staff desc ",
        "query_toks": [
            "order",
            "by",
            "num_of_staff",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "num_of_staff",
            "desc"
        ],
        "question": "Order these records based on num of staff and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "num",
            "of",
            "staff",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
        "original_question": "Find the id and name of the museum that has the most staff members?",
        "instance_id": 713
    },
    {
        "db_id": "museum_visit",
        "query": "select avg ( num_of_staff ) from museum",
        "query_toks": [
            "select",
            "avg",
            "(",
            "num_of_staff",
            ")",
            "from",
            "museum"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "num_of_staff",
            ")",
            "from",
            "museum"
        ],
        "question": "Get the average value of num of staff of museum",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "num",
            "of",
            "staff",
            "of",
            "museum"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "original_question": "Find the average number of staff working for the museums that were open before 2009.",
        "instance_id": 714
    },
    {
        "db_id": "museum_visit",
        "query": "where open_year < 2009",
        "query_toks": [
            "where",
            "open_year",
            "<",
            "2009"
        ],
        "query_toks_no_value": [
            "where",
            "open_year",
            "<",
            "value"
        ],
        "question": "Keep the records that open year is less than 2009",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "open",
            "year",
            "is",
            "less",
            "than",
            "2009"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    2009.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
        "original_question": "Find the average number of staff working for the museums that were open before 2009.",
        "instance_id": 715
    },
    {
        "db_id": "museum_visit",
        "query": "select num_of_staff , open_year from museum",
        "query_toks": [
            "select",
            "num_of_staff",
            ",",
            "open_year",
            "from",
            "museum"
        ],
        "query_toks_no_value": [
            "select",
            "num_of_staff",
            ",",
            "open_year",
            "from",
            "museum"
        ],
        "question": "Get num of staff and open year of museum",
        "question_toks": [
            "Get",
            "num",
            "of",
            "staff",
            "and",
            "open",
            "year",
            "of",
            "museum"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "instance_id": 716
    },
    {
        "db_id": "museum_visit",
        "query": "where name = \"plaza museum\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"plaza",
            "museum\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"plaza",
            "museum\""
        ],
        "question": "Keep the records that name is \"plaza museum\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"plaza",
            "museum\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Plaza Museum\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
        "original_question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "instance_id": 717
    },
    {
        "db_id": "museum_visit",
        "query": "select visitor.id , visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id",
        "query_toks": [
            "select",
            "visitor.id",
            ",",
            "visitor.name",
            ",",
            "visitor.age",
            "from",
            "visitor",
            "join",
            "visit",
            "on",
            "visitor.id",
            "=",
            "visit.visitor_id"
        ],
        "query_toks_no_value": [
            "select",
            "visitor.id",
            ",",
            "visitor.name",
            ",",
            "visitor.age",
            "from",
            "visitor",
            "join",
            "visit",
            "on",
            "visitor.id",
            "=",
            "visit.visitor_id"
        ],
        "question": "Get id and name and age of visitor that has visit",
        "question_toks": [
            "Get",
            "id",
            "and",
            "name",
            "and",
            "age",
            "of",
            "visitor",
            "that",
            "has",
            "visit"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "original_question": "find the id, name and age for visitors who visited some museums more than once.",
        "instance_id": 718
    },
    {
        "db_id": "museum_visit",
        "query": "group by visitor.id having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "visitor.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "visitor.id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on id of visitor that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "visitor",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
        "original_question": "find the id, name and age for visitors who visited some museums more than once.",
        "instance_id": 719
    },
    {
        "db_id": "museum_visit",
        "query": "select visit.visitor_id , visitor.name , visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id",
        "query_toks": [
            "select",
            "visit.visitor_id",
            ",",
            "visitor.name",
            ",",
            "visitor.level_of_membership",
            "from",
            "visitor",
            "join",
            "visit",
            "on",
            "visitor.id",
            "=",
            "visit.visitor_id"
        ],
        "query_toks_no_value": [
            "select",
            "visit.visitor_id",
            ",",
            "visitor.name",
            ",",
            "visitor.level_of_membership",
            "from",
            "visitor",
            "join",
            "visit",
            "on",
            "visitor.id",
            "=",
            "visit.visitor_id"
        ],
        "question": "Get visitor id and name and level of membership of visitor that has visit",
        "question_toks": [
            "Get",
            "visitor",
            "id",
            "and",
            "name",
            "and",
            "level",
            "of",
            "membership",
            "of",
            "visitor",
            "that",
            "has",
            "visit"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "original_question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "instance_id": 720
    },
    {
        "db_id": "museum_visit",
        "query": "group by visit.visitor_id",
        "query_toks": [
            "group",
            "by",
            "visit.visitor_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "visit.visitor_id"
        ],
        "question": "Group the records based on visitor id of visit",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "visitor",
            "id",
            "of",
            "visit"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "original_question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "instance_id": 721
    },
    {
        "db_id": "museum_visit",
        "query": "order by sum ( visit.total_spent ) desc ",
        "query_toks": [
            "order",
            "by",
            "sum",
            "(",
            "visit.total_spent",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "sum",
            "(",
            "visit.total_spent",
            ")",
            "desc"
        ],
        "question": "Order these records based on the sum of total spent of visit and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "sum",
            "of",
            "total",
            "spent",
            "of",
            "visit",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
        "original_question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "instance_id": 722
    },
    {
        "db_id": "museum_visit",
        "query": "select visit.museum_id , museum.name from museum join visit on museum.museum_id = visit.museum_id",
        "query_toks": [
            "select",
            "visit.museum_id",
            ",",
            "museum.name",
            "from",
            "museum",
            "join",
            "visit",
            "on",
            "museum.museum_id",
            "=",
            "visit.museum_id"
        ],
        "query_toks_no_value": [
            "select",
            "visit.museum_id",
            ",",
            "museum.name",
            "from",
            "museum",
            "join",
            "visit",
            "on",
            "museum.museum_id",
            "=",
            "visit.museum_id"
        ],
        "question": "Get museum id and name of museum that has visit",
        "question_toks": [
            "Get",
            "museum",
            "id",
            "and",
            "name",
            "of",
            "museum",
            "that",
            "has",
            "visit"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What are the id and name of the museum visited most times?",
        "instance_id": 723
    },
    {
        "db_id": "museum_visit",
        "query": "group by visit.museum_id",
        "query_toks": [
            "group",
            "by",
            "visit.museum_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "visit.museum_id"
        ],
        "question": "Group the records based on museum id of visit",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "museum",
            "id",
            "of",
            "visit"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What are the id and name of the museum visited most times?",
        "instance_id": 724
    },
    {
        "db_id": "museum_visit",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What are the id and name of the museum visited most times?",
        "instance_id": 725
    },
    {
        "db_id": "museum_visit",
        "query": "select visitor.name , visitor.age from visitor join visit on visitor.id = visit.visitor_id",
        "query_toks": [
            "select",
            "visitor.name",
            ",",
            "visitor.age",
            "from",
            "visitor",
            "join",
            "visit",
            "on",
            "visitor.id",
            "=",
            "visit.visitor_id"
        ],
        "query_toks_no_value": [
            "select",
            "visitor.name",
            ",",
            "visitor.age",
            "from",
            "visitor",
            "join",
            "visit",
            "on",
            "visitor.id",
            "=",
            "visit.visitor_id"
        ],
        "question": "Get name and age of visitor that has visit",
        "question_toks": [
            "Get",
            "name",
            "and",
            "age",
            "of",
            "visitor",
            "that",
            "has",
            "visit"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "original_question": "Find the name and age of the visitor who bought the most tickets at once.",
        "instance_id": 726
    },
    {
        "db_id": "museum_visit",
        "query": "order by visit.num_of_ticket desc ",
        "query_toks": [
            "order",
            "by",
            "visit.num_of_ticket",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "visit.num_of_ticket",
            "desc"
        ],
        "question": "Order these records based on num of ticket of visit and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "num",
            "of",
            "ticket",
            "of",
            "visit",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
        "original_question": "Find the name and age of the visitor who bought the most tickets at once.",
        "instance_id": 727
    },
    {
        "db_id": "museum_visit",
        "query": "select avg ( num_of_ticket ) , max ( num_of_ticket ) from visit",
        "query_toks": [
            "select",
            "avg",
            "(",
            "num_of_ticket",
            ")",
            ",",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "num_of_ticket",
            ")",
            ",",
            "max",
            "(",
            "num_of_ticket",
            ")",
            "from",
            "visit"
        ],
        "question": "Get the average value of num of ticket and the maximum value of num of ticket of visit",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "num",
            "of",
            "ticket",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "num",
            "of",
            "ticket",
            "of",
            "visit"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
        "original_question": "What are the average and maximum number of tickets bought in all visits?",
        "instance_id": 728
    },
    {
        "db_id": "museum_visit",
        "query": "select sum ( visit.total_spent ) from visitor join visit on visitor.id = visit.visitor_id",
        "query_toks": [
            "select",
            "sum",
            "(",
            "visit.total_spent",
            ")",
            "from",
            "visitor",
            "join",
            "visit",
            "on",
            "visitor.id",
            "=",
            "visit.visitor_id"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "visit.total_spent",
            ")",
            "from",
            "visitor",
            "join",
            "visit",
            "on",
            "visitor.id",
            "=",
            "visit.visitor_id"
        ],
        "question": "Get the sum of total spent and sum of visitor that has visit",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "total",
            "spent",
            "and",
            "sum",
            "of",
            "visitor",
            "that",
            "has",
            "visit"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "original_question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "instance_id": 729
    },
    {
        "db_id": "museum_visit",
        "query": "where visitor.level_of_membership = 1",
        "query_toks": [
            "where",
            "visitor.level_of_membership",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "where",
            "visitor.level_of_membership",
            "=",
            "value"
        ],
        "question": "Keep the records that level of membership of visitor is 1",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "level",
            "of",
            "membership",
            "of",
            "visitor",
            "is",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
        "original_question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "instance_id": 730
    },
    {
        "db_id": "museum_visit",
        "query": "select count ( * ) from museum",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "museum"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "museum"
        ],
        "question": "Get the number of museum",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "museum"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "original_question": "How many museums were opened after 2013 or before 2008?",
        "instance_id": 731
    },
    {
        "db_id": "museum_visit",
        "query": "where open_year > 2013 or open_year < 2008",
        "query_toks": [
            "where",
            "open_year",
            ">",
            "2013",
            "or",
            "open_year",
            "<",
            "2008"
        ],
        "query_toks_no_value": [
            "where",
            "open_year",
            ">",
            "value",
            "or",
            "open_year",
            "<",
            "value"
        ],
        "question": "Keep the records that open year is greater than 2013 or open year is less than 2008",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "open",
            "year",
            "is",
            "greater",
            "than",
            "2013",
            "or",
            "open",
            "year",
            "is",
            "less",
            "than",
            "2008"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    2013.0,
                    null
                ],
                "or",
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    2008.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
        "original_question": "How many museums were opened after 2013 or before 2008?",
        "instance_id": 732
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) from players",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players"
        ],
        "question": "Get the number of players",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM players",
        "original_question": "Find the total number of players.",
        "instance_id": 733
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) from players",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "players"
        ],
        "question": "Get the number of players",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM players",
        "original_question": "How many players are there?",
        "instance_id": 734
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the number of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM matches",
        "original_question": "Find the total number of matches.",
        "instance_id": 735
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the number of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM matches",
        "original_question": "Count the number of matches.",
        "instance_id": 736
    },
    {
        "db_id": "wta_1",
        "query": "select first_name , birth_date from players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players"
        ],
        "question": "Get first name and birth date of players",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "birth",
            "date",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "original_question": "List the first name and birth date of all players from the country with code USA.",
        "instance_id": 737
    },
    {
        "db_id": "wta_1",
        "query": "where country_code = \"usa\"",
        "query_toks": [
            "where",
            "country_code",
            "=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "country_code",
            "=",
            "\"usa\""
        ],
        "question": "Keep the records that country code is \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "code",
            "is",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "original_question": "List the first name and birth date of all players from the country with code USA.",
        "instance_id": 738
    },
    {
        "db_id": "wta_1",
        "query": "select first_name , birth_date from players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players"
        ],
        "question": "Get first name and birth date of players",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "birth",
            "date",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "original_question": "What are the first names and birth dates of players from the USA?",
        "instance_id": 739
    },
    {
        "db_id": "wta_1",
        "query": "where country_code = \"usa\"",
        "query_toks": [
            "where",
            "country_code",
            "=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "country_code",
            "=",
            "\"usa\""
        ],
        "question": "Keep the records that country code is \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "code",
            "is",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",
        "original_question": "What are the first names and birth dates of players from the USA?",
        "instance_id": 740
    },
    {
        "db_id": "wta_1",
        "query": "select avg ( loser_age ) , avg ( winner_age ) from matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            ",",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            ",",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the average value of loser age and the average value of winner age of matches",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "loser",
            "age",
            "and",
            "the",
            "average",
            "value",
            "of",
            "winner",
            "age",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "original_question": "Find the average age of losers and winners of all matches.",
        "instance_id": 741
    },
    {
        "db_id": "wta_1",
        "query": "select avg ( loser_age ) , avg ( winner_age ) from matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            ",",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "loser_age",
            ")",
            ",",
            "avg",
            "(",
            "winner_age",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the average value of loser age and the average value of winner age of matches",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "loser",
            "age",
            "and",
            "the",
            "average",
            "value",
            "of",
            "winner",
            "age",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "original_question": "What are the average ages of losers and winners across matches?",
        "instance_id": 742
    },
    {
        "db_id": "wta_1",
        "query": "select avg ( winner_rank ) from matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "winner_rank",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "winner_rank",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the average value of winner rank of matches",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "winner",
            "rank",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(winner_rank) FROM matches",
        "original_question": "Find the average rank of winners in all matches.",
        "instance_id": 743
    },
    {
        "db_id": "wta_1",
        "query": "select avg ( winner_rank ) from matches",
        "query_toks": [
            "select",
            "avg",
            "(",
            "winner_rank",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "winner_rank",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the average value of winner rank of matches",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "winner",
            "rank",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(winner_rank) FROM matches",
        "original_question": "What is the average rank for winners in all matches?",
        "instance_id": 744
    },
    {
        "db_id": "wta_1",
        "query": "select min ( loser_rank ) from matches",
        "query_toks": [
            "select",
            "min",
            "(",
            "loser_rank",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "loser_rank",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the minimum value of loser rank of matches",
        "question_toks": [
            "Get",
            "the",
            "minimum",
            "value",
            "of",
            "loser",
            "rank",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT min(loser_rank) FROM matches",
        "original_question": "Find the highest rank of losers in all matches.",
        "instance_id": 745
    },
    {
        "db_id": "wta_1",
        "query": "select min ( loser_rank ) from matches",
        "query_toks": [
            "select",
            "min",
            "(",
            "loser_rank",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "loser_rank",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the minimum value of loser rank of matches",
        "question_toks": [
            "Get",
            "the",
            "minimum",
            "value",
            "of",
            "loser",
            "rank",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT min(loser_rank) FROM matches",
        "original_question": "What is the best rank of losers across all matches?",
        "instance_id": 746
    },
    {
        "db_id": "wta_1",
        "query": "select count ( distinct country_code ) from players",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "country_code",
            ")",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "country_code",
            ")",
            "from",
            "players"
        ],
        "question": "Get the number of distinct country code of players",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT country_code) FROM players",
        "original_question": "find the number of distinct country codes of all players.",
        "instance_id": 747
    },
    {
        "db_id": "wta_1",
        "query": "select count ( distinct country_code ) from players",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "country_code",
            ")",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "country_code",
            ")",
            "from",
            "players"
        ],
        "question": "Get the number of distinct country code of players",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT country_code) FROM players",
        "original_question": "How many distinct countries do players come from?",
        "instance_id": 748
    },
    {
        "db_id": "wta_1",
        "query": "select count ( distinct loser_name ) from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "loser_name",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "loser_name",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the number of distinct loser name of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "loser",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                15,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "original_question": "Find the number of distinct name of losers.",
        "instance_id": 749
    },
    {
        "db_id": "wta_1",
        "query": "select count ( distinct loser_name ) from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "loser_name",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "loser_name",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the number of distinct loser name of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "loser",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                15,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "original_question": "How many different loser names are there?",
        "instance_id": 750
    },
    {
        "db_id": "wta_1",
        "query": "select tourney_name from matches",
        "query_toks": [
            "select",
            "tourney_name",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "tourney_name",
            "from",
            "matches"
        ],
        "question": "Get tourney name of matches",
        "question_toks": [
            "Get",
            "tourney",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "original_question": "Find the name of tourney that has more than 10 matches.",
        "instance_id": 751
    },
    {
        "db_id": "wta_1",
        "query": "group by tourney_name having count ( * ) > 10",
        "query_toks": [
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on tourney name that the number is greater than 10",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "tourney",
            "name",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    27,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "original_question": "Find the name of tourney that has more than 10 matches.",
        "instance_id": 752
    },
    {
        "db_id": "wta_1",
        "query": "select tourney_name from matches",
        "query_toks": [
            "select",
            "tourney_name",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "tourney_name",
            "from",
            "matches"
        ],
        "question": "Get tourney name of matches",
        "question_toks": [
            "Get",
            "tourney",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                27,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "original_question": "What are the names of tournaments that have more than 10 matches?",
        "instance_id": 753
    },
    {
        "db_id": "wta_1",
        "query": "group by tourney_name having count ( * ) > 10",
        "query_toks": [
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "tourney_name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on tourney name that the number is greater than 10",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "tourney",
            "name",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    27,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10",
        "original_question": "What are the names of tournaments that have more than 10 matches?",
        "instance_id": 754
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the number of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "original_question": "List the number of all matches who played in years of 2013 or 2016.",
        "instance_id": 755
    },
    {
        "db_id": "wta_1",
        "query": "where year = 2013 or year = 2016",
        "query_toks": [
            "where",
            "year",
            "=",
            "2013",
            "or",
            "year",
            "=",
            "2016"
        ],
        "query_toks_no_value": [
            "where",
            "year",
            "=",
            "value",
            "or",
            "year",
            "=",
            "value"
        ],
        "question": "Keep the records that year is 2013 or year is 2016",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "is",
            "2013",
            "or",
            "year",
            "is",
            "2016"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    2013.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    2016.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "original_question": "List the number of all matches who played in years of 2013 or 2016.",
        "instance_id": 756
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the number of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "original_question": "How many matches were played in 2013 or 2016?",
        "instance_id": 757
    },
    {
        "db_id": "wta_1",
        "query": "where year = 2013 or year = 2016",
        "query_toks": [
            "where",
            "year",
            "=",
            "2013",
            "or",
            "year",
            "=",
            "2016"
        ],
        "query_toks_no_value": [
            "where",
            "year",
            "=",
            "value",
            "or",
            "year",
            "=",
            "value"
        ],
        "question": "Keep the records that year is 2013 or year is 2016",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "is",
            "2013",
            "or",
            "year",
            "is",
            "2016"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    2013.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    2016.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016",
        "original_question": "How many matches were played in 2013 or 2016?",
        "instance_id": 758
    },
    {
        "db_id": "wta_1",
        "query": "select first_name , country_code from players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players"
        ],
        "question": "Get first name and country code of players",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "original_question": "Find the first name and country code of the oldest player.",
        "instance_id": 759
    },
    {
        "db_id": "wta_1",
        "query": "order by birth_date ",
        "query_toks": [
            "order",
            "by",
            "birth_date"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "birth_date"
        ],
        "question": "Order these records based on birth date",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "birth",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "original_question": "Find the first name and country code of the oldest player.",
        "instance_id": 760
    },
    {
        "db_id": "wta_1",
        "query": "select first_name , country_code from players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players"
        ],
        "question": "Get first name and country code of players",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "original_question": "What is the first name and country code of the oldest player?",
        "instance_id": 761
    },
    {
        "db_id": "wta_1",
        "query": "order by birth_date ",
        "query_toks": [
            "order",
            "by",
            "birth_date"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "birth_date"
        ],
        "question": "Order these records based on birth date",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "birth",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",
        "original_question": "What is the first name and country code of the oldest player?",
        "instance_id": 762
    },
    {
        "db_id": "wta_1",
        "query": "select first_name , last_name from players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "question": "Get first name and last name of players",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "original_question": "List the first and last name of all players in the order of birth date.",
        "instance_id": 763
    },
    {
        "db_id": "wta_1",
        "query": "order by birth_date ",
        "query_toks": [
            "order",
            "by",
            "birth_date"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "birth_date"
        ],
        "question": "Order these records based on birth date",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "birth",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "original_question": "List the first and last name of all players in the order of birth date.",
        "instance_id": 764
    },
    {
        "db_id": "wta_1",
        "query": "select first_name , last_name from players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "question": "Get first name and last name of players",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "original_question": "What are the full names of all players, sorted by birth date?",
        "instance_id": 765
    },
    {
        "db_id": "wta_1",
        "query": "order by birth_date ",
        "query_toks": [
            "order",
            "by",
            "birth_date"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "birth_date"
        ],
        "question": "Order these records based on birth date",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "birth",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date",
        "original_question": "What are the full names of all players, sorted by birth date?",
        "instance_id": 766
    },
    {
        "db_id": "wta_1",
        "query": "select first_name , last_name from players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "question": "Get first name and last name of players",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "instance_id": 767
    },
    {
        "db_id": "wta_1",
        "query": "where hand = \"l\" ",
        "query_toks": [
            "where",
            "hand",
            "=",
            "\"l\""
        ],
        "query_toks_no_value": [
            "where",
            "hand",
            "=",
            "\"l\""
        ],
        "question": "Keep the records that hand is \"l\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "hand",
            "is",
            "\"l\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "instance_id": 768
    },
    {
        "db_id": "wta_1",
        "query": "order by birth_date ",
        "query_toks": [
            "order",
            "by",
            "birth_date"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "birth_date"
        ],
        "question": "Order these records based on birth date",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "birth",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "instance_id": 769
    },
    {
        "db_id": "wta_1",
        "query": "select first_name , last_name from players",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players"
        ],
        "question": "Get first name and last name of players",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_question": "What are the full names of all left handed players, in order of birth date?",
        "instance_id": 770
    },
    {
        "db_id": "wta_1",
        "query": "where hand = \"l\" ",
        "query_toks": [
            "where",
            "hand",
            "=",
            "\"l\""
        ],
        "query_toks_no_value": [
            "where",
            "hand",
            "=",
            "\"l\""
        ],
        "question": "Keep the records that hand is \"l\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "hand",
            "is",
            "\"l\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_question": "What are the full names of all left handed players, in order of birth date?",
        "instance_id": 771
    },
    {
        "db_id": "wta_1",
        "query": "order by birth_date ",
        "query_toks": [
            "order",
            "by",
            "birth_date"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "birth_date"
        ],
        "question": "Order these records based on birth date",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "birth",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",
        "original_question": "What are the full names of all left handed players, in order of birth date?",
        "instance_id": 772
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id",
        "query_toks": [
            "select",
            "players.country_code",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "query_toks_no_value": [
            "select",
            "players.country_code",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "question": "Get country code and first name of players that has rankings",
        "question_toks": [
            "Get",
            "country",
            "code",
            "and",
            "first",
            "name",
            "of",
            "players",
            "that",
            "has",
            "rankings"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "original_question": "Find the first name and country code of the player who did the most number of tours.",
        "instance_id": 773
    },
    {
        "db_id": "wta_1",
        "query": "order by rankings.tours desc ",
        "query_toks": [
            "order",
            "by",
            "rankings.tours",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "rankings.tours",
            "desc"
        ],
        "question": "Order these records based on tours of rankings and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "tours",
            "of",
            "rankings",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "original_question": "Find the first name and country code of the player who did the most number of tours.",
        "instance_id": 774
    },
    {
        "db_id": "wta_1",
        "query": "select players.country_code , players.first_name from players join rankings on players.player_id = rankings.player_id",
        "query_toks": [
            "select",
            "players.country_code",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "query_toks_no_value": [
            "select",
            "players.country_code",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "question": "Get country code and first name of players that has rankings",
        "question_toks": [
            "Get",
            "country",
            "code",
            "and",
            "first",
            "name",
            "of",
            "players",
            "that",
            "has",
            "rankings"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "original_question": "What is the first name and country code of the player with the most tours?",
        "instance_id": 775
    },
    {
        "db_id": "wta_1",
        "query": "order by rankings.tours desc ",
        "query_toks": [
            "order",
            "by",
            "rankings.tours",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "rankings.tours",
            "desc"
        ],
        "question": "Order these records based on tours of rankings and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "tours",
            "of",
            "rankings",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "original_question": "What is the first name and country code of the player with the most tours?",
        "instance_id": 776
    },
    {
        "db_id": "wta_1",
        "query": "select year from matches",
        "query_toks": [
            "select",
            "year",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "matches"
        ],
        "question": "Get year of matches",
        "question_toks": [
            "Get",
            "year",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the year that has the most number of matches.",
        "instance_id": 777
    },
    {
        "db_id": "wta_1",
        "query": "group by year",
        "query_toks": [
            "group",
            "by",
            "year"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "year"
        ],
        "question": "Group the records based on year",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "year"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    38,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the year that has the most number of matches.",
        "instance_id": 778
    },
    {
        "db_id": "wta_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the year that has the most number of matches.",
        "instance_id": 779
    },
    {
        "db_id": "wta_1",
        "query": "select year from matches",
        "query_toks": [
            "select",
            "year",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "year",
            "from",
            "matches"
        ],
        "question": "Get year of matches",
        "question_toks": [
            "Get",
            "year",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which year had the most matches?",
        "instance_id": 780
    },
    {
        "db_id": "wta_1",
        "query": "group by year",
        "query_toks": [
            "group",
            "by",
            "year"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "year"
        ],
        "question": "Group the records based on year",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "year"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    38,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which year had the most matches?",
        "instance_id": 781
    },
    {
        "db_id": "wta_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which year had the most matches?",
        "instance_id": 782
    },
    {
        "db_id": "wta_1",
        "query": "select winner_name , winner_rank_points from matches",
        "query_toks": [
            "select",
            "winner_name",
            ",",
            "winner_rank_points",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "winner_name",
            ",",
            "winner_rank_points",
            "from",
            "matches"
        ],
        "question": "Get winner name and winner rank points of matches",
        "question_toks": [
            "Get",
            "winner",
            "name",
            "and",
            "winner",
            "rank",
            "points",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the name and rank points of the winner who won the most times.",
        "instance_id": 783
    },
    {
        "db_id": "wta_1",
        "query": "group by winner_name",
        "query_toks": [
            "group",
            "by",
            "winner_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "winner_name"
        ],
        "question": "Group the records based on winner name",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "winner",
            "name"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    34,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the name and rank points of the winner who won the most times.",
        "instance_id": 784
    },
    {
        "db_id": "wta_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the name and rank points of the winner who won the most times.",
        "instance_id": 785
    },
    {
        "db_id": "wta_1",
        "query": "select winner_name , winner_rank_points from matches",
        "query_toks": [
            "select",
            "winner_name",
            ",",
            "winner_rank_points",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "winner_name",
            ",",
            "winner_rank_points",
            "from",
            "matches"
        ],
        "question": "Get winner name and winner rank points of matches",
        "question_toks": [
            "Get",
            "winner",
            "name",
            "and",
            "winner",
            "rank",
            "points",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "instance_id": 786
    },
    {
        "db_id": "wta_1",
        "query": "group by winner_name",
        "query_toks": [
            "group",
            "by",
            "winner_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "winner_name"
        ],
        "question": "Group the records based on winner name",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "winner",
            "name"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    34,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "instance_id": 787
    },
    {
        "db_id": "wta_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "instance_id": 788
    },
    {
        "db_id": "wta_1",
        "query": "select winner_name from matches",
        "query_toks": [
            "select",
            "winner_name",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "winner_name",
            "from",
            "matches"
        ],
        "question": "Get winner name of matches",
        "question_toks": [
            "Get",
            "winner",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "instance_id": 789
    },
    {
        "db_id": "wta_1",
        "query": "where tourney_name = \"australian open\" ",
        "query_toks": [
            "where",
            "tourney_name",
            "=",
            "\"australian",
            "open\""
        ],
        "query_toks_no_value": [
            "where",
            "tourney_name",
            "=",
            "\"australian",
            "open\""
        ],
        "question": "Keep the records that tourney name is \"australian open\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "tourney",
            "name",
            "is",
            "\"australian",
            "open\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"Australian Open\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "instance_id": 790
    },
    {
        "db_id": "wta_1",
        "query": "order by winner_rank_points desc ",
        "query_toks": [
            "order",
            "by",
            "winner_rank_points",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "winner_rank_points",
            "desc"
        ],
        "question": "Order these records based on winner rank points and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "winner",
            "rank",
            "points",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "original_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "instance_id": 791
    },
    {
        "db_id": "wta_1",
        "query": "select winner_name from matches",
        "query_toks": [
            "select",
            "winner_name",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "winner_name",
            "from",
            "matches"
        ],
        "question": "Get winner name of matches",
        "question_toks": [
            "Get",
            "winner",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "instance_id": 792
    },
    {
        "db_id": "wta_1",
        "query": "where tourney_name = \"australian open\" ",
        "query_toks": [
            "where",
            "tourney_name",
            "=",
            "\"australian",
            "open\""
        ],
        "query_toks_no_value": [
            "where",
            "tourney_name",
            "=",
            "\"australian",
            "open\""
        ],
        "question": "Keep the records that tourney name is \"australian open\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "tourney",
            "name",
            "is",
            "\"australian",
            "open\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"Australian Open\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "instance_id": 793
    },
    {
        "db_id": "wta_1",
        "query": "order by winner_rank_points desc ",
        "query_toks": [
            "order",
            "by",
            "winner_rank_points",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "winner_rank_points",
            "desc"
        ],
        "question": "Order these records based on winner rank points and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "winner",
            "rank",
            "points",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "original_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "instance_id": 794
    },
    {
        "db_id": "wta_1",
        "query": "select winner_name , loser_name from matches",
        "query_toks": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches"
        ],
        "question": "Get winner name and loser name of matches",
        "question_toks": [
            "Get",
            "winner",
            "name",
            "and",
            "loser",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "original_question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "instance_id": 795
    },
    {
        "db_id": "wta_1",
        "query": "order by minutes desc ",
        "query_toks": [
            "order",
            "by",
            "minutes",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "minutes",
            "desc"
        ],
        "question": "Order these records based on minutes and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "minutes",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "original_question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "instance_id": 796
    },
    {
        "db_id": "wta_1",
        "query": "select winner_name , loser_name from matches",
        "query_toks": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "winner_name",
            ",",
            "loser_name",
            "from",
            "matches"
        ],
        "question": "Get winner name and loser name of matches",
        "question_toks": [
            "Get",
            "winner",
            "name",
            "and",
            "loser",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "original_question": "What are the names of the winner and loser who played in the longest match?",
        "instance_id": 797
    },
    {
        "db_id": "wta_1",
        "query": "order by minutes desc ",
        "query_toks": [
            "order",
            "by",
            "minutes",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "minutes",
            "desc"
        ],
        "question": "Order these records based on minutes and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "minutes",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
        "original_question": "What are the names of the winner and loser who played in the longest match?",
        "instance_id": 798
    },
    {
        "db_id": "wta_1",
        "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id",
        "query_toks": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "question": "Get the average value of ranking and first name of players that has rankings",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "ranking",
            "and",
            "first",
            "name",
            "of",
            "players",
            "that",
            "has",
            "rankings"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                40,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_question": "Find the average ranking for each player and their first name.",
        "instance_id": 799
    },
    {
        "db_id": "wta_1",
        "query": "group by players.first_name",
        "query_toks": [
            "group",
            "by",
            "players.first_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "players.first_name"
        ],
        "question": "Group the records based on first name of players",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "first",
            "name",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_question": "Find the average ranking for each player and their first name.",
        "instance_id": 800
    },
    {
        "db_id": "wta_1",
        "query": "select avg ( ranking ) , players.first_name from players join rankings on players.player_id = rankings.player_id",
        "query_toks": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "ranking",
            ")",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "question": "Get the average value of ranking and first name of players that has rankings",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "ranking",
            "and",
            "first",
            "name",
            "of",
            "players",
            "that",
            "has",
            "rankings"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                40,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_question": "What are the first names of all players, and their average rankings?",
        "instance_id": 801
    },
    {
        "db_id": "wta_1",
        "query": "group by players.first_name",
        "query_toks": [
            "group",
            "by",
            "players.first_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "players.first_name"
        ],
        "question": "Group the records based on first name of players",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "first",
            "name",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_question": "What are the first names of all players, and their average rankings?",
        "instance_id": 802
    },
    {
        "db_id": "wta_1",
        "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id",
        "query_toks": [
            "select",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "question": "Get the sum of ranking points and sum and first name of players that has rankings",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "ranking",
            "points",
            "and",
            "sum",
            "and",
            "first",
            "name",
            "of",
            "players",
            "that",
            "has",
            "rankings"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_question": "Find the total ranking points for each player and their first name.",
        "instance_id": 803
    },
    {
        "db_id": "wta_1",
        "query": "group by players.first_name",
        "query_toks": [
            "group",
            "by",
            "players.first_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "players.first_name"
        ],
        "question": "Group the records based on first name of players",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "first",
            "name",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_question": "Find the total ranking points for each player and their first name.",
        "instance_id": 804
    },
    {
        "db_id": "wta_1",
        "query": "select sum ( ranking_points ) , players.first_name from players join rankings on players.player_id = rankings.player_id",
        "query_toks": [
            "select",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "ranking_points",
            ")",
            ",",
            "players.first_name",
            "from",
            "players",
            "join",
            "rankings",
            "on",
            "players.player_id",
            "=",
            "rankings.player_id"
        ],
        "question": "Get the sum of ranking points and sum and first name of players that has rankings",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "ranking",
            "points",
            "and",
            "sum",
            "and",
            "first",
            "name",
            "of",
            "players",
            "that",
            "has",
            "rankings"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_question": "What are the first names of all players, and their total ranking points?",
        "instance_id": 805
    },
    {
        "db_id": "wta_1",
        "query": "group by players.first_name",
        "query_toks": [
            "group",
            "by",
            "players.first_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "players.first_name"
        ],
        "question": "Group the records based on first name of players",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "first",
            "name",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
        "original_question": "What are the first names of all players, and their total ranking points?",
        "instance_id": 806
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) , country_code from players",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "country_code",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "country_code",
            "from",
            "players"
        ],
        "question": "Get the number and country code of players",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "original_question": "find the number of players for each country.",
        "instance_id": 807
    },
    {
        "db_id": "wta_1",
        "query": "group by country_code",
        "query_toks": [
            "group",
            "by",
            "country_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country_code"
        ],
        "question": "Group the records based on country code",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "code"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "original_question": "find the number of players for each country.",
        "instance_id": 808
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) , country_code from players",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "country_code",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "country_code",
            "from",
            "players"
        ],
        "question": "Get the number and country code of players",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "original_question": "How many players are from each country?",
        "instance_id": 809
    },
    {
        "db_id": "wta_1",
        "query": "group by country_code",
        "query_toks": [
            "group",
            "by",
            "country_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country_code"
        ],
        "question": "Group the records based on country code",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "code"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "original_question": "How many players are from each country?",
        "instance_id": 810
    },
    {
        "db_id": "wta_1",
        "query": "select country_code from players",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "country_code",
            "from",
            "players"
        ],
        "question": "Get country code of players",
        "question_toks": [
            "Get",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "find the code of the country where has the greatest number of players.",
        "instance_id": 811
    },
    {
        "db_id": "wta_1",
        "query": "group by country_code",
        "query_toks": [
            "group",
            "by",
            "country_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country_code"
        ],
        "question": "Group the records based on country code",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "code"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "find the code of the country where has the greatest number of players.",
        "instance_id": 812
    },
    {
        "db_id": "wta_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "find the code of the country where has the greatest number of players.",
        "instance_id": 813
    },
    {
        "db_id": "wta_1",
        "query": "select country_code from players",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "country_code",
            "from",
            "players"
        ],
        "question": "Get country code of players",
        "question_toks": [
            "Get",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the code of the country with the most players?",
        "instance_id": 814
    },
    {
        "db_id": "wta_1",
        "query": "group by country_code",
        "query_toks": [
            "group",
            "by",
            "country_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country_code"
        ],
        "question": "Group the records based on country code",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "code"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the code of the country with the most players?",
        "instance_id": 815
    },
    {
        "db_id": "wta_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the code of the country with the most players?",
        "instance_id": 816
    },
    {
        "db_id": "wta_1",
        "query": "select country_code from players",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "country_code",
            "from",
            "players"
        ],
        "question": "Get country code of players",
        "question_toks": [
            "Get",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "original_question": "Find the codes of countries that have more than 50 players.",
        "instance_id": 817
    },
    {
        "db_id": "wta_1",
        "query": "group by country_code having count ( * ) > 50",
        "query_toks": [
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on country code that the number is greater than 50",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "code",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "50"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    50.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "original_question": "Find the codes of countries that have more than 50 players.",
        "instance_id": 818
    },
    {
        "db_id": "wta_1",
        "query": "select country_code from players",
        "query_toks": [
            "select",
            "country_code",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "country_code",
            "from",
            "players"
        ],
        "question": "Get country code of players",
        "question_toks": [
            "Get",
            "country",
            "code",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "original_question": "What are the codes of countries with more than 50 players?",
        "instance_id": 819
    },
    {
        "db_id": "wta_1",
        "query": "group by country_code having count ( * ) > 50",
        "query_toks": [
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "50"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country_code",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on country code that the number is greater than 50",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "code",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "50"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    50.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50",
        "original_question": "What are the codes of countries with more than 50 players?",
        "instance_id": 820
    },
    {
        "db_id": "wta_1",
        "query": "select sum ( tours ) , ranking_date from rankings",
        "query_toks": [
            "select",
            "sum",
            "(",
            "tours",
            ")",
            ",",
            "ranking_date",
            "from",
            "rankings"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "tours",
            ")",
            ",",
            "ranking_date",
            "from",
            "rankings"
        ],
        "question": "Get the sum of tours and sum and ranking date of rankings",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "tours",
            "and",
            "sum",
            "and",
            "ranking",
            "date",
            "of",
            "rankings"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                39,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "original_question": "Find the total number of tours for each ranking date.",
        "instance_id": 821
    },
    {
        "db_id": "wta_1",
        "query": "group by ranking_date",
        "query_toks": [
            "group",
            "by",
            "ranking_date"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "ranking_date"
        ],
        "question": "Group the records based on ranking date",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "ranking",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    39,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "original_question": "Find the total number of tours for each ranking date.",
        "instance_id": 822
    },
    {
        "db_id": "wta_1",
        "query": "select sum ( tours ) , ranking_date from rankings",
        "query_toks": [
            "select",
            "sum",
            "(",
            "tours",
            ")",
            ",",
            "ranking_date",
            "from",
            "rankings"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "tours",
            ")",
            ",",
            "ranking_date",
            "from",
            "rankings"
        ],
        "question": "Get the sum of tours and sum and ranking date of rankings",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "tours",
            "and",
            "sum",
            "and",
            "ranking",
            "date",
            "of",
            "rankings"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                39,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "original_question": "How many total tours were there for each ranking date?",
        "instance_id": 823
    },
    {
        "db_id": "wta_1",
        "query": "group by ranking_date",
        "query_toks": [
            "group",
            "by",
            "ranking_date"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "ranking_date"
        ],
        "question": "Group the records based on ranking date",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "ranking",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    39,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",
        "original_question": "How many total tours were there for each ranking date?",
        "instance_id": 824
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) , year from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "year",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "year",
            "from",
            "matches"
        ],
        "question": "Get the number and year of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "year",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "original_question": "Find the number of matches happened in each year.",
        "instance_id": 825
    },
    {
        "db_id": "wta_1",
        "query": "group by year",
        "query_toks": [
            "group",
            "by",
            "year"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "year"
        ],
        "question": "Group the records based on year",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "year"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    38,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "original_question": "Find the number of matches happened in each year.",
        "instance_id": 826
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) , year from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "year",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "year",
            "from",
            "matches"
        ],
        "question": "Get the number and year of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "year",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "original_question": "How many matches were played in each year?",
        "instance_id": 827
    },
    {
        "db_id": "wta_1",
        "query": "group by year",
        "query_toks": [
            "group",
            "by",
            "year"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "year"
        ],
        "question": "Group the records based on year",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "year"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    38,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",
        "original_question": "How many matches were played in each year?",
        "instance_id": 828
    },
    {
        "db_id": "wta_1",
        "query": "select distinct winner_name , winner_rank from matches",
        "query_toks": [
            "select",
            "distinct",
            "winner_name",
            ",",
            "winner_rank",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "winner_name",
            ",",
            "winner_rank",
            "from",
            "matches"
        ],
        "question": "Get distinct and winner name and winner rank of matches",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "winner",
            "name",
            "and",
            "winner",
            "rank",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "original_question": "Find the name and rank of the 3 youngest winners across all matches.",
        "instance_id": 829
    },
    {
        "db_id": "wta_1",
        "query": "order by winner_age ",
        "query_toks": [
            "order",
            "by",
            "winner_age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "winner_age"
        ],
        "question": "Order these records based on winner age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "winner",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            28,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "original_question": "Find the name and rank of the 3 youngest winners across all matches.",
        "instance_id": 830
    },
    {
        "db_id": "wta_1",
        "query": "select distinct winner_name , winner_rank from matches",
        "query_toks": [
            "select",
            "distinct",
            "winner_name",
            ",",
            "winner_rank",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "winner_name",
            ",",
            "winner_rank",
            "from",
            "matches"
        ],
        "question": "Get distinct and winner name and winner rank of matches",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "winner",
            "name",
            "and",
            "winner",
            "rank",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "original_question": "What are the names and ranks of the three youngest winners across all matches?",
        "instance_id": 831
    },
    {
        "db_id": "wta_1",
        "query": "order by winner_age ",
        "query_toks": [
            "order",
            "by",
            "winner_age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "winner_age"
        ],
        "question": "Order these records based on winner age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "winner",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            28,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",
        "original_question": "What are the names and ranks of the three youngest winners across all matches?",
        "instance_id": 832
    },
    {
        "db_id": "wta_1",
        "query": "select count ( distinct winner_name ) from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "winner_name",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "winner_name",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the number of distinct winner name of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "winner",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                34,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "original_question": "How many different winners both participated in the WTA Championships and were left handed?",
        "instance_id": 833
    },
    {
        "db_id": "wta_1",
        "query": "where tourney_name = \"wta championships\" and winner_hand = \"l\"",
        "query_toks": [
            "where",
            "tourney_name",
            "=",
            "\"wta",
            "championships\"",
            "and",
            "winner_hand",
            "=",
            "\"l\""
        ],
        "query_toks_no_value": [
            "where",
            "tourney_name",
            "=",
            "\"wta",
            "championships\"",
            "and",
            "winner_hand",
            "=",
            "\"l\""
        ],
        "question": "Keep the records that tourney name is \"wta championships\" and winner hand is \"l\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "tourney",
            "name",
            "is",
            "\"wta",
            "championships\"",
            "and",
            "winner",
            "hand",
            "is",
            "\"l\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"WTA Championships\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            30,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "original_question": "How many different winners both participated in the WTA Championships and were left handed?",
        "instance_id": 834
    },
    {
        "db_id": "wta_1",
        "query": "select count ( distinct winner_name ) from matches",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "winner_name",
            ")",
            "from",
            "matches"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "winner_name",
            ")",
            "from",
            "matches"
        ],
        "question": "Get the number of distinct winner name of matches",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "winner",
            "name",
            "of",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                34,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "original_question": "Find the number of left handed winners who participated in the WTA Championships.",
        "instance_id": 835
    },
    {
        "db_id": "wta_1",
        "query": "where tourney_name = \"wta championships\" and winner_hand = \"l\"",
        "query_toks": [
            "where",
            "tourney_name",
            "=",
            "\"wta",
            "championships\"",
            "and",
            "winner_hand",
            "=",
            "\"l\""
        ],
        "query_toks_no_value": [
            "where",
            "tourney_name",
            "=",
            "\"wta",
            "championships\"",
            "and",
            "winner_hand",
            "=",
            "\"l\""
        ],
        "question": "Keep the records that tourney name is \"wta championships\" and winner hand is \"l\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "tourney",
            "name",
            "is",
            "\"wta",
            "championships\"",
            "and",
            "winner",
            "hand",
            "is",
            "\"l\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            27,
                            false
                        ],
                        null
                    ],
                    "\"WTA Championships\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            30,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'",
        "original_question": "Find the number of left handed winners who participated in the WTA Championships.",
        "instance_id": 836
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id",
        "query_toks": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            ",",
            "players.birth_date",
            "from",
            "players",
            "join",
            "matches",
            "on",
            "players.player_id",
            "=",
            "matches.winner_id"
        ],
        "query_toks_no_value": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            ",",
            "players.birth_date",
            "from",
            "players",
            "join",
            "matches",
            "on",
            "players.player_id",
            "=",
            "matches.winner_id"
        ],
        "question": "Get first name and country code and birth date of players that has matches",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "country",
            "code",
            "and",
            "birth",
            "date",
            "of",
            "players",
            "that",
            "has",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "original_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "instance_id": 837
    },
    {
        "db_id": "wta_1",
        "query": "order by matches.winner_rank_points desc ",
        "query_toks": [
            "order",
            "by",
            "matches.winner_rank_points",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "matches.winner_rank_points",
            "desc"
        ],
        "question": "Order these records based on winner rank points of matches and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "winner",
            "rank",
            "points",
            "of",
            "matches",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "original_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "instance_id": 838
    },
    {
        "db_id": "wta_1",
        "query": "select players.first_name , players.country_code , players.birth_date from players join matches on players.player_id = matches.winner_id",
        "query_toks": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            ",",
            "players.birth_date",
            "from",
            "players",
            "join",
            "matches",
            "on",
            "players.player_id",
            "=",
            "matches.winner_id"
        ],
        "query_toks_no_value": [
            "select",
            "players.first_name",
            ",",
            "players.country_code",
            ",",
            "players.birth_date",
            "from",
            "players",
            "join",
            "matches",
            "on",
            "players.player_id",
            "=",
            "matches.winner_id"
        ],
        "question": "Get first name and country code and birth date of players that has matches",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "country",
            "code",
            "and",
            "birth",
            "date",
            "of",
            "players",
            "that",
            "has",
            "matches"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            32,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "original_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "instance_id": 839
    },
    {
        "db_id": "wta_1",
        "query": "order by matches.winner_rank_points desc ",
        "query_toks": [
            "order",
            "by",
            "matches.winner_rank_points",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "matches.winner_rank_points",
            "desc"
        ],
        "question": "Order these records based on winner rank points of matches and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "winner",
            "rank",
            "points",
            "of",
            "matches",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            36,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
        "original_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "instance_id": 840
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) , hand from players",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "hand",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "hand",
            "from",
            "players"
        ],
        "question": "Get the number and hand of players",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "hand",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "original_question": "Find the number of players for each hand type.",
        "instance_id": 841
    },
    {
        "db_id": "wta_1",
        "query": "group by hand",
        "query_toks": [
            "group",
            "by",
            "hand"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hand"
        ],
        "question": "Group the records based on hand",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "hand"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "original_question": "Find the number of players for each hand type.",
        "instance_id": 842
    },
    {
        "db_id": "wta_1",
        "query": "select count ( * ) , hand from players",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "hand",
            "from",
            "players"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "hand",
            "from",
            "players"
        ],
        "question": "Get the number and hand of players",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "hand",
            "of",
            "players"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "original_question": "How many players are there for each hand type?",
        "instance_id": 843
    },
    {
        "db_id": "wta_1",
        "query": "group by hand",
        "query_toks": [
            "group",
            "by",
            "hand"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "hand"
        ],
        "question": "Group the records based on hand",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "hand"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  hand FROM players GROUP BY hand",
        "original_question": "How many players are there for each hand type?",
        "instance_id": 844
    },
    {
        "db_id": "battle_death",
        "query": "select count ( * ) from ship",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "ship"
        ],
        "question": "Get the number of ship",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "ship"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "original_question": "How many ships ended up being 'Captured'?",
        "instance_id": 845
    },
    {
        "db_id": "battle_death",
        "query": "where disposition_of_ship = \"captured\"",
        "query_toks": [
            "where",
            "disposition_of_ship",
            "=",
            "\"captured\""
        ],
        "query_toks_no_value": [
            "where",
            "disposition_of_ship",
            "=",
            "\"captured\""
        ],
        "question": "Keep the records that disposition of ship is \"captured\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "disposition",
            "of",
            "ship",
            "is",
            "\"captured\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    "\"Captured\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
        "original_question": "How many ships ended up being 'Captured'?",
        "instance_id": 846
    },
    {
        "db_id": "battle_death",
        "query": "select name , tonnage from ship",
        "query_toks": [
            "select",
            "name",
            ",",
            "tonnage",
            "from",
            "ship"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "tonnage",
            "from",
            "ship"
        ],
        "question": "Get name and tonnage of ship",
        "question_toks": [
            "Get",
            "name",
            "and",
            "tonnage",
            "of",
            "ship"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "original_question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "instance_id": 847
    },
    {
        "db_id": "battle_death",
        "query": "order by name ",
        "query_toks": [
            "order",
            "by",
            "name"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "name"
        ],
        "question": "Order these records based on name",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "name"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
        "original_question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "instance_id": 848
    },
    {
        "db_id": "battle_death",
        "query": "select name , date from battle",
        "query_toks": [
            "select",
            "name",
            ",",
            "date",
            "from",
            "battle"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "date",
            "from",
            "battle"
        ],
        "question": "Get name and date of battle",
        "question_toks": [
            "Get",
            "name",
            "and",
            "date",
            "of",
            "battle"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  date FROM battle",
        "original_question": "List the name, date and result of each battle.",
        "instance_id": 849
    },
    {
        "db_id": "battle_death",
        "query": "select max ( killed ) , min ( killed ) from death",
        "query_toks": [
            "select",
            "max",
            "(",
            "killed",
            ")",
            ",",
            "min",
            "(",
            "killed",
            ")",
            "from",
            "death"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "killed",
            ")",
            ",",
            "min",
            "(",
            "killed",
            ")",
            "from",
            "death"
        ],
        "question": "Get the maximum value of killed and the minimum value of killed of death",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "killed",
            "and",
            "the",
            "minimum",
            "value",
            "of",
            "killed",
            "of",
            "death"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(killed) ,  min(killed) FROM death",
        "original_question": "What is maximum and minimum death toll caused each time?",
        "instance_id": 850
    },
    {
        "db_id": "battle_death",
        "query": "select avg ( injured ) from death",
        "query_toks": [
            "select",
            "avg",
            "(",
            "injured",
            ")",
            "from",
            "death"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "injured",
            ")",
            "from",
            "death"
        ],
        "question": "Get the average value of injured of death",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "injured",
            "of",
            "death"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(injured) FROM death",
        "original_question": "What is the average number of injuries caused each time?",
        "instance_id": 851
    },
    {
        "db_id": "battle_death",
        "query": "select death.killed , death.injured from death join ship on death.caused_by_ship_id = ship.id",
        "query_toks": [
            "select",
            "death.killed",
            ",",
            "death.injured",
            "from",
            "death",
            "join",
            "ship",
            "on",
            "death.caused_by_ship_id",
            "=",
            "ship.id"
        ],
        "query_toks_no_value": [
            "select",
            "death.killed",
            ",",
            "death.injured",
            "from",
            "death",
            "join",
            "ship",
            "on",
            "death.caused_by_ship_id",
            "=",
            "ship.id"
        ],
        "question": "Get killed and injured of death that has ship",
        "question_toks": [
            "Get",
            "killed",
            "and",
            "injured",
            "of",
            "death",
            "that",
            "has",
            "ship"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "original_question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "instance_id": 852
    },
    {
        "db_id": "battle_death",
        "query": "where ship.tonnage = \"t\"",
        "query_toks": [
            "where",
            "ship.tonnage",
            "=",
            "\"t\""
        ],
        "query_toks_no_value": [
            "where",
            "ship.tonnage",
            "=",
            "\"t\""
        ],
        "question": "Keep the records that tonnage of ship is \"t\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "tonnage",
            "of",
            "ship",
            "is",
            "\"t\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"t\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
        "original_question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "instance_id": 853
    },
    {
        "db_id": "battle_death",
        "query": "select name , result from battle",
        "query_toks": [
            "select",
            "name",
            ",",
            "result",
            "from",
            "battle"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "result",
            "from",
            "battle"
        ],
        "question": "Get name and result of battle",
        "question_toks": [
            "Get",
            "name",
            "and",
            "result",
            "of",
            "battle"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "original_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "instance_id": 854
    },
    {
        "db_id": "battle_death",
        "query": "where bulgarian_commander != \"boril\"",
        "query_toks": [
            "where",
            "bulgarian_commander",
            "!=",
            "\"boril\""
        ],
        "query_toks_no_value": [
            "where",
            "bulgarian_commander",
            "!=",
            "\"boril\""
        ],
        "question": "Keep the records that bulgarian commander is not \"boril\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "bulgarian",
            "commander",
            "is",
            "not",
            "\"boril\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Boril\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
        "original_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "instance_id": 855
    },
    {
        "db_id": "battle_death",
        "query": "select distinct battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle",
        "query_toks": [
            "select",
            "distinct",
            "battle.id",
            ",",
            "battle.name",
            "from",
            "battle",
            "join",
            "ship",
            "on",
            "battle.id",
            "=",
            "ship.lost_in_battle"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "battle.id",
            ",",
            "battle.name",
            "from",
            "battle",
            "join",
            "ship",
            "on",
            "battle.id",
            "=",
            "ship.lost_in_battle"
        ],
        "question": "Get distinct and id and name of battle that has ship",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "id",
            "and",
            "name",
            "of",
            "battle",
            "that",
            "has",
            "ship"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "original_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "instance_id": 856
    },
    {
        "db_id": "battle_death",
        "query": "where ship.ship_type = \"brig\"",
        "query_toks": [
            "where",
            "ship.ship_type",
            "=",
            "\"brig\""
        ],
        "query_toks_no_value": [
            "where",
            "ship.ship_type",
            "=",
            "\"brig\""
        ],
        "question": "Keep the records that ship type of ship is \"brig\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "ship",
            "type",
            "of",
            "ship",
            "is",
            "\"brig\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Brig\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
        "original_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "instance_id": 857
    },
    {
        "db_id": "battle_death",
        "query": "select battle.id , battle.name from battle join ship on battle.id = ship.lost_in_battle join death on ship.id = death.caused_by_ship_id",
        "query_toks": [
            "select",
            "battle.id",
            ",",
            "battle.name",
            "from",
            "battle",
            "join",
            "ship",
            "on",
            "battle.id",
            "=",
            "ship.lost_in_battle",
            "join",
            "death",
            "on",
            "ship.id",
            "=",
            "death.caused_by_ship_id"
        ],
        "query_toks_no_value": [
            "select",
            "battle.id",
            ",",
            "battle.name",
            "from",
            "battle",
            "join",
            "ship",
            "on",
            "battle.id",
            "=",
            "ship.lost_in_battle",
            "join",
            "death",
            "on",
            "ship.id",
            "=",
            "death.caused_by_ship_id"
        ],
        "question": "Get id and name of battle that has ship and death",
        "question_toks": [
            "Get",
            "id",
            "and",
            "name",
            "of",
            "battle",
            "that",
            "has",
            "ship",
            "and",
            "death"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "original_question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "instance_id": 858
    },
    {
        "db_id": "battle_death",
        "query": "group by battle.id having sum ( death.killed ) > 10",
        "query_toks": [
            "group",
            "by",
            "battle.id",
            "having",
            "sum",
            "(",
            "death.killed",
            ")",
            ">",
            "10"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "battle.id",
            "having",
            "sum",
            "(",
            "death.killed",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on id of battle that the sum of killed of death is greater than 10",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "battle",
            "that",
            "the",
            "sum",
            "of",
            "killed",
            "of",
            "death",
            "is",
            "greater",
            "than",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            4,
                            17,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
        "original_question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "instance_id": 859
    },
    {
        "db_id": "battle_death",
        "query": "select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id",
        "query_toks": [
            "select",
            "ship.id",
            ",",
            "ship.name",
            "from",
            "death",
            "join",
            "ship",
            "on",
            "death.caused_by_ship_id",
            "=",
            "ship.id"
        ],
        "query_toks_no_value": [
            "select",
            "ship.id",
            ",",
            "ship.name",
            "from",
            "death",
            "join",
            "ship",
            "on",
            "death.caused_by_ship_id",
            "=",
            "ship.id"
        ],
        "question": "Get id and name of death that has ship",
        "question_toks": [
            "Get",
            "id",
            "and",
            "name",
            "of",
            "death",
            "that",
            "has",
            "ship"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the ship id and name that caused most total injuries?",
        "instance_id": 860
    },
    {
        "db_id": "battle_death",
        "query": "group by ship.id",
        "query_toks": [
            "group",
            "by",
            "ship.id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "ship.id"
        ],
        "question": "Group the records based on id of ship",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "id",
            "of",
            "ship"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the ship id and name that caused most total injuries?",
        "instance_id": 861
    },
    {
        "db_id": "battle_death",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the ship id and name that caused most total injuries?",
        "instance_id": 862
    },
    {
        "db_id": "battle_death",
        "query": "select name from battle",
        "query_toks": [
            "select",
            "name",
            "from",
            "battle"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "battle"
        ],
        "question": "Get name of battle",
        "question_toks": [
            "Get",
            "name",
            "of",
            "battle"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "original_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "instance_id": 863
    },
    {
        "db_id": "battle_death",
        "query": "where bulgarian_commander = \"kaloyan\" and latin_commander = \"baldwin i\"",
        "query_toks": [
            "where",
            "bulgarian_commander",
            "=",
            "\"kaloyan\"",
            "and",
            "latin_commander",
            "=",
            "\"baldwin",
            "i\""
        ],
        "query_toks_no_value": [
            "where",
            "bulgarian_commander",
            "=",
            "\"kaloyan\"",
            "and",
            "latin_commander",
            "=",
            "\"baldwin",
            "i\""
        ],
        "question": "Keep the records that bulgarian commander is \"kaloyan\" and latin commander is \"baldwin i\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "bulgarian",
            "commander",
            "is",
            "\"kaloyan\"",
            "and",
            "latin",
            "commander",
            "is",
            "\"baldwin",
            "i\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Kaloyan\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Baldwin I\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
        "original_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "instance_id": 864
    },
    {
        "db_id": "battle_death",
        "query": "select count ( distinct result ) from battle",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "result",
            ")",
            "from",
            "battle"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "result",
            ")",
            "from",
            "battle"
        ],
        "question": "Get the number of distinct result of battle",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "result",
            "of",
            "battle"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                6,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT RESULT) FROM battle",
        "original_question": "How many different results are there for the battles?",
        "instance_id": 865
    },
    {
        "db_id": "battle_death",
        "query": "select note from death",
        "query_toks": [
            "select",
            "note",
            "from",
            "death"
        ],
        "query_toks_no_value": [
            "select",
            "note",
            "from",
            "death"
        ],
        "question": "Get note of death",
        "question_toks": [
            "Get",
            "note",
            "of",
            "death"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "original_question": "What are the notes of the death events which has substring 'East'?",
        "instance_id": 866
    },
    {
        "db_id": "battle_death",
        "query": "where note like \"% east %\"",
        "query_toks": [
            "where",
            "note",
            "like",
            "\"%",
            "east",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "note",
            "like",
            "\"%",
            "east",
            "%\""
        ],
        "question": "Keep the records that note is in the form of \"% east %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "note",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "east",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            16,
                            false
                        ],
                        null
                    ],
                    "\"%East%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "original_question": "What are the notes of the death events which has substring 'East'?",
        "instance_id": 867
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select line_1 , line_2 from addresses",
        "query_toks": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "question": "Get line 1 and line 2 of addresses",
        "question_toks": [
            "Get",
            "line",
            "1",
            "and",
            "line",
            "2",
            "of",
            "addresses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT line_1 ,  line_2 FROM addresses",
        "original_question": "what are all the addresses including line 1 and line 2?",
        "instance_id": 868
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select line_1 , line_2 from addresses",
        "query_toks": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "question": "Get line 1 and line 2 of addresses",
        "question_toks": [
            "Get",
            "line",
            "1",
            "and",
            "line",
            "2",
            "of",
            "addresses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT line_1 ,  line_2 FROM addresses",
        "original_question": "What is the first and second line for all addresses?",
        "instance_id": 869
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( * ) from courses",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses"
        ],
        "question": "Get the number of courses",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Courses",
        "original_question": "How many courses in total are listed?",
        "instance_id": 870
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( * ) from courses",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "courses"
        ],
        "question": "Get the number of courses",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Courses",
        "original_question": "How many courses are there?",
        "instance_id": 871
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select course_description from courses",
        "query_toks": [
            "select",
            "course_description",
            "from",
            "courses"
        ],
        "query_toks_no_value": [
            "select",
            "course_description",
            "from",
            "courses"
        ],
        "question": "Get course description of courses",
        "question_toks": [
            "Get",
            "course",
            "description",
            "of",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "original_question": "How is the math course described?",
        "instance_id": 872
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where course_name = \"math\"",
        "query_toks": [
            "where",
            "course_name",
            "=",
            "\"math\""
        ],
        "query_toks_no_value": [
            "where",
            "course_name",
            "=",
            "\"math\""
        ],
        "question": "Keep the records that course name is \"math\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "course",
            "name",
            "is",
            "\"math\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"math\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "original_question": "How is the math course described?",
        "instance_id": 873
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select course_description from courses",
        "query_toks": [
            "select",
            "course_description",
            "from",
            "courses"
        ],
        "query_toks_no_value": [
            "select",
            "course_description",
            "from",
            "courses"
        ],
        "question": "Get course description of courses",
        "question_toks": [
            "Get",
            "course",
            "description",
            "of",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "original_question": "What are the descriptions for all the math courses?",
        "instance_id": 874
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where course_name = \"math\"",
        "query_toks": [
            "where",
            "course_name",
            "=",
            "\"math\""
        ],
        "query_toks_no_value": [
            "where",
            "course_name",
            "=",
            "\"math\""
        ],
        "question": "Keep the records that course name is \"math\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "course",
            "name",
            "is",
            "\"math\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"math\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
        "original_question": "What are the descriptions for all the math courses?",
        "instance_id": 875
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select zip_postcode from addresses",
        "query_toks": [
            "select",
            "zip_postcode",
            "from",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "zip_postcode",
            "from",
            "addresses"
        ],
        "question": "Get zip postcode of addresses",
        "question_toks": [
            "Get",
            "zip",
            "postcode",
            "of",
            "addresses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "original_question": "What is the zip code of the address in the city Port Chelsea?",
        "instance_id": 876
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where city = \"port chelsea\"",
        "query_toks": [
            "where",
            "city",
            "=",
            "\"port",
            "chelsea\""
        ],
        "query_toks_no_value": [
            "where",
            "city",
            "=",
            "\"port",
            "chelsea\""
        ],
        "question": "Keep the records that city is \"port chelsea\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "is",
            "\"port",
            "chelsea\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Port Chelsea\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "original_question": "What is the zip code of the address in the city Port Chelsea?",
        "instance_id": 877
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select zip_postcode from addresses",
        "query_toks": [
            "select",
            "zip_postcode",
            "from",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "zip_postcode",
            "from",
            "addresses"
        ],
        "question": "Get zip postcode of addresses",
        "question_toks": [
            "Get",
            "zip",
            "postcode",
            "of",
            "addresses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "original_question": "What is the zip code for Port Chelsea?",
        "instance_id": 878
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where city = \"port chelsea\"",
        "query_toks": [
            "where",
            "city",
            "=",
            "\"port",
            "chelsea\""
        ],
        "query_toks_no_value": [
            "where",
            "city",
            "=",
            "\"port",
            "chelsea\""
        ],
        "question": "Keep the records that city is \"port chelsea\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "is",
            "\"port",
            "chelsea\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"Port Chelsea\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
        "original_question": "What is the zip code for Port Chelsea?",
        "instance_id": 879
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id",
        "query_toks": [
            "select",
            "departments.department_name",
            ",",
            "degree_programs.department_id",
            "from",
            "degree_programs",
            "join",
            "departments",
            "on",
            "degree_programs.department_id",
            "=",
            "departments.department_id"
        ],
        "query_toks_no_value": [
            "select",
            "departments.department_name",
            ",",
            "degree_programs.department_id",
            "from",
            "degree_programs",
            "join",
            "departments",
            "on",
            "degree_programs.department_id",
            "=",
            "departments.department_id"
        ],
        "question": "Get department name and department id of degree programs that has departments",
        "question_toks": [
            "Get",
            "department",
            "name",
            "and",
            "department",
            "id",
            "of",
            "degree",
            "programs",
            "that",
            "has",
            "departments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which department offers the most number of degrees? List department name and id.",
        "instance_id": 880
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by degree_programs.department_id",
        "query_toks": [
            "group",
            "by",
            "degree_programs.department_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "degree_programs.department_id"
        ],
        "question": "Group the records based on department id of degree programs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "department",
            "id",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which department offers the most number of degrees? List department name and id.",
        "instance_id": 881
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which department offers the most number of degrees? List department name and id.",
        "instance_id": 882
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select departments.department_name , degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id",
        "query_toks": [
            "select",
            "departments.department_name",
            ",",
            "degree_programs.department_id",
            "from",
            "degree_programs",
            "join",
            "departments",
            "on",
            "degree_programs.department_id",
            "=",
            "departments.department_id"
        ],
        "query_toks_no_value": [
            "select",
            "departments.department_name",
            ",",
            "degree_programs.department_id",
            "from",
            "degree_programs",
            "join",
            "departments",
            "on",
            "degree_programs.department_id",
            "=",
            "departments.department_id"
        ],
        "question": "Get department name and department id of degree programs that has departments",
        "question_toks": [
            "Get",
            "department",
            "name",
            "and",
            "department",
            "id",
            "of",
            "degree",
            "programs",
            "that",
            "has",
            "departments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "original_question": "What is the name and id of the department with the most number of degrees ?",
        "instance_id": 883
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by degree_programs.department_id",
        "query_toks": [
            "group",
            "by",
            "degree_programs.department_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "degree_programs.department_id"
        ],
        "question": "Group the records based on department id of degree programs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "department",
            "id",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "original_question": "What is the name and id of the department with the most number of degrees ?",
        "instance_id": 884
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",
        "original_question": "What is the name and id of the department with the most number of degrees ?",
        "instance_id": 885
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( distinct department_id ) from degree_programs",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "department_id",
            ")",
            "from",
            "degree_programs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "department_id",
            ")",
            "from",
            "degree_programs"
        ],
        "question": "Get the number of distinct department id of degree programs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "department",
            "id",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "original_question": "How many departments offer any degree?",
        "instance_id": 886
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( distinct department_id ) from degree_programs",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "department_id",
            ")",
            "from",
            "degree_programs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "department_id",
            ")",
            "from",
            "degree_programs"
        ],
        "question": "Get the number of distinct department id of degree programs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "department",
            "id",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "original_question": "How many different departments offer degrees?",
        "instance_id": 887
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( distinct degree_summary_name ) from degree_programs",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_summary_name",
            ")",
            "from",
            "degree_programs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_summary_name",
            ")",
            "from",
            "degree_programs"
        ],
        "question": "Get the number of distinct degree summary name of degree programs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                20,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "original_question": "How many different degree names are offered?",
        "instance_id": 888
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( distinct degree_summary_name ) from degree_programs",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_summary_name",
            ")",
            "from",
            "degree_programs"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "degree_summary_name",
            ")",
            "from",
            "degree_programs"
        ],
        "question": "Get the number of distinct degree summary name of degree programs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                20,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
        "original_question": "How many different degrees are offered?",
        "instance_id": 889
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "departments",
            "join",
            "degree_programs",
            "on",
            "departments.department_id",
            "=",
            "degree_programs.department_id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "departments",
            "join",
            "degree_programs",
            "on",
            "departments.department_id",
            "=",
            "degree_programs.department_id"
        ],
        "question": "Get the number of departments that has degree programs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "departments",
            "that",
            "has",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "original_question": "How many degrees does the engineering department offer?",
        "instance_id": 890
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where departments.department_name = \"engineer\"",
        "query_toks": [
            "where",
            "departments.department_name",
            "=",
            "\"engineer\""
        ],
        "query_toks_no_value": [
            "where",
            "departments.department_name",
            "=",
            "\"engineer\""
        ],
        "question": "Keep the records that department name of departments is \"engineer\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "department",
            "name",
            "of",
            "departments",
            "is",
            "\"engineer\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"engineer\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "original_question": "How many degrees does the engineering department offer?",
        "instance_id": 891
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( * ) from departments join degree_programs on departments.department_id = degree_programs.department_id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "departments",
            "join",
            "degree_programs",
            "on",
            "departments.department_id",
            "=",
            "degree_programs.department_id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "departments",
            "join",
            "degree_programs",
            "on",
            "departments.department_id",
            "=",
            "degree_programs.department_id"
        ],
        "question": "Get the number of departments that has degree programs",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "departments",
            "that",
            "has",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "original_question": "How many degrees does the engineering department have?",
        "instance_id": 892
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where departments.department_name = \"engineer\"",
        "query_toks": [
            "where",
            "departments.department_name",
            "=",
            "\"engineer\""
        ],
        "query_toks_no_value": [
            "where",
            "departments.department_name",
            "=",
            "\"engineer\""
        ],
        "question": "Keep the records that department name of departments is \"engineer\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "department",
            "name",
            "of",
            "departments",
            "is",
            "\"engineer\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"engineer\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
        "original_question": "How many degrees does the engineering department have?",
        "instance_id": 893
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select section_name , section_description from sections",
        "query_toks": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "question": "Get section name and section description of sections",
        "question_toks": [
            "Get",
            "section",
            "name",
            "and",
            "section",
            "description",
            "of",
            "sections"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_name ,  section_description FROM Sections",
        "original_question": "What are the names and descriptions of all the sections?",
        "instance_id": 894
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select section_name , section_description from sections",
        "query_toks": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "question": "Get section name and section description of sections",
        "question_toks": [
            "Get",
            "section",
            "name",
            "and",
            "section",
            "description",
            "of",
            "sections"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_name ,  section_description FROM Sections",
        "original_question": "What are the names and descriptions for all the sections?",
        "instance_id": 895
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id",
        "query_toks": [
            "select",
            "courses.course_name",
            ",",
            "courses.course_id",
            "from",
            "courses",
            "join",
            "sections",
            "on",
            "courses.course_id",
            "=",
            "sections.course_id"
        ],
        "query_toks_no_value": [
            "select",
            "courses.course_name",
            ",",
            "courses.course_id",
            "from",
            "courses",
            "join",
            "sections",
            "on",
            "courses.course_id",
            "=",
            "sections.course_id"
        ],
        "question": "Get course name and course id of courses that has sections",
        "question_toks": [
            "Get",
            "course",
            "name",
            "and",
            "course",
            "id",
            "of",
            "courses",
            "that",
            "has",
            "sections"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "original_question": "What are the names and id of courses having at most 2 sections?",
        "instance_id": 896
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by courses.course_id having count ( * ) >= 2",
        "query_toks": [
            "group",
            "by",
            "courses.course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "courses.course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">=",
            "value"
        ],
        "question": "Group the records based on course id of courses that the number is greater than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "course",
            "id",
            "of",
            "courses",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    6,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "original_question": "What are the names and id of courses having at most 2 sections?",
        "instance_id": 897
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select courses.course_name , courses.course_id from courses join sections on courses.course_id = sections.course_id",
        "query_toks": [
            "select",
            "courses.course_name",
            ",",
            "courses.course_id",
            "from",
            "courses",
            "join",
            "sections",
            "on",
            "courses.course_id",
            "=",
            "sections.course_id"
        ],
        "query_toks_no_value": [
            "select",
            "courses.course_name",
            ",",
            "courses.course_id",
            "from",
            "courses",
            "join",
            "sections",
            "on",
            "courses.course_id",
            "=",
            "sections.course_id"
        ],
        "question": "Get course name and course id of courses that has sections",
        "question_toks": [
            "Get",
            "course",
            "name",
            "and",
            "course",
            "id",
            "of",
            "courses",
            "that",
            "has",
            "sections"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "original_question": "What are the names and ids of every course with less than 2 sections?",
        "instance_id": 898
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by courses.course_id having count ( * ) >= 2",
        "query_toks": [
            "group",
            "by",
            "courses.course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "courses.course_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">=",
            "value"
        ],
        "question": "Group the records based on course id of courses that the number is greater than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "course",
            "id",
            "of",
            "courses",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    6,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
        "original_question": "What are the names and ids of every course with less than 2 sections?",
        "instance_id": 899
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select section_name from sections",
        "query_toks": [
            "select",
            "section_name",
            "from",
            "sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            "from",
            "sections"
        ],
        "question": "Get section name of sections",
        "question_toks": [
            "Get",
            "section",
            "name",
            "of",
            "sections"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "original_question": "List the section_name in reversed lexicographical order.",
        "instance_id": 900
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by section_name ",
        "query_toks": [
            "order",
            "by",
            "section_name"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "section_name"
        ],
        "question": "Order these records based on section name",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "section",
            "name"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "original_question": "List the section_name in reversed lexicographical order.",
        "instance_id": 901
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select section_name from sections",
        "query_toks": [
            "select",
            "section_name",
            "from",
            "sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            "from",
            "sections"
        ],
        "question": "Get section name of sections",
        "question_toks": [
            "Get",
            "section",
            "name",
            "of",
            "sections"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "original_question": "What are the names of the sections in reverse alphabetical order?",
        "instance_id": 902
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by section_name ",
        "query_toks": [
            "order",
            "by",
            "section_name"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "section_name"
        ],
        "question": "Order these records based on section name",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "section",
            "name"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "original_question": "What are the names of the sections in reverse alphabetical order?",
        "instance_id": 903
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id",
        "query_toks": [
            "select",
            "semesters.semester_name",
            ",",
            "semesters.semester_id",
            "from",
            "semesters",
            "join",
            "student_enrolment",
            "on",
            "semesters.semester_id",
            "=",
            "student_enrolment.semester_id"
        ],
        "query_toks_no_value": [
            "select",
            "semesters.semester_name",
            ",",
            "semesters.semester_id",
            "from",
            "semesters",
            "join",
            "student_enrolment",
            "on",
            "semesters.semester_id",
            "=",
            "student_enrolment.semester_id"
        ],
        "question": "Get semester name and semester id of semesters that has student enrolment",
        "question_toks": [
            "Get",
            "semester",
            "name",
            "and",
            "semester",
            "id",
            "of",
            "semesters",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the semester which most student registered in? Show both the name and the id.",
        "instance_id": 904
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by semesters.semester_id",
        "query_toks": [
            "group",
            "by",
            "semesters.semester_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "semesters.semester_id"
        ],
        "question": "Group the records based on semester id of semesters",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "semester",
            "id",
            "of",
            "semesters"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    28,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the semester which most student registered in? Show both the name and the id.",
        "instance_id": 905
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the semester which most student registered in? Show both the name and the id.",
        "instance_id": 906
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select semesters.semester_name , semesters.semester_id from semesters join student_enrolment on semesters.semester_id = student_enrolment.semester_id",
        "query_toks": [
            "select",
            "semesters.semester_name",
            ",",
            "semesters.semester_id",
            "from",
            "semesters",
            "join",
            "student_enrolment",
            "on",
            "semesters.semester_id",
            "=",
            "student_enrolment.semester_id"
        ],
        "query_toks_no_value": [
            "select",
            "semesters.semester_name",
            ",",
            "semesters.semester_id",
            "from",
            "semesters",
            "join",
            "student_enrolment",
            "on",
            "semesters.semester_id",
            "=",
            "student_enrolment.semester_id"
        ],
        "question": "Get semester name and semester id of semesters that has student enrolment",
        "question_toks": [
            "Get",
            "semester",
            "name",
            "and",
            "semester",
            "id",
            "of",
            "semesters",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                28,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "For each semester, what is the name and id of the one with the most students registered?",
        "instance_id": 907
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by semesters.semester_id",
        "query_toks": [
            "group",
            "by",
            "semesters.semester_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "semesters.semester_id"
        ],
        "question": "Group the records based on semester id of semesters",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "semester",
            "id",
            "of",
            "semesters"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    28,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "For each semester, what is the name and id of the one with the most students registered?",
        "instance_id": 908
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "For each semester, what is the name and id of the one with the most students registered?",
        "instance_id": 909
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select department_description from departments",
        "query_toks": [
            "select",
            "department_description",
            "from",
            "departments"
        ],
        "query_toks_no_value": [
            "select",
            "department_description",
            "from",
            "departments"
        ],
        "question": "Get department description of departments",
        "question_toks": [
            "Get",
            "department",
            "description",
            "of",
            "departments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "original_question": "What is the description of the department whose name has the substring the computer?",
        "instance_id": 910
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where department_name like \"% computer %\"",
        "query_toks": [
            "where",
            "department_name",
            "like",
            "\"%",
            "computer",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "department_name",
            "like",
            "\"%",
            "computer",
            "%\""
        ],
        "question": "Keep the records that department name is in the form of \"% computer %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "department",
            "name",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "computer",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%computer%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "original_question": "What is the description of the department whose name has the substring the computer?",
        "instance_id": 911
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select department_description from departments",
        "query_toks": [
            "select",
            "department_description",
            "from",
            "departments"
        ],
        "query_toks_no_value": [
            "select",
            "department_description",
            "from",
            "departments"
        ],
        "question": "Get department description of departments",
        "question_toks": [
            "Get",
            "department",
            "description",
            "of",
            "departments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "original_question": "What is the department description for the one whose name has the word computer?",
        "instance_id": 912
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where department_name like \"% computer %\"",
        "query_toks": [
            "where",
            "department_name",
            "like",
            "\"%",
            "computer",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "department_name",
            "like",
            "\"%",
            "computer",
            "%\""
        ],
        "question": "Keep the records that department name is in the form of \"% computer %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "department",
            "name",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "computer",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%computer%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "original_question": "What is the department description for the one whose name has the word computer?",
        "instance_id": 913
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id",
        "query_toks": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            ",",
            "students.student_id",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id"
        ],
        "query_toks_no_value": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            ",",
            "students.student_id",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id"
        ],
        "question": "Get first name and middle name and last name and student id of students that has student enrolment",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "and",
            "student",
            "id",
            "of",
            "students",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "original_question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "instance_id": 914
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by students.student_id having count ( * ) = 2",
        "query_toks": [
            "group",
            "by",
            "students.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "students.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "value"
        ],
        "question": "Group the records based on student id of students that the number is 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "students",
            "that",
            "the",
            "number",
            "is",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "original_question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "instance_id": 915
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select students.first_name , students.middle_name , students.last_name , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id",
        "query_toks": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            ",",
            "students.student_id",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id"
        ],
        "query_toks_no_value": [
            "select",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            ",",
            "students.student_id",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id"
        ],
        "question": "Get first name and middle name and last name and student id of students that has student enrolment",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "and",
            "student",
            "id",
            "of",
            "students",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "original_question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "instance_id": 916
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by students.student_id having count ( * ) = 2",
        "query_toks": [
            "group",
            "by",
            "students.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "students.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "value"
        ],
        "question": "Group the records based on student id of students that the number is 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "students",
            "that",
            "the",
            "number",
            "is",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
        "original_question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "instance_id": 917
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id",
        "query_toks": [
            "select",
            "distinct",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id",
            "join",
            "degree_programs",
            "on",
            "student_enrolment.degree_program_id",
            "=",
            "degree_programs.degree_program_id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id",
            "join",
            "degree_programs",
            "on",
            "student_enrolment.degree_program_id",
            "=",
            "degree_programs.degree_program_id"
        ],
        "question": "Get distinct and first name and middle name and last name of students that has student enrolment and degree programs",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "of",
            "students",
            "that",
            "has",
            "student",
            "enrolment",
            "and",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                45,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "original_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "instance_id": 918
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where degree_programs.degree_summary_name = \"bachelor\"",
        "query_toks": [
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "\"bachelor\""
        ],
        "query_toks_no_value": [
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "\"bachelor\""
        ],
        "question": "Keep the records that degree summary name of degree programs is \"bachelor\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs",
            "is",
            "\"bachelor\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Bachelor\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "original_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "instance_id": 919
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select distinct students.first_name , students.middle_name , students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id",
        "query_toks": [
            "select",
            "distinct",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id",
            "join",
            "degree_programs",
            "on",
            "student_enrolment.degree_program_id",
            "=",
            "degree_programs.degree_program_id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id",
            "join",
            "degree_programs",
            "on",
            "student_enrolment.degree_program_id",
            "=",
            "degree_programs.degree_program_id"
        ],
        "question": "Get distinct and first name and middle name and last name of students that has student enrolment and degree programs",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "of",
            "students",
            "that",
            "has",
            "student",
            "enrolment",
            "and",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                45,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "original_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "instance_id": 920
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where degree_programs.degree_summary_name = \"bachelor\"",
        "query_toks": [
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "\"bachelor\""
        ],
        "query_toks_no_value": [
            "where",
            "degree_programs.degree_summary_name",
            "=",
            "\"bachelor\""
        ],
        "question": "Keep the records that degree summary name of degree programs is \"bachelor\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs",
            "is",
            "\"bachelor\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Bachelor\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
        "original_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "instance_id": 921
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id",
        "query_toks": [
            "select",
            "degree_programs.degree_summary_name",
            "from",
            "degree_programs",
            "join",
            "student_enrolment",
            "on",
            "degree_programs.degree_program_id",
            "=",
            "student_enrolment.degree_program_id"
        ],
        "query_toks_no_value": [
            "select",
            "degree_programs.degree_summary_name",
            "from",
            "degree_programs",
            "join",
            "student_enrolment",
            "on",
            "degree_programs.degree_program_id",
            "=",
            "student_enrolment.degree_program_id"
        ],
        "question": "Get degree summary name of degree programs that has student enrolment",
        "question_toks": [
            "Get",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the kind of program which most number of students are enrolled in?",
        "instance_id": 922
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by degree_programs.degree_summary_name",
        "query_toks": [
            "group",
            "by",
            "degree_programs.degree_summary_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "degree_programs.degree_summary_name"
        ],
        "question": "Group the records based on degree summary name of degree programs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the kind of program which most number of students are enrolled in?",
        "instance_id": 923
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the kind of program which most number of students are enrolled in?",
        "instance_id": 924
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id",
        "query_toks": [
            "select",
            "degree_programs.degree_summary_name",
            "from",
            "degree_programs",
            "join",
            "student_enrolment",
            "on",
            "degree_programs.degree_program_id",
            "=",
            "student_enrolment.degree_program_id"
        ],
        "query_toks_no_value": [
            "select",
            "degree_programs.degree_summary_name",
            "from",
            "degree_programs",
            "join",
            "student_enrolment",
            "on",
            "degree_programs.degree_program_id",
            "=",
            "student_enrolment.degree_program_id"
        ],
        "question": "Get degree summary name of degree programs that has student enrolment",
        "question_toks": [
            "Get",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the degree summary name that has the most number of students enrolled?",
        "instance_id": 925
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by degree_programs.degree_summary_name",
        "query_toks": [
            "group",
            "by",
            "degree_programs.degree_summary_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "degree_programs.degree_summary_name"
        ],
        "question": "Group the records based on degree summary name of degree programs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    20,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the degree summary name that has the most number of students enrolled?",
        "instance_id": 926
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the degree summary name that has the most number of students enrolled?",
        "instance_id": 927
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id",
        "query_toks": [
            "select",
            "degree_programs.degree_program_id",
            ",",
            "degree_programs.degree_summary_name",
            "from",
            "degree_programs",
            "join",
            "student_enrolment",
            "on",
            "degree_programs.degree_program_id",
            "=",
            "student_enrolment.degree_program_id"
        ],
        "query_toks_no_value": [
            "select",
            "degree_programs.degree_program_id",
            ",",
            "degree_programs.degree_summary_name",
            "from",
            "degree_programs",
            "join",
            "student_enrolment",
            "on",
            "degree_programs.degree_program_id",
            "=",
            "student_enrolment.degree_program_id"
        ],
        "question": "Get degree program id and degree summary name of degree programs that has student enrolment",
        "question_toks": [
            "Get",
            "degree",
            "program",
            "id",
            "and",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "instance_id": 928
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by degree_programs.degree_program_id",
        "query_toks": [
            "group",
            "by",
            "degree_programs.degree_program_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "degree_programs.degree_program_id"
        ],
        "question": "Group the records based on degree program id of degree programs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "degree",
            "program",
            "id",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "instance_id": 929
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "instance_id": 930
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select degree_programs.degree_program_id , degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id",
        "query_toks": [
            "select",
            "degree_programs.degree_program_id",
            ",",
            "degree_programs.degree_summary_name",
            "from",
            "degree_programs",
            "join",
            "student_enrolment",
            "on",
            "degree_programs.degree_program_id",
            "=",
            "student_enrolment.degree_program_id"
        ],
        "query_toks_no_value": [
            "select",
            "degree_programs.degree_program_id",
            ",",
            "degree_programs.degree_summary_name",
            "from",
            "degree_programs",
            "join",
            "student_enrolment",
            "on",
            "degree_programs.degree_program_id",
            "=",
            "student_enrolment.degree_program_id"
        ],
        "question": "Get degree program id and degree summary name of degree programs that has student enrolment",
        "question_toks": [
            "Get",
            "degree",
            "program",
            "id",
            "and",
            "degree",
            "summary",
            "name",
            "of",
            "degree",
            "programs",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "instance_id": 931
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by degree_programs.degree_program_id",
        "query_toks": [
            "group",
            "by",
            "degree_programs.degree_program_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "degree_programs.degree_program_id"
        ],
        "question": "Group the records based on degree program id of degree programs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "degree",
            "program",
            "id",
            "of",
            "degree",
            "programs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "instance_id": 932
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "instance_id": 933
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id",
        "query_toks": [
            "select",
            "students.student_id",
            ",",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            ",",
            "students.student_id",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id"
        ],
        "query_toks_no_value": [
            "select",
            "students.student_id",
            ",",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            ",",
            "students.student_id",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id"
        ],
        "question": "Get the number and student id and first name and middle name and last name and student id of students that has student enrolment",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "student",
            "id",
            "and",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "and",
            "student",
            "id",
            "of",
            "students",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "instance_id": 934
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by students.student_id",
        "query_toks": [
            "group",
            "by",
            "students.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "students.student_id"
        ],
        "question": "Group the records based on student id of students",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "instance_id": 935
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "instance_id": 936
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select students.student_id , students.first_name , students.middle_name , students.last_name , count ( * ) , students.student_id from students join student_enrolment on students.student_id = student_enrolment.student_id",
        "query_toks": [
            "select",
            "students.student_id",
            ",",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            ",",
            "students.student_id",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id"
        ],
        "query_toks_no_value": [
            "select",
            "students.student_id",
            ",",
            "students.first_name",
            ",",
            "students.middle_name",
            ",",
            "students.last_name",
            ",",
            "count",
            "(",
            "*",
            ")",
            ",",
            "students.student_id",
            "from",
            "students",
            "join",
            "student_enrolment",
            "on",
            "students.student_id",
            "=",
            "student_enrolment.student_id"
        ],
        "question": "Get the number and student id and first name and middle name and last name and student id of students that has student enrolment",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "student",
            "id",
            "and",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "and",
            "student",
            "id",
            "of",
            "students",
            "that",
            "has",
            "student",
            "enrolment"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "instance_id": 937
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by students.student_id",
        "query_toks": [
            "group",
            "by",
            "students.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "students.student_id"
        ],
        "question": "Group the records based on student id of students",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    32,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "instance_id": 938
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "instance_id": 939
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select distinct courses.course_name from courses join student_enrolment_courses",
        "query_toks": [
            "select",
            "distinct",
            "courses.course_name",
            "from",
            "courses",
            "join",
            "student_enrolment_courses"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "courses.course_name",
            "from",
            "courses",
            "join",
            "student_enrolment_courses"
        ],
        "question": "Get distinct and course name of courses that has student enrolment courses",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "course",
            "name",
            "of",
            "courses",
            "that",
            "has",
            "student",
            "enrolment",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        8
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            50,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "original_question": "What are all the course names of the courses which ever have students enrolled in?",
        "instance_id": 940
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select distinct courses.course_name from courses join student_enrolment_courses",
        "query_toks": [
            "select",
            "distinct",
            "courses.course_name",
            "from",
            "courses",
            "join",
            "student_enrolment_courses"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "courses.course_name",
            "from",
            "courses",
            "join",
            "student_enrolment_courses"
        ],
        "question": "Get distinct and course name of courses that has student enrolment courses",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "course",
            "name",
            "of",
            "courses",
            "that",
            "has",
            "student",
            "enrolment",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        8
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            50,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
        "original_question": "What are the names of all courses that have some students enrolled?",
        "instance_id": 941
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id",
        "query_toks": [
            "select",
            "courses.course_name",
            "from",
            "courses",
            "join",
            "student_enrolment_courses",
            "on",
            "courses.course_id",
            "=",
            "student_enrolment_courses.course_id"
        ],
        "query_toks_no_value": [
            "select",
            "courses.course_name",
            "from",
            "courses",
            "join",
            "student_enrolment_courses",
            "on",
            "courses.course_id",
            "=",
            "student_enrolment_courses.course_id"
        ],
        "question": "Get course name of courses that has student enrolment courses",
        "question_toks": [
            "Get",
            "course",
            "name",
            "of",
            "courses",
            "that",
            "has",
            "student",
            "enrolment",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        8
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            50,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What's the name of the course with most number of enrollments?",
        "instance_id": 942
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by courses.course_name",
        "query_toks": [
            "group",
            "by",
            "courses.course_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "courses.course_name"
        ],
        "question": "Group the records based on course name of courses",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "course",
            "name",
            "of",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What's the name of the course with most number of enrollments?",
        "instance_id": 943
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What's the name of the course with most number of enrollments?",
        "instance_id": 944
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id",
        "query_toks": [
            "select",
            "courses.course_name",
            "from",
            "courses",
            "join",
            "student_enrolment_courses",
            "on",
            "courses.course_id",
            "=",
            "student_enrolment_courses.course_id"
        ],
        "query_toks_no_value": [
            "select",
            "courses.course_name",
            "from",
            "courses",
            "join",
            "student_enrolment_courses",
            "on",
            "courses.course_id",
            "=",
            "student_enrolment_courses.course_id"
        ],
        "question": "Get course name of courses that has student enrolment courses",
        "question_toks": [
            "Get",
            "course",
            "name",
            "of",
            "courses",
            "that",
            "has",
            "student",
            "enrolment",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        8
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            50,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the course with the most students enrolled?",
        "instance_id": 945
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by courses.course_name",
        "query_toks": [
            "group",
            "by",
            "courses.course_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "courses.course_name"
        ],
        "question": "Group the records based on course name of courses",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "course",
            "name",
            "of",
            "courses"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the course with the most students enrolled?",
        "instance_id": 946
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the course with the most students enrolled?",
        "instance_id": 947
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id",
        "query_toks": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "from",
            "transcript_contents",
            "join",
            "transcripts",
            "on",
            "transcript_contents.transcript_id",
            "=",
            "transcripts.transcript_id"
        ],
        "query_toks_no_value": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "from",
            "transcript_contents",
            "join",
            "transcripts",
            "on",
            "transcript_contents.transcript_id",
            "=",
            "transcripts.transcript_id"
        ],
        "question": "Get transcript date and transcript id of transcript contents that has transcripts",
        "question_toks": [
            "Get",
            "transcript",
            "date",
            "and",
            "transcript",
            "id",
            "of",
            "transcript",
            "contents",
            "that",
            "has",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ],
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            52,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "original_question": "Show the date and id of the transcript with at least 2 course results.",
        "instance_id": 948
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by transcript_contents.transcript_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "transcript_contents.transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "transcript_contents.transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on transcript id of transcript contents that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "transcript",
            "id",
            "of",
            "transcript",
            "contents",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    56,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "original_question": "Show the date and id of the transcript with at least 2 course results.",
        "instance_id": 949
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id",
        "query_toks": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "from",
            "transcript_contents",
            "join",
            "transcripts",
            "on",
            "transcript_contents.transcript_id",
            "=",
            "transcripts.transcript_id"
        ],
        "query_toks_no_value": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "from",
            "transcript_contents",
            "join",
            "transcripts",
            "on",
            "transcript_contents.transcript_id",
            "=",
            "transcripts.transcript_id"
        ],
        "question": "Get transcript date and transcript id of transcript contents that has transcripts",
        "question_toks": [
            "Get",
            "transcript",
            "date",
            "and",
            "transcript",
            "id",
            "of",
            "transcript",
            "contents",
            "that",
            "has",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ],
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            52,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "original_question": "What is the date and id of the transcript with at least 2 courses listed?",
        "instance_id": 950
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by transcript_contents.transcript_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "transcript_contents.transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "transcript_contents.transcript_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on transcript id of transcript contents that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "transcript",
            "id",
            "of",
            "transcript",
            "contents",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    56,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
        "original_question": "What is the date and id of the transcript with at least 2 courses listed?",
        "instance_id": 951
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select cell_mobile_number from students",
        "query_toks": [
            "select",
            "cell_mobile_number",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "cell_mobile_number",
            "from",
            "students"
        ],
        "question": "Get cell mobile number of students",
        "question_toks": [
            "Get",
            "cell",
            "mobile",
            "number",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "original_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "instance_id": 952
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where first_name = \"timmothy\" and last_name = \"ward\"",
        "query_toks": [
            "where",
            "first_name",
            "=",
            "\"timmothy\"",
            "and",
            "last_name",
            "=",
            "\"ward\""
        ],
        "query_toks_no_value": [
            "where",
            "first_name",
            "=",
            "\"timmothy\"",
            "and",
            "last_name",
            "=",
            "\"ward\""
        ],
        "question": "Keep the records that first name is \"timmothy\" and last name is \"ward\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "first",
            "name",
            "is",
            "\"timmothy\"",
            "and",
            "last",
            "name",
            "is",
            "\"ward\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            35,
                            false
                        ],
                        null
                    ],
                    "\"Timmothy\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"Ward\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
        "original_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "instance_id": 953
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select cell_mobile_number from students",
        "query_toks": [
            "select",
            "cell_mobile_number",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "cell_mobile_number",
            "from",
            "students"
        ],
        "question": "Get cell mobile number of students",
        "question_toks": [
            "Get",
            "cell",
            "mobile",
            "number",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "original_question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "instance_id": 954
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where first_name = \"timmothy\" and last_name = \"ward\"",
        "query_toks": [
            "where",
            "first_name",
            "=",
            "\"timmothy\"",
            "and",
            "last_name",
            "=",
            "\"ward\""
        ],
        "query_toks_no_value": [
            "where",
            "first_name",
            "=",
            "\"timmothy\"",
            "and",
            "last_name",
            "=",
            "\"ward\""
        ],
        "question": "Keep the records that first name is \"timmothy\" and last name is \"ward\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "first",
            "name",
            "is",
            "\"timmothy\"",
            "and",
            "last",
            "name",
            "is",
            "\"ward\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            35,
                            false
                        ],
                        null
                    ],
                    "\"timmothy\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"ward\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'",
        "original_question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "instance_id": 955
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select first_name , middle_name , last_name from students",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "question": "Get first name and middle name and last name of students",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "original_question": "Who is the first student to register? List the first name, middle name and last name.",
        "instance_id": 956
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by date_first_registered asc ",
        "query_toks": [
            "order",
            "by",
            "date_first_registered",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "date_first_registered",
            "asc"
        ],
        "question": "Order these records based on date first registered and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "date",
            "first",
            "registered",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "original_question": "Who is the first student to register? List the first name, middle name and last name.",
        "instance_id": 957
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select first_name , middle_name , last_name from students",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "question": "Get first name and middle name and last name of students",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "original_question": "What is the first, middle, and last name of the first student to register?",
        "instance_id": 958
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by date_first_registered asc ",
        "query_toks": [
            "order",
            "by",
            "date_first_registered",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "date_first_registered",
            "asc"
        ],
        "question": "Order these records based on date first registered and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "date",
            "first",
            "registered",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "original_question": "What is the first, middle, and last name of the first student to register?",
        "instance_id": 959
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select first_name , middle_name , last_name from students",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "question": "Get first name and middle name and last name of students",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "original_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "instance_id": 960
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by date_left asc ",
        "query_toks": [
            "order",
            "by",
            "date_left",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "date_left",
            "asc"
        ],
        "question": "Order these records based on date left and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "date",
            "left",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "original_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "instance_id": 961
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select first_name , middle_name , last_name from students",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students"
        ],
        "question": "Get first name and middle name and last name of students",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "original_question": "What is the first, middle, and last name of the earliest school graduate?",
        "instance_id": 962
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by date_left asc ",
        "query_toks": [
            "order",
            "by",
            "date_left",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "date_left",
            "asc"
        ],
        "question": "Order these records based on date left and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "date",
            "left",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "original_question": "What is the first, middle, and last name of the earliest school graduate?",
        "instance_id": 963
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select first_name from students",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            "from",
            "students"
        ],
        "question": "Get first name of students",
        "question_toks": [
            "Get",
            "first",
            "name",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "original_question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "instance_id": 964
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where current_address_id != permanent_address_id",
        "query_toks": [
            "where",
            "current_address_id",
            "!=",
            "permanent_address_id"
        ],
        "query_toks_no_value": [
            "where",
            "current_address_id",
            "!=",
            "permanent_address_id"
        ],
        "question": "Keep the records that current address id is not permanent address id",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "current",
            "address",
            "id",
            "is",
            "not",
            "permanent",
            "address",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ],
                    [
                        0,
                        34,
                        false
                    ],
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "original_question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "instance_id": 965
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select first_name from students",
        "query_toks": [
            "select",
            "first_name",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            "from",
            "students"
        ],
        "question": "Get first name of students",
        "question_toks": [
            "Get",
            "first",
            "name",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "original_question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "instance_id": 966
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where current_address_id != permanent_address_id",
        "query_toks": [
            "where",
            "current_address_id",
            "!=",
            "permanent_address_id"
        ],
        "query_toks_no_value": [
            "where",
            "current_address_id",
            "!=",
            "permanent_address_id"
        ],
        "question": "Keep the records that current address id is not permanent address id",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "current",
            "address",
            "id",
            "is",
            "not",
            "permanent",
            "address",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ],
                    [
                        0,
                        34,
                        false
                    ],
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "original_question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "instance_id": 967
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id",
        "query_toks": [
            "select",
            "addresses.address_id",
            ",",
            "addresses.line_1",
            ",",
            "addresses.line_2",
            "from",
            "addresses",
            "join",
            "students",
            "on",
            "addresses.address_id",
            "=",
            "students.current_address_id"
        ],
        "query_toks_no_value": [
            "select",
            "addresses.address_id",
            ",",
            "addresses.line_1",
            ",",
            "addresses.line_2",
            "from",
            "addresses",
            "join",
            "students",
            "on",
            "addresses.address_id",
            "=",
            "students.current_address_id"
        ],
        "question": "Get address id and line 1 and line 2 of addresses that has students",
        "question_toks": [
            "Get",
            "address",
            "id",
            "and",
            "line",
            "1",
            "and",
            "line",
            "2",
            "of",
            "addresses",
            "that",
            "has",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which address holds the most number of students currently? List the address id and all lines.",
        "instance_id": 968
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by addresses.address_id",
        "query_toks": [
            "group",
            "by",
            "addresses.address_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "addresses.address_id"
        ],
        "question": "Group the records based on address id of addresses",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "address",
            "id",
            "of",
            "addresses"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which address holds the most number of students currently? List the address id and all lines.",
        "instance_id": 969
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which address holds the most number of students currently? List the address id and all lines.",
        "instance_id": 970
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select addresses.address_id , addresses.line_1 , addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id",
        "query_toks": [
            "select",
            "addresses.address_id",
            ",",
            "addresses.line_1",
            ",",
            "addresses.line_2",
            "from",
            "addresses",
            "join",
            "students",
            "on",
            "addresses.address_id",
            "=",
            "students.current_address_id"
        ],
        "query_toks_no_value": [
            "select",
            "addresses.address_id",
            ",",
            "addresses.line_1",
            ",",
            "addresses.line_2",
            "from",
            "addresses",
            "join",
            "students",
            "on",
            "addresses.address_id",
            "=",
            "students.current_address_id"
        ],
        "question": "Get address id and line 1 and line 2 of addresses that has students",
        "question_toks": [
            "Get",
            "address",
            "id",
            "and",
            "line",
            "1",
            "and",
            "line",
            "2",
            "of",
            "addresses",
            "that",
            "has",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the id, line 1, and line 2 of the address with the most students?",
        "instance_id": 971
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by addresses.address_id",
        "query_toks": [
            "group",
            "by",
            "addresses.address_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "addresses.address_id"
        ],
        "question": "Group the records based on address id of addresses",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "address",
            "id",
            "of",
            "addresses"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the id, line 1, and line 2 of the address with the most students?",
        "instance_id": 972
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the id, line 1, and line 2 of the address with the most students?",
        "instance_id": 973
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select avg ( transcript_date ) from transcripts",
        "query_toks": [
            "select",
            "avg",
            "(",
            "transcript_date",
            ")",
            "from",
            "transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "transcript_date",
            ")",
            "from",
            "transcripts"
        ],
        "question": "Get the average value of transcript date of transcripts",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "transcript",
            "date",
            "of",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(transcript_date) FROM Transcripts",
        "original_question": "On average, when were the transcripts printed?",
        "instance_id": 974
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select avg ( transcript_date ) from transcripts",
        "query_toks": [
            "select",
            "avg",
            "(",
            "transcript_date",
            ")",
            "from",
            "transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "transcript_date",
            ")",
            "from",
            "transcripts"
        ],
        "question": "Get the average value of transcript date of transcripts",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "transcript",
            "date",
            "of",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(transcript_date) FROM Transcripts",
        "original_question": "What is the average transcript date?",
        "instance_id": 975
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select transcript_date , other_details from transcripts",
        "query_toks": [
            "select",
            "transcript_date",
            ",",
            "other_details",
            "from",
            "transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            ",",
            "other_details",
            "from",
            "transcripts"
        ],
        "question": "Get transcript date and other details of transcripts",
        "question_toks": [
            "Get",
            "transcript",
            "date",
            "and",
            "other",
            "details",
            "of",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                54,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "original_question": "When is the first transcript released? List the date and details.",
        "instance_id": 976
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by transcript_date asc ",
        "query_toks": [
            "order",
            "by",
            "transcript_date",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "transcript_date",
            "asc"
        ],
        "question": "Order these records based on transcript date and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "transcript",
            "date",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "original_question": "When is the first transcript released? List the date and details.",
        "instance_id": 977
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select transcript_date , other_details from transcripts",
        "query_toks": [
            "select",
            "transcript_date",
            ",",
            "other_details",
            "from",
            "transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            ",",
            "other_details",
            "from",
            "transcripts"
        ],
        "question": "Get transcript date and other details of transcripts",
        "question_toks": [
            "Get",
            "transcript",
            "date",
            "and",
            "other",
            "details",
            "of",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                54,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "original_question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "instance_id": 978
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by transcript_date asc ",
        "query_toks": [
            "order",
            "by",
            "transcript_date",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "transcript_date",
            "asc"
        ],
        "question": "Order these records based on transcript date and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "transcript",
            "date",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "original_question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "instance_id": 979
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( * ) from transcripts",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts"
        ],
        "question": "Get the number of transcripts",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Transcripts",
        "original_question": "How many transcripts are released?",
        "instance_id": 980
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( * ) from transcripts",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "transcripts"
        ],
        "question": "Get the number of transcripts",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Transcripts",
        "original_question": "How many transcripts are listed?",
        "instance_id": 981
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select transcript_date from transcripts",
        "query_toks": [
            "select",
            "transcript_date",
            "from",
            "transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            "from",
            "transcripts"
        ],
        "question": "Get transcript date of transcripts",
        "question_toks": [
            "Get",
            "transcript",
            "date",
            "of",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "original_question": "What is the last transcript release date?",
        "instance_id": 982
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by transcript_date desc ",
        "query_toks": [
            "order",
            "by",
            "transcript_date",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "transcript_date",
            "desc"
        ],
        "question": "Order these records based on transcript date and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "transcript",
            "date",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "original_question": "What is the last transcript release date?",
        "instance_id": 983
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select transcript_date from transcripts",
        "query_toks": [
            "select",
            "transcript_date",
            "from",
            "transcripts"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            "from",
            "transcripts"
        ],
        "question": "Get transcript date of transcripts",
        "question_toks": [
            "Get",
            "transcript",
            "date",
            "of",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "original_question": "When was the last transcript released?",
        "instance_id": 984
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by transcript_date desc ",
        "query_toks": [
            "order",
            "by",
            "transcript_date",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "transcript_date",
            "desc"
        ],
        "question": "Order these records based on transcript date and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "transcript",
            "date",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "original_question": "When was the last transcript released?",
        "instance_id": 985
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( * ) , student_course_id from transcript_contents",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student_course_id",
            "from",
            "transcript_contents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student_course_id",
            "from",
            "transcript_contents"
        ],
        "question": "Get the number and student course id of transcript contents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "student",
            "course",
            "id",
            "of",
            "transcript",
            "contents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                55,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "instance_id": 986
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by student_course_id",
        "query_toks": [
            "group",
            "by",
            "student_course_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student_course_id"
        ],
        "question": "Group the records based on student course id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "course",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    55,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "instance_id": 987
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "instance_id": 988
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( * ) , student_course_id from transcript_contents",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student_course_id",
            "from",
            "transcript_contents"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "student_course_id",
            "from",
            "transcript_contents"
        ],
        "question": "Get the number and student course id of transcript contents",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "student",
            "course",
            "id",
            "of",
            "transcript",
            "contents"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                55,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "instance_id": 989
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by student_course_id",
        "query_toks": [
            "group",
            "by",
            "student_course_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student_course_id"
        ],
        "question": "Group the records based on student course id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "course",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    55,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "instance_id": 990
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "instance_id": 991
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id",
        "query_toks": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "from",
            "transcript_contents",
            "join",
            "transcripts",
            "on",
            "transcript_contents.transcript_id",
            "=",
            "transcripts.transcript_id"
        ],
        "query_toks_no_value": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "from",
            "transcript_contents",
            "join",
            "transcripts",
            "on",
            "transcript_contents.transcript_id",
            "=",
            "transcripts.transcript_id"
        ],
        "question": "Get transcript date and transcript id of transcript contents that has transcripts",
        "question_toks": [
            "Get",
            "transcript",
            "date",
            "and",
            "transcript",
            "id",
            "of",
            "transcript",
            "contents",
            "that",
            "has",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ],
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            52,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "instance_id": 992
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by transcript_contents.transcript_id",
        "query_toks": [
            "group",
            "by",
            "transcript_contents.transcript_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "transcript_contents.transcript_id"
        ],
        "question": "Group the records based on transcript id of transcript contents",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "transcript",
            "id",
            "of",
            "transcript",
            "contents"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    56,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "instance_id": 993
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) asc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "question": "Order these records based on the number and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "instance_id": 994
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select transcripts.transcript_date , transcript_contents.transcript_id from transcript_contents join transcripts on transcript_contents.transcript_id = transcripts.transcript_id",
        "query_toks": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "from",
            "transcript_contents",
            "join",
            "transcripts",
            "on",
            "transcript_contents.transcript_id",
            "=",
            "transcripts.transcript_id"
        ],
        "query_toks_no_value": [
            "select",
            "transcripts.transcript_date",
            ",",
            "transcript_contents.transcript_id",
            "from",
            "transcript_contents",
            "join",
            "transcripts",
            "on",
            "transcript_contents.transcript_id",
            "=",
            "transcripts.transcript_id"
        ],
        "question": "Get transcript date and transcript id of transcript contents that has transcripts",
        "question_toks": [
            "Get",
            "transcript",
            "date",
            "and",
            "transcript",
            "id",
            "of",
            "transcript",
            "contents",
            "that",
            "has",
            "transcripts"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        10
                    ],
                    [
                        "table_unit",
                        9
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            52,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                56,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "What is the date and id of the transcript with the least number of results?",
        "instance_id": 995
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "group by transcript_contents.transcript_id",
        "query_toks": [
            "group",
            "by",
            "transcript_contents.transcript_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "transcript_contents.transcript_id"
        ],
        "question": "Group the records based on transcript id of transcript contents",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "transcript",
            "id",
            "of",
            "transcript",
            "contents"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    56,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "What is the date and id of the transcript with the least number of results?",
        "instance_id": 996
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by count ( * ) asc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "question": "Order these records based on the number and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
        "original_question": "What is the date and id of the transcript with the least number of results?",
        "instance_id": 997
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( distinct current_address_id ) from students",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "current_address_id",
            ")",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "current_address_id",
            ")",
            "from",
            "students"
        ],
        "question": "Get the number of distinct current address id of students",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "current",
            "address",
            "id",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                33,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "original_question": "How many different addresses do the students currently live?",
        "instance_id": 998
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select count ( distinct current_address_id ) from students",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "current_address_id",
            ")",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "current_address_id",
            ")",
            "from",
            "students"
        ],
        "question": "Get the number of distinct current address id of students",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "current",
            "address",
            "id",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                33,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "original_question": "What are the different addresses that have students living there?",
        "instance_id": 999
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select other_student_details from students",
        "query_toks": [
            "select",
            "other_student_details",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "other_student_details",
            "from",
            "students"
        ],
        "question": "Get other student details of students",
        "question_toks": [
            "Get",
            "other",
            "student",
            "details",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "original_question": "List all the student details in reversed lexicographical order.",
        "instance_id": 1000
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by other_student_details ",
        "query_toks": [
            "order",
            "by",
            "other_student_details"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "other_student_details"
        ],
        "question": "Order these records based on other student details",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "other",
            "student",
            "details"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "original_question": "List all the student details in reversed lexicographical order.",
        "instance_id": 1001
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select other_student_details from students",
        "query_toks": [
            "select",
            "other_student_details",
            "from",
            "students"
        ],
        "query_toks_no_value": [
            "select",
            "other_student_details",
            "from",
            "students"
        ],
        "question": "Get other student details of students",
        "question_toks": [
            "Get",
            "other",
            "student",
            "details",
            "of",
            "students"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "original_question": "What other details can you tell me about students in reverse alphabetical order?",
        "instance_id": 1002
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "order by other_student_details ",
        "query_toks": [
            "order",
            "by",
            "other_student_details"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "other_student_details"
        ],
        "question": "Order these records based on other student details",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "other",
            "student",
            "details"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            43,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "original_question": "What other details can you tell me about students in reverse alphabetical order?",
        "instance_id": 1003
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select section_description from sections",
        "query_toks": [
            "select",
            "section_description",
            "from",
            "sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_description",
            "from",
            "sections"
        ],
        "question": "Get section description of sections",
        "question_toks": [
            "Get",
            "section",
            "description",
            "of",
            "sections"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "original_question": "Describe the section h.",
        "instance_id": 1004
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where section_name = \"h\"",
        "query_toks": [
            "where",
            "section_name",
            "=",
            "\"h\""
        ],
        "query_toks_no_value": [
            "where",
            "section_name",
            "=",
            "\"h\""
        ],
        "question": "Keep the records that section name is \"h\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "section",
            "name",
            "is",
            "\"h\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"h\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "original_question": "Describe the section h.",
        "instance_id": 1005
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select section_description from sections",
        "query_toks": [
            "select",
            "section_description",
            "from",
            "sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_description",
            "from",
            "sections"
        ],
        "question": "Get section description of sections",
        "question_toks": [
            "Get",
            "section",
            "description",
            "of",
            "sections"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "original_question": "What is the description for the section named h?",
        "instance_id": 1006
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where section_name = \"h\"",
        "query_toks": [
            "where",
            "section_name",
            "=",
            "\"h\""
        ],
        "query_toks_no_value": [
            "where",
            "section_name",
            "=",
            "\"h\""
        ],
        "question": "Keep the records that section name is \"h\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "section",
            "name",
            "is",
            "\"h\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"h\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
        "original_question": "What is the description for the section named h?",
        "instance_id": 1007
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id",
        "query_toks": [
            "select",
            "students.first_name",
            "from",
            "students",
            "join",
            "addresses",
            "on",
            "students.permanent_address_id",
            "=",
            "addresses.address_id"
        ],
        "query_toks_no_value": [
            "select",
            "students.first_name",
            "from",
            "students",
            "join",
            "addresses",
            "on",
            "students.permanent_address_id",
            "=",
            "addresses.address_id"
        ],
        "question": "Get first name of students that has addresses",
        "question_toks": [
            "Get",
            "first",
            "name",
            "of",
            "students",
            "that",
            "has",
            "addresses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "original_question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "instance_id": 1008
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where addresses.country = \"haiti\" or students.cell_mobile_number = \"09700166582\"",
        "query_toks": [
            "where",
            "addresses.country",
            "=",
            "\"haiti\"",
            "or",
            "students.cell_mobile_number",
            "=",
            "\"09700166582\""
        ],
        "query_toks_no_value": [
            "where",
            "addresses.country",
            "=",
            "\"haiti\"",
            "or",
            "students.cell_mobile_number",
            "=",
            "\"09700166582\""
        ],
        "question": "Keep the records that country of addresses is \"haiti\" or cell mobile number of students is \"09700166582\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "of",
            "addresses",
            "is",
            "\"haiti\"",
            "or",
            "cell",
            "mobile",
            "number",
            "of",
            "students",
            "is",
            "\"09700166582\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"haiti\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"09700166582\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "original_question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "instance_id": 1009
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select students.first_name from students join addresses on students.permanent_address_id = addresses.address_id",
        "query_toks": [
            "select",
            "students.first_name",
            "from",
            "students",
            "join",
            "addresses",
            "on",
            "students.permanent_address_id",
            "=",
            "addresses.address_id"
        ],
        "query_toks_no_value": [
            "select",
            "students.first_name",
            "from",
            "students",
            "join",
            "addresses",
            "on",
            "students.permanent_address_id",
            "=",
            "addresses.address_id"
        ],
        "question": "Get first name of students that has addresses",
        "question_toks": [
            "Get",
            "first",
            "name",
            "of",
            "students",
            "that",
            "has",
            "addresses"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "original_question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "instance_id": 1010
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "where addresses.country = \"haiti\" or students.cell_mobile_number = \"09700166582\"",
        "query_toks": [
            "where",
            "addresses.country",
            "=",
            "\"haiti\"",
            "or",
            "students.cell_mobile_number",
            "=",
            "\"09700166582\""
        ],
        "query_toks_no_value": [
            "where",
            "addresses.country",
            "=",
            "\"haiti\"",
            "or",
            "students.cell_mobile_number",
            "=",
            "\"09700166582\""
        ],
        "question": "Keep the records that country of addresses is \"haiti\" or cell mobile number of students is \"09700166582\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "country",
            "of",
            "addresses",
            "is",
            "\"haiti\"",
            "or",
            "cell",
            "mobile",
            "number",
            "of",
            "students",
            "is",
            "\"09700166582\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"haiti\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"09700166582\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'",
        "original_question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "instance_id": 1011
    },
    {
        "db_id": "tvshow",
        "query": "select title from cartoon",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "question": "Get title of cartoon",
        "question_toks": [
            "Get",
            "title",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "original_question": "List the title of all cartoons in alphabetical order.",
        "instance_id": 1012
    },
    {
        "db_id": "tvshow",
        "query": "order by title ",
        "query_toks": [
            "order",
            "by",
            "title"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "title"
        ],
        "question": "Order these records based on title",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "title"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "original_question": "List the title of all cartoons in alphabetical order.",
        "instance_id": 1013
    },
    {
        "db_id": "tvshow",
        "query": "select title from cartoon",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "question": "Get title of cartoon",
        "question_toks": [
            "Get",
            "title",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "original_question": "What are the titles of the cartoons sorted alphabetically?",
        "instance_id": 1014
    },
    {
        "db_id": "tvshow",
        "query": "order by title ",
        "query_toks": [
            "order",
            "by",
            "title"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "title"
        ],
        "question": "Order these records based on title",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "title"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon ORDER BY title",
        "original_question": "What are the titles of the cartoons sorted alphabetically?",
        "instance_id": 1015
    },
    {
        "db_id": "tvshow",
        "query": "select title from cartoon",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "question": "Get title of cartoon",
        "question_toks": [
            "Get",
            "title",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "original_question": "List all cartoon directed by \"Ben Jones\".",
        "instance_id": 1016
    },
    {
        "db_id": "tvshow",
        "query": "where directed_by = \"ben jones\"",
        "query_toks": [
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\""
        ],
        "query_toks_no_value": [
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\""
        ],
        "question": "Keep the records that directed by is \"ben jones\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "directed",
            "by",
            "is",
            "\"ben",
            "jones\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Ben Jones\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "original_question": "List all cartoon directed by \"Ben Jones\".",
        "instance_id": 1017
    },
    {
        "db_id": "tvshow",
        "query": "select title from cartoon",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "question": "Get title of cartoon",
        "question_toks": [
            "Get",
            "title",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "original_question": "What are the names of all cartoons directed by Ben Jones?",
        "instance_id": 1018
    },
    {
        "db_id": "tvshow",
        "query": "where directed_by = \"ben jones\"",
        "query_toks": [
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\""
        ],
        "query_toks_no_value": [
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\""
        ],
        "question": "Keep the records that directed by is \"ben jones\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "directed",
            "by",
            "is",
            "\"ben",
            "jones\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Ben Jones\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "original_question": "What are the names of all cartoons directed by Ben Jones?",
        "instance_id": 1019
    },
    {
        "db_id": "tvshow",
        "query": "select count ( * ) from cartoon",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cartoon"
        ],
        "question": "Get the number of cartoon",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "original_question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "instance_id": 1020
    },
    {
        "db_id": "tvshow",
        "query": "where written_by = \"joseph kuhr\"",
        "query_toks": [
            "where",
            "written_by",
            "=",
            "\"joseph",
            "kuhr\""
        ],
        "query_toks_no_value": [
            "where",
            "written_by",
            "=",
            "\"joseph",
            "kuhr\""
        ],
        "question": "Keep the records that written by is \"joseph kuhr\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "written",
            "by",
            "is",
            "\"joseph",
            "kuhr\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"Joseph Kuhr\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "original_question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "instance_id": 1021
    },
    {
        "db_id": "tvshow",
        "query": "select count ( * ) from cartoon",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "cartoon"
        ],
        "question": "Get the number of cartoon",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "original_question": "What is the number of cartoones written by Joseph Kuhr?",
        "instance_id": 1022
    },
    {
        "db_id": "tvshow",
        "query": "where written_by = \"joseph kuhr\"",
        "query_toks": [
            "where",
            "written_by",
            "=",
            "\"joseph",
            "kuhr\""
        ],
        "query_toks_no_value": [
            "where",
            "written_by",
            "=",
            "\"joseph",
            "kuhr\""
        ],
        "question": "Keep the records that written by is \"joseph kuhr\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "written",
            "by",
            "is",
            "\"joseph",
            "kuhr\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"Joseph Kuhr\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "original_question": "What is the number of cartoones written by Joseph Kuhr?",
        "instance_id": 1023
    },
    {
        "db_id": "tvshow",
        "query": "select title , directed_by from cartoon",
        "query_toks": [
            "select",
            "title",
            ",",
            "directed_by",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            ",",
            "directed_by",
            "from",
            "cartoon"
        ],
        "question": "Get title and directed by of cartoon",
        "question_toks": [
            "Get",
            "title",
            "and",
            "directed",
            "by",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "original_question": "list all cartoon titles and their directors ordered by their air date",
        "instance_id": 1024
    },
    {
        "db_id": "tvshow",
        "query": "order by original_air_date ",
        "query_toks": [
            "order",
            "by",
            "original_air_date"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "original_air_date"
        ],
        "question": "Order these records based on original air date",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "original",
            "air",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "original_question": "list all cartoon titles and their directors ordered by their air date",
        "instance_id": 1025
    },
    {
        "db_id": "tvshow",
        "query": "select title , directed_by from cartoon",
        "query_toks": [
            "select",
            "title",
            ",",
            "directed_by",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            ",",
            "directed_by",
            "from",
            "cartoon"
        ],
        "question": "Get title and directed by of cartoon",
        "question_toks": [
            "Get",
            "title",
            "and",
            "directed",
            "by",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "original_question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "instance_id": 1026
    },
    {
        "db_id": "tvshow",
        "query": "order by original_air_date ",
        "query_toks": [
            "order",
            "by",
            "original_air_date"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "original_air_date"
        ],
        "question": "Order these records based on original air date",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "original",
            "air",
            "date"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
        "original_question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "instance_id": 1027
    },
    {
        "db_id": "tvshow",
        "query": "select title from cartoon",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "question": "Get title of cartoon",
        "question_toks": [
            "Get",
            "title",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "original_question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "instance_id": 1028
    },
    {
        "db_id": "tvshow",
        "query": "where directed_by = \"ben jones\" or directed_by = \"brandon vietti\"",
        "query_toks": [
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "query_toks_no_value": [
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "question": "Keep the records that directed by is \"ben jones\" or directed by is \"brandon vietti\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "directed",
            "by",
            "is",
            "\"ben",
            "jones\"",
            "or",
            "directed",
            "by",
            "is",
            "\"brandon",
            "vietti\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Ben Jones\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Brandon Vietti\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "original_question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "instance_id": 1029
    },
    {
        "db_id": "tvshow",
        "query": "select title from cartoon",
        "query_toks": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            "from",
            "cartoon"
        ],
        "question": "Get title of cartoon",
        "question_toks": [
            "Get",
            "title",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "original_question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "instance_id": 1030
    },
    {
        "db_id": "tvshow",
        "query": "where directed_by = \"ben jones\" or directed_by = \"brandon vietti\"",
        "query_toks": [
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "query_toks_no_value": [
            "where",
            "directed_by",
            "=",
            "\"ben",
            "jones\"",
            "or",
            "directed_by",
            "=",
            "\"brandon",
            "vietti\""
        ],
        "question": "Keep the records that directed by is \"ben jones\" or directed by is \"brandon vietti\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "directed",
            "by",
            "is",
            "\"ben",
            "jones\"",
            "or",
            "directed",
            "by",
            "is",
            "\"brandon",
            "vietti\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Ben Jones\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "\"Brandon Vietti\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
        "original_question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "instance_id": 1031
    },
    {
        "db_id": "tvshow",
        "query": "select country , count ( * ) from tv_channel",
        "query_toks": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number and country of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "country",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "instance_id": 1032
    },
    {
        "db_id": "tvshow",
        "query": "group by country",
        "query_toks": [
            "group",
            "by",
            "country"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country"
        ],
        "question": "Group the records based on country",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "instance_id": 1033
    },
    {
        "db_id": "tvshow",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "instance_id": 1034
    },
    {
        "db_id": "tvshow",
        "query": "select country , count ( * ) from tv_channel",
        "query_toks": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "country",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number and country of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "country",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "What is the country with the most number of TV Channels and how many does it have?",
        "instance_id": 1035
    },
    {
        "db_id": "tvshow",
        "query": "group by country",
        "query_toks": [
            "group",
            "by",
            "country"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country"
        ],
        "question": "Group the records based on country",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "What is the country with the most number of TV Channels and how many does it have?",
        "instance_id": 1036
    },
    {
        "db_id": "tvshow",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
        "original_question": "What is the country with the most number of TV Channels and how many does it have?",
        "instance_id": 1037
    },
    {
        "db_id": "tvshow",
        "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number of distinct series name and the number of distinct content of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "series",
            "name",
            "and",
            "the",
            "number",
            "of",
            "distinct",
            "content",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                true
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "original_question": "List the number of different series names and contents in the TV Channel table.",
        "instance_id": 1038
    },
    {
        "db_id": "tvshow",
        "query": "select count ( distinct series_name ) , count ( distinct content ) from tv_channel",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number of distinct series name and the number of distinct content of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "series",
            "name",
            "and",
            "the",
            "number",
            "of",
            "distinct",
            "content",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                true
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
        "original_question": "How many different series and contents are listed in the TV Channel table?",
        "instance_id": 1039
    },
    {
        "db_id": "tvshow",
        "query": "select content from tv_channel",
        "query_toks": [
            "select",
            "content",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "content",
            "from",
            "tv_channel"
        ],
        "question": "Get content of tv channel",
        "question_toks": [
            "Get",
            "content",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "original_question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "instance_id": 1040
    },
    {
        "db_id": "tvshow",
        "query": "where series_name = \"sky radio\"",
        "query_toks": [
            "where",
            "series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "query_toks_no_value": [
            "where",
            "series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "question": "Keep the records that series name is \"sky radio\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "series",
            "name",
            "is",
            "\"sky",
            "radio\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "original_question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "instance_id": 1041
    },
    {
        "db_id": "tvshow",
        "query": "select content from tv_channel",
        "query_toks": [
            "select",
            "content",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "content",
            "from",
            "tv_channel"
        ],
        "question": "Get content of tv channel",
        "question_toks": [
            "Get",
            "content",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "original_question": "What is the content of the series Sky Radio?",
        "instance_id": 1042
    },
    {
        "db_id": "tvshow",
        "query": "where series_name = \"sky radio\"",
        "query_toks": [
            "where",
            "series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "query_toks_no_value": [
            "where",
            "series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "question": "Keep the records that series name is \"sky radio\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "series",
            "name",
            "is",
            "\"sky",
            "radio\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "original_question": "What is the content of the series Sky Radio?",
        "instance_id": 1043
    },
    {
        "db_id": "tvshow",
        "query": "select package_option from tv_channel",
        "query_toks": [
            "select",
            "package_option",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            "from",
            "tv_channel"
        ],
        "question": "Get package option of tv channel",
        "question_toks": [
            "Get",
            "package",
            "option",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "original_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "instance_id": 1044
    },
    {
        "db_id": "tvshow",
        "query": "where series_name = \"sky radio\"",
        "query_toks": [
            "where",
            "series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "query_toks_no_value": [
            "where",
            "series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "question": "Keep the records that series name is \"sky radio\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "series",
            "name",
            "is",
            "\"sky",
            "radio\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "original_question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "instance_id": 1045
    },
    {
        "db_id": "tvshow",
        "query": "select package_option from tv_channel",
        "query_toks": [
            "select",
            "package_option",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            "from",
            "tv_channel"
        ],
        "question": "Get package option of tv channel",
        "question_toks": [
            "Get",
            "package",
            "option",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "original_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "instance_id": 1046
    },
    {
        "db_id": "tvshow",
        "query": "where series_name = \"sky radio\"",
        "query_toks": [
            "where",
            "series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "query_toks_no_value": [
            "where",
            "series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "question": "Keep the records that series name is \"sky radio\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "series",
            "name",
            "is",
            "\"sky",
            "radio\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "original_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "instance_id": 1047
    },
    {
        "db_id": "tvshow",
        "query": "select count ( * ) from tv_channel",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "original_question": "How many TV Channel using language English?",
        "instance_id": 1048
    },
    {
        "db_id": "tvshow",
        "query": "where language = \"english\"",
        "query_toks": [
            "where",
            "language",
            "=",
            "\"english\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "=",
            "\"english\""
        ],
        "question": "Keep the records that language is \"english\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "\"english\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "original_question": "How many TV Channel using language English?",
        "instance_id": 1049
    },
    {
        "db_id": "tvshow",
        "query": "select count ( * ) from tv_channel",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "original_question": "How many TV Channels use the English language?",
        "instance_id": 1050
    },
    {
        "db_id": "tvshow",
        "query": "where language = \"english\"",
        "query_toks": [
            "where",
            "language",
            "=",
            "\"english\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "=",
            "\"english\""
        ],
        "question": "Keep the records that language is \"english\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "\"english\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
        "original_question": "How many TV Channels use the English language?",
        "instance_id": 1051
    },
    {
        "db_id": "tvshow",
        "query": "select language , count ( * ) from tv_channel",
        "query_toks": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number and language of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "language",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "original_question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "instance_id": 1052
    },
    {
        "db_id": "tvshow",
        "query": "group by language",
        "query_toks": [
            "group",
            "by",
            "language"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "language"
        ],
        "question": "Group the records based on language",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "original_question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "instance_id": 1053
    },
    {
        "db_id": "tvshow",
        "query": "order by count ( * ) asc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "question": "Order these records based on the number and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "original_question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "instance_id": 1054
    },
    {
        "db_id": "tvshow",
        "query": "select language , count ( * ) from tv_channel",
        "query_toks": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number and language of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "language",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "original_question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "instance_id": 1055
    },
    {
        "db_id": "tvshow",
        "query": "group by language",
        "query_toks": [
            "group",
            "by",
            "language"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "language"
        ],
        "question": "Group the records based on language",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "original_question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "instance_id": 1056
    },
    {
        "db_id": "tvshow",
        "query": "order by count ( * ) asc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "question": "Order these records based on the number and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
        "original_question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "instance_id": 1057
    },
    {
        "db_id": "tvshow",
        "query": "select language , count ( * ) from tv_channel",
        "query_toks": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number and language of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "language",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "original_question": "List each language and the number of TV Channels using it.",
        "instance_id": 1058
    },
    {
        "db_id": "tvshow",
        "query": "group by language",
        "query_toks": [
            "group",
            "by",
            "language"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "language"
        ],
        "question": "Group the records based on language",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "original_question": "List each language and the number of TV Channels using it.",
        "instance_id": 1059
    },
    {
        "db_id": "tvshow",
        "query": "select language , count ( * ) from tv_channel",
        "query_toks": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "Get the number and language of tv channel",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "language",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "original_question": "For each language, list the number of TV Channels that use it.",
        "instance_id": 1060
    },
    {
        "db_id": "tvshow",
        "query": "group by language",
        "query_toks": [
            "group",
            "by",
            "language"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "language"
        ],
        "question": "Group the records based on language",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "original_question": "For each language, list the number of TV Channels that use it.",
        "instance_id": 1061
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel",
        "query_toks": [
            "select",
            "tv_channel.series_name",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "query_toks_no_value": [
            "select",
            "tv_channel.series_name",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "question": "Get series name of tv channel that has cartoon",
        "question_toks": [
            "Get",
            "series",
            "name",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "original_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "instance_id": 1062
    },
    {
        "db_id": "tvshow",
        "query": "where cartoon.title = \"the rise of the blue beetle !\"",
        "query_toks": [
            "where",
            "cartoon.title",
            "=",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle",
            "!\""
        ],
        "query_toks_no_value": [
            "where",
            "cartoon.title",
            "=",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle",
            "!\""
        ],
        "question": "Keep the records that title of cartoon is \"the rise of the blue beetle !\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "title",
            "of",
            "cartoon",
            "is",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle",
            "!\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"The Rise of the Blue Beetle!\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "original_question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "instance_id": 1063
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_channel join cartoon on tv_channel.id = cartoon.channel",
        "query_toks": [
            "select",
            "tv_channel.series_name",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "query_toks_no_value": [
            "select",
            "tv_channel.series_name",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "question": "Get series name of tv channel that has cartoon",
        "question_toks": [
            "Get",
            "series",
            "name",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "original_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "instance_id": 1064
    },
    {
        "db_id": "tvshow",
        "query": "where cartoon.title = \"the rise of the blue beetle !\"",
        "query_toks": [
            "where",
            "cartoon.title",
            "=",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle",
            "!\""
        ],
        "query_toks_no_value": [
            "where",
            "cartoon.title",
            "=",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle",
            "!\""
        ],
        "question": "Keep the records that title of cartoon is \"the rise of the blue beetle !\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "title",
            "of",
            "cartoon",
            "is",
            "\"the",
            "rise",
            "of",
            "the",
            "blue",
            "beetle",
            "!\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"The Rise of the Blue Beetle!\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
        "original_question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "instance_id": 1065
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel",
        "query_toks": [
            "select",
            "cartoon.title",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "query_toks_no_value": [
            "select",
            "cartoon.title",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "question": "Get title of tv channel that has cartoon",
        "question_toks": [
            "Get",
            "title",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "instance_id": 1066
    },
    {
        "db_id": "tvshow",
        "query": "where tv_channel.series_name = \"sky radio\"",
        "query_toks": [
            "where",
            "tv_channel.series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "query_toks_no_value": [
            "where",
            "tv_channel.series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "question": "Keep the records that series name of tv channel is \"sky radio\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "series",
            "name",
            "of",
            "tv",
            "channel",
            "is",
            "\"sky",
            "radio\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "instance_id": 1067
    },
    {
        "db_id": "tvshow",
        "query": "select cartoon.title from tv_channel join cartoon on tv_channel.id = cartoon.channel",
        "query_toks": [
            "select",
            "cartoon.title",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "query_toks_no_value": [
            "select",
            "cartoon.title",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "question": "Get title of tv channel that has cartoon",
        "question_toks": [
            "Get",
            "title",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "instance_id": 1068
    },
    {
        "db_id": "tvshow",
        "query": "where tv_channel.series_name = \"sky radio\"",
        "query_toks": [
            "where",
            "tv_channel.series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "query_toks_no_value": [
            "where",
            "tv_channel.series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "question": "Keep the records that series name of tv channel is \"sky radio\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "series",
            "name",
            "of",
            "tv",
            "channel",
            "is",
            "\"sky",
            "radio\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "instance_id": 1069
    },
    {
        "db_id": "tvshow",
        "query": "select episode from tv_series",
        "query_toks": [
            "select",
            "episode",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            "from",
            "tv_series"
        ],
        "question": "Get episode of tv series",
        "question_toks": [
            "Get",
            "episode",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "original_question": "List the Episode of all TV series sorted by rating.",
        "instance_id": 1070
    },
    {
        "db_id": "tvshow",
        "query": "order by rating ",
        "query_toks": [
            "order",
            "by",
            "rating"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "rating"
        ],
        "question": "Order these records based on rating",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "rating"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "original_question": "List the Episode of all TV series sorted by rating.",
        "instance_id": 1071
    },
    {
        "db_id": "tvshow",
        "query": "select episode from tv_series",
        "query_toks": [
            "select",
            "episode",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            "from",
            "tv_series"
        ],
        "question": "Get episode of tv series",
        "question_toks": [
            "Get",
            "episode",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "original_question": "What are all of the episodes ordered by ratings?",
        "instance_id": 1072
    },
    {
        "db_id": "tvshow",
        "query": "order by rating ",
        "query_toks": [
            "order",
            "by",
            "rating"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "rating"
        ],
        "question": "Order these records based on rating",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "rating"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Episode FROM TV_series ORDER BY rating",
        "original_question": "What are all of the episodes ordered by ratings?",
        "instance_id": 1073
    },
    {
        "db_id": "tvshow",
        "query": "select episode , rating from tv_series",
        "query_toks": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series"
        ],
        "question": "Get episode and rating of tv series",
        "question_toks": [
            "Get",
            "episode",
            "and",
            "rating",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "original_question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "instance_id": 1074
    },
    {
        "db_id": "tvshow",
        "query": "order by rating desc ",
        "query_toks": [
            "order",
            "by",
            "rating",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "rating",
            "desc"
        ],
        "question": "Order these records based on rating and sort them in descending order, and return the top 3 records",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "rating",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "3",
            "records"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "original_question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "instance_id": 1075
    },
    {
        "db_id": "tvshow",
        "query": "select episode , rating from tv_series",
        "query_toks": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series"
        ],
        "question": "Get episode and rating of tv series",
        "question_toks": [
            "Get",
            "episode",
            "and",
            "rating",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "original_question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "instance_id": 1076
    },
    {
        "db_id": "tvshow",
        "query": "order by rating desc ",
        "query_toks": [
            "order",
            "by",
            "rating",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "rating",
            "desc"
        ],
        "question": "Order these records based on rating and sort them in descending order, and return the top 3 records",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "rating",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "3",
            "records"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "original_question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "instance_id": 1077
    },
    {
        "db_id": "tvshow",
        "query": "select max ( share ) , min ( share ) from tv_series",
        "query_toks": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "tv_series"
        ],
        "question": "Get the maximum value of share and the minimum value of share of tv series",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "share",
            "and",
            "the",
            "minimum",
            "value",
            "of",
            "share",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "original_question": "What is minimum and maximum share of TV series?",
        "instance_id": 1078
    },
    {
        "db_id": "tvshow",
        "query": "select max ( share ) , min ( share ) from tv_series",
        "query_toks": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "tv_series"
        ],
        "question": "Get the maximum value of share and the minimum value of share of tv series",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "share",
            "and",
            "the",
            "minimum",
            "value",
            "of",
            "share",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
        "original_question": "What is the maximum and minimum share for the TV series?",
        "instance_id": 1079
    },
    {
        "db_id": "tvshow",
        "query": "select air_date from tv_series",
        "query_toks": [
            "select",
            "air_date",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "air_date",
            "from",
            "tv_series"
        ],
        "question": "Get air date of tv series",
        "question_toks": [
            "Get",
            "air",
            "date",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "original_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "instance_id": 1080
    },
    {
        "db_id": "tvshow",
        "query": "where episode = \"a love of a lifetime\"",
        "query_toks": [
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "query_toks_no_value": [
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "question": "Keep the records that episode is \"a love of a lifetime\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "episode",
            "is",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"A Love of a Lifetime\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "original_question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "instance_id": 1081
    },
    {
        "db_id": "tvshow",
        "query": "select air_date from tv_series",
        "query_toks": [
            "select",
            "air_date",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "air_date",
            "from",
            "tv_series"
        ],
        "question": "Get air date of tv series",
        "question_toks": [
            "Get",
            "air",
            "date",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "original_question": "When did the episode \"A Love of a Lifetime\" air?",
        "instance_id": 1082
    },
    {
        "db_id": "tvshow",
        "query": "where episode = \"a love of a lifetime\"",
        "query_toks": [
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "query_toks_no_value": [
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "question": "Keep the records that episode is \"a love of a lifetime\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "episode",
            "is",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"A Love of a Lifetime\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "original_question": "When did the episode \"A Love of a Lifetime\" air?",
        "instance_id": 1083
    },
    {
        "db_id": "tvshow",
        "query": "select weekly_rank from tv_series",
        "query_toks": [
            "select",
            "weekly_rank",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "weekly_rank",
            "from",
            "tv_series"
        ],
        "question": "Get weekly rank of tv series",
        "question_toks": [
            "Get",
            "weekly",
            "rank",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "original_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "instance_id": 1084
    },
    {
        "db_id": "tvshow",
        "query": "where episode = \"a love of a lifetime\"",
        "query_toks": [
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "query_toks_no_value": [
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "question": "Keep the records that episode is \"a love of a lifetime\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "episode",
            "is",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"A Love of a Lifetime\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "original_question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "instance_id": 1085
    },
    {
        "db_id": "tvshow",
        "query": "select weekly_rank from tv_series",
        "query_toks": [
            "select",
            "weekly_rank",
            "from",
            "tv_series"
        ],
        "query_toks_no_value": [
            "select",
            "weekly_rank",
            "from",
            "tv_series"
        ],
        "question": "Get weekly rank of tv series",
        "question_toks": [
            "Get",
            "weekly",
            "rank",
            "of",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "original_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "instance_id": 1086
    },
    {
        "db_id": "tvshow",
        "query": "where episode = \"a love of a lifetime\"",
        "query_toks": [
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "query_toks_no_value": [
            "where",
            "episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "question": "Keep the records that episode is \"a love of a lifetime\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "episode",
            "is",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"A Love of a Lifetime\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "original_question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "instance_id": 1087
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel",
        "query_toks": [
            "select",
            "tv_channel.series_name",
            "from",
            "tv_channel",
            "join",
            "tv_series",
            "on",
            "tv_channel.id",
            "=",
            "tv_series.channel"
        ],
        "query_toks_no_value": [
            "select",
            "tv_channel.series_name",
            "from",
            "tv_channel",
            "join",
            "tv_series",
            "on",
            "tv_channel.id",
            "=",
            "tv_series.channel"
        ],
        "question": "Get series name of tv channel that has tv series",
        "question_toks": [
            "Get",
            "series",
            "name",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "original_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "instance_id": 1088
    },
    {
        "db_id": "tvshow",
        "query": "where tv_series.episode = \"a love of a lifetime\"",
        "query_toks": [
            "where",
            "tv_series.episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "query_toks_no_value": [
            "where",
            "tv_series.episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "question": "Keep the records that episode of tv series is \"a love of a lifetime\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "episode",
            "of",
            "tv",
            "series",
            "is",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"A Love of a Lifetime\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "original_question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "instance_id": 1089
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel",
        "query_toks": [
            "select",
            "tv_channel.series_name",
            "from",
            "tv_channel",
            "join",
            "tv_series",
            "on",
            "tv_channel.id",
            "=",
            "tv_series.channel"
        ],
        "query_toks_no_value": [
            "select",
            "tv_channel.series_name",
            "from",
            "tv_channel",
            "join",
            "tv_series",
            "on",
            "tv_channel.id",
            "=",
            "tv_series.channel"
        ],
        "question": "Get series name of tv channel that has tv series",
        "question_toks": [
            "Get",
            "series",
            "name",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "original_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "instance_id": 1090
    },
    {
        "db_id": "tvshow",
        "query": "where tv_series.episode = \"a love of a lifetime\"",
        "query_toks": [
            "where",
            "tv_series.episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "query_toks_no_value": [
            "where",
            "tv_series.episode",
            "=",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "question": "Keep the records that episode of tv series is \"a love of a lifetime\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "episode",
            "of",
            "tv",
            "series",
            "is",
            "\"a",
            "love",
            "of",
            "a",
            "lifetime\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"A Love of a Lifetime\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
        "original_question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "instance_id": 1091
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel",
        "query_toks": [
            "select",
            "tv_series.episode",
            "from",
            "tv_channel",
            "join",
            "tv_series",
            "on",
            "tv_channel.id",
            "=",
            "tv_series.channel"
        ],
        "query_toks_no_value": [
            "select",
            "tv_series.episode",
            "from",
            "tv_channel",
            "join",
            "tv_series",
            "on",
            "tv_channel.id",
            "=",
            "tv_series.channel"
        ],
        "question": "Get episode of tv channel that has tv series",
        "question_toks": [
            "Get",
            "episode",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "instance_id": 1092
    },
    {
        "db_id": "tvshow",
        "query": "where tv_channel.series_name = \"sky radio\"",
        "query_toks": [
            "where",
            "tv_channel.series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "query_toks_no_value": [
            "where",
            "tv_channel.series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "question": "Keep the records that series name of tv channel is \"sky radio\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "series",
            "name",
            "of",
            "tv",
            "channel",
            "is",
            "\"sky",
            "radio\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "instance_id": 1093
    },
    {
        "db_id": "tvshow",
        "query": "select tv_series.episode from tv_channel join tv_series on tv_channel.id = tv_series.channel",
        "query_toks": [
            "select",
            "tv_series.episode",
            "from",
            "tv_channel",
            "join",
            "tv_series",
            "on",
            "tv_channel.id",
            "=",
            "tv_series.channel"
        ],
        "query_toks_no_value": [
            "select",
            "tv_series.episode",
            "from",
            "tv_channel",
            "join",
            "tv_series",
            "on",
            "tv_channel.id",
            "=",
            "tv_series.channel"
        ],
        "question": "Get episode of tv channel that has tv series",
        "question_toks": [
            "Get",
            "episode",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "tv",
            "series"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            18,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_question": "What is the episode for the TV series named \"Sky Radio\"?",
        "instance_id": 1094
    },
    {
        "db_id": "tvshow",
        "query": "where tv_channel.series_name = \"sky radio\"",
        "query_toks": [
            "where",
            "tv_channel.series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "query_toks_no_value": [
            "where",
            "tv_channel.series_name",
            "=",
            "\"sky",
            "radio\""
        ],
        "question": "Keep the records that series name of tv channel is \"sky radio\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "series",
            "name",
            "of",
            "tv",
            "channel",
            "is",
            "\"sky",
            "radio\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Sky Radio\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
        "original_question": "What is the episode for the TV series named \"Sky Radio\"?",
        "instance_id": 1095
    },
    {
        "db_id": "tvshow",
        "query": "select count ( * ) , directed_by from cartoon",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "directed_by",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "directed_by",
            "from",
            "cartoon"
        ],
        "question": "Get the number and directed by of cartoon",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "directed",
            "by",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "original_question": "Find the number of cartoons directed by each of the listed directors.",
        "instance_id": 1096
    },
    {
        "db_id": "tvshow",
        "query": "group by directed_by",
        "query_toks": [
            "group",
            "by",
            "directed_by"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "directed_by"
        ],
        "question": "Group the records based on directed by",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "directed",
            "by"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "original_question": "Find the number of cartoons directed by each of the listed directors.",
        "instance_id": 1097
    },
    {
        "db_id": "tvshow",
        "query": "select count ( * ) , directed_by from cartoon",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "directed_by",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "directed_by",
            "from",
            "cartoon"
        ],
        "question": "Get the number and directed by of cartoon",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "directed",
            "by",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "original_question": "How many cartoons did each director create?",
        "instance_id": 1098
    },
    {
        "db_id": "tvshow",
        "query": "group by directed_by",
        "query_toks": [
            "group",
            "by",
            "directed_by"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "directed_by"
        ],
        "question": "Group the records based on directed by",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "directed",
            "by"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
        "original_question": "How many cartoons did each director create?",
        "instance_id": 1099
    },
    {
        "db_id": "tvshow",
        "query": "select production_code , channel from cartoon",
        "query_toks": [
            "select",
            "production_code",
            ",",
            "channel",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "production_code",
            ",",
            "channel",
            "from",
            "cartoon"
        ],
        "question": "Get production code and channel of cartoon",
        "question_toks": [
            "Get",
            "production",
            "code",
            "and",
            "channel",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "original_question": "Find the production code and channel of the most recently aired cartoon .",
        "instance_id": 1100
    },
    {
        "db_id": "tvshow",
        "query": "order by original_air_date desc ",
        "query_toks": [
            "order",
            "by",
            "original_air_date",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "original_air_date",
            "desc"
        ],
        "question": "Order these records based on original air date and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "original",
            "air",
            "date",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "original_question": "Find the production code and channel of the most recently aired cartoon .",
        "instance_id": 1101
    },
    {
        "db_id": "tvshow",
        "query": "select production_code , channel from cartoon",
        "query_toks": [
            "select",
            "production_code",
            ",",
            "channel",
            "from",
            "cartoon"
        ],
        "query_toks_no_value": [
            "select",
            "production_code",
            ",",
            "channel",
            "from",
            "cartoon"
        ],
        "question": "Get production code and channel of cartoon",
        "question_toks": [
            "Get",
            "production",
            "code",
            "and",
            "channel",
            "of",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "original_question": "What is the produdction code and channel of the most recent cartoon ?",
        "instance_id": 1102
    },
    {
        "db_id": "tvshow",
        "query": "order by original_air_date desc ",
        "query_toks": [
            "order",
            "by",
            "original_air_date",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "original_air_date",
            "desc"
        ],
        "question": "Order these records based on original air date and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "original",
            "air",
            "date",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1",
        "original_question": "What is the produdction code and channel of the most recent cartoon ?",
        "instance_id": 1103
    },
    {
        "db_id": "tvshow",
        "query": "select package_option , series_name from tv_channel",
        "query_toks": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel"
        ],
        "question": "Get package option and series name of tv channel",
        "question_toks": [
            "Get",
            "package",
            "option",
            "and",
            "series",
            "name",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "original_question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "instance_id": 1104
    },
    {
        "db_id": "tvshow",
        "query": "where hight_definition_tv = \"yes\"",
        "query_toks": [
            "where",
            "hight_definition_tv",
            "=",
            "\"yes\""
        ],
        "query_toks_no_value": [
            "where",
            "hight_definition_tv",
            "=",
            "\"yes\""
        ],
        "question": "Keep the records that hight definition tv is \"yes\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "hight",
            "definition",
            "tv",
            "is",
            "\"yes\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"yes\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "original_question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "instance_id": 1105
    },
    {
        "db_id": "tvshow",
        "query": "select package_option , series_name from tv_channel",
        "query_toks": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel"
        ],
        "question": "Get package option and series name of tv channel",
        "question_toks": [
            "Get",
            "package",
            "option",
            "and",
            "series",
            "name",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "original_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "instance_id": 1106
    },
    {
        "db_id": "tvshow",
        "query": "where hight_definition_tv = \"yes\"",
        "query_toks": [
            "where",
            "hight_definition_tv",
            "=",
            "\"yes\""
        ],
        "query_toks_no_value": [
            "where",
            "hight_definition_tv",
            "=",
            "\"yes\""
        ],
        "question": "Keep the records that hight definition tv is \"yes\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "hight",
            "definition",
            "tv",
            "is",
            "\"yes\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"yes\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
        "original_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "instance_id": 1107
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel",
        "query_toks": [
            "select",
            "tv_channel.country",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "query_toks_no_value": [
            "select",
            "tv_channel.country",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "question": "Get country of tv channel that has cartoon",
        "question_toks": [
            "Get",
            "country",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "instance_id": 1108
    },
    {
        "db_id": "tvshow",
        "query": "where cartoon.written_by = \"todd casey\"",
        "query_toks": [
            "where",
            "cartoon.written_by",
            "=",
            "\"todd",
            "casey\""
        ],
        "query_toks_no_value": [
            "where",
            "cartoon.written_by",
            "=",
            "\"todd",
            "casey\""
        ],
        "question": "Keep the records that written by of cartoon is \"todd casey\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "written",
            "by",
            "of",
            "cartoon",
            "is",
            "\"todd",
            "casey\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"Todd Casey\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "original_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "instance_id": 1109
    },
    {
        "db_id": "tvshow",
        "query": "select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel",
        "query_toks": [
            "select",
            "tv_channel.country",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "query_toks_no_value": [
            "select",
            "tv_channel.country",
            "from",
            "tv_channel",
            "join",
            "cartoon",
            "on",
            "tv_channel.id",
            "=",
            "cartoon.channel"
        ],
        "question": "Get country of tv channel that has cartoon",
        "question_toks": [
            "Get",
            "country",
            "of",
            "tv",
            "channel",
            "that",
            "has",
            "cartoon"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "instance_id": 1110
    },
    {
        "db_id": "tvshow",
        "query": "where cartoon.written_by = \"todd casey\"",
        "query_toks": [
            "where",
            "cartoon.written_by",
            "=",
            "\"todd",
            "casey\""
        ],
        "query_toks_no_value": [
            "where",
            "cartoon.written_by",
            "=",
            "\"todd",
            "casey\""
        ],
        "question": "Keep the records that written by of cartoon is \"todd casey\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "written",
            "by",
            "of",
            "cartoon",
            "is",
            "\"todd",
            "casey\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    "\"Todd Casey\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
        "original_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "instance_id": 1111
    },
    {
        "db_id": "tvshow",
        "query": "select pixel_aspect_ratio_par , country from tv_channel",
        "query_toks": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel"
        ],
        "question": "Get pixel aspect ratio par and country of tv channel",
        "question_toks": [
            "Get",
            "pixel",
            "aspect",
            "ratio",
            "par",
            "and",
            "country",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "original_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "instance_id": 1112
    },
    {
        "db_id": "tvshow",
        "query": "where language != \"english\"",
        "query_toks": [
            "where",
            "language",
            "!=",
            "\"english\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "!=",
            "\"english\""
        ],
        "question": "Keep the records that language is not \"english\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "not",
            "\"english\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "original_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "instance_id": 1113
    },
    {
        "db_id": "tvshow",
        "query": "select pixel_aspect_ratio_par , country from tv_channel",
        "query_toks": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel"
        ],
        "question": "Get pixel aspect ratio par and country of tv channel",
        "question_toks": [
            "Get",
            "pixel",
            "aspect",
            "ratio",
            "par",
            "and",
            "country",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "original_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "instance_id": 1114
    },
    {
        "db_id": "tvshow",
        "query": "where language != \"english\"",
        "query_toks": [
            "where",
            "language",
            "!=",
            "\"english\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "!=",
            "\"english\""
        ],
        "question": "Keep the records that language is not \"english\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "not",
            "\"english\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
        "original_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "instance_id": 1115
    },
    {
        "db_id": "tvshow",
        "query": "select id from tv_channel",
        "query_toks": [
            "select",
            "id",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "tv_channel"
        ],
        "question": "Get id of tv channel",
        "question_toks": [
            "Get",
            "id",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "original_question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "instance_id": 1116
    },
    {
        "db_id": "tvshow",
        "query": "group by country having count ( * ) > 2",
        "query_toks": [
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on country that the number is greater than 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "original_question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "instance_id": 1117
    },
    {
        "db_id": "tvshow",
        "query": "select id from tv_channel",
        "query_toks": [
            "select",
            "id",
            "from",
            "tv_channel"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "tv_channel"
        ],
        "question": "Get id of tv channel",
        "question_toks": [
            "Get",
            "id",
            "of",
            "tv",
            "channel"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "original_question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "instance_id": 1118
    },
    {
        "db_id": "tvshow",
        "query": "group by country having count ( * ) > 2",
        "query_toks": [
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on country that the number is greater than 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "country",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
        "original_question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "instance_id": 1119
    },
    {
        "db_id": "poker_player",
        "query": "select count ( * ) from poker_player",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player"
        ],
        "question": "Get the number of poker player",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM poker_player",
        "original_question": "How many poker players are there?",
        "instance_id": 1120
    },
    {
        "db_id": "poker_player",
        "query": "select count ( * ) from poker_player",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "poker_player"
        ],
        "question": "Get the number of poker player",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM poker_player",
        "original_question": "Count the number of poker players.",
        "instance_id": 1121
    },
    {
        "db_id": "poker_player",
        "query": "select earnings from poker_player",
        "query_toks": [
            "select",
            "earnings",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "earnings",
            "from",
            "poker_player"
        ],
        "question": "Get earnings of poker player",
        "question_toks": [
            "Get",
            "earnings",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "original_question": "List the earnings of poker players in descending order.",
        "instance_id": 1122
    },
    {
        "db_id": "poker_player",
        "query": "order by earnings ",
        "query_toks": [
            "order",
            "by",
            "earnings"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "earnings"
        ],
        "question": "Order these records based on earnings",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "earnings"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "original_question": "List the earnings of poker players in descending order.",
        "instance_id": 1123
    },
    {
        "db_id": "poker_player",
        "query": "select earnings from poker_player",
        "query_toks": [
            "select",
            "earnings",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "earnings",
            "from",
            "poker_player"
        ],
        "question": "Get earnings of poker player",
        "question_toks": [
            "Get",
            "earnings",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "original_question": "What are the earnings of poker players, ordered descending by value?",
        "instance_id": 1124
    },
    {
        "db_id": "poker_player",
        "query": "order by earnings ",
        "query_toks": [
            "order",
            "by",
            "earnings"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "earnings"
        ],
        "question": "Order these records based on earnings",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "earnings"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "original_question": "What are the earnings of poker players, ordered descending by value?",
        "instance_id": 1125
    },
    {
        "db_id": "poker_player",
        "query": "select final_table_made , best_finish from poker_player",
        "query_toks": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "question": "Get final table made and best finish of poker player",
        "question_toks": [
            "Get",
            "final",
            "table",
            "made",
            "and",
            "best",
            "finish",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "original_question": "List the final tables made and the best finishes of poker players.",
        "instance_id": 1126
    },
    {
        "db_id": "poker_player",
        "query": "select final_table_made , best_finish from poker_player",
        "query_toks": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "question": "Get final table made and best finish of poker player",
        "question_toks": [
            "Get",
            "final",
            "table",
            "made",
            "and",
            "best",
            "finish",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
        "original_question": "What are the final tables made and best finishes for all poker players?",
        "instance_id": 1127
    },
    {
        "db_id": "poker_player",
        "query": "select avg ( earnings ) from poker_player",
        "query_toks": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player"
        ],
        "question": "Get the average value of earnings of poker player",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "earnings",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(Earnings) FROM poker_player",
        "original_question": "What is the average earnings of poker players?",
        "instance_id": 1128
    },
    {
        "db_id": "poker_player",
        "query": "select avg ( earnings ) from poker_player",
        "query_toks": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "earnings",
            ")",
            "from",
            "poker_player"
        ],
        "question": "Get the average value of earnings of poker player",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "earnings",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(Earnings) FROM poker_player",
        "original_question": "Return the average earnings across all poker players.",
        "instance_id": 1129
    },
    {
        "db_id": "poker_player",
        "query": "select money_rank from poker_player",
        "query_toks": [
            "select",
            "money_rank",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "money_rank",
            "from",
            "poker_player"
        ],
        "question": "Get money rank of poker player",
        "question_toks": [
            "Get",
            "money",
            "rank",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "original_question": "What is the money rank of the poker player with the highest earnings?",
        "instance_id": 1130
    },
    {
        "db_id": "poker_player",
        "query": "order by earnings desc ",
        "query_toks": [
            "order",
            "by",
            "earnings",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "earnings",
            "desc"
        ],
        "question": "Order these records based on earnings and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "earnings",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "original_question": "What is the money rank of the poker player with the highest earnings?",
        "instance_id": 1131
    },
    {
        "db_id": "poker_player",
        "query": "select money_rank from poker_player",
        "query_toks": [
            "select",
            "money_rank",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "money_rank",
            "from",
            "poker_player"
        ],
        "question": "Get money rank of poker player",
        "question_toks": [
            "Get",
            "money",
            "rank",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "original_question": "Return the money rank of the player with the greatest earnings.",
        "instance_id": 1132
    },
    {
        "db_id": "poker_player",
        "query": "order by earnings desc ",
        "query_toks": [
            "order",
            "by",
            "earnings",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "earnings",
            "desc"
        ],
        "question": "Order these records based on earnings and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "earnings",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "original_question": "Return the money rank of the player with the greatest earnings.",
        "instance_id": 1133
    },
    {
        "db_id": "poker_player",
        "query": "select max ( final_table_made ) from poker_player",
        "query_toks": [
            "select",
            "max",
            "(",
            "final_table_made",
            ")",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "final_table_made",
            ")",
            "from",
            "poker_player"
        ],
        "question": "Get the maximum value of final table made of poker player",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "final",
            "table",
            "made",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "original_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "instance_id": 1134
    },
    {
        "db_id": "poker_player",
        "query": "where earnings < 200000",
        "query_toks": [
            "where",
            "earnings",
            "<",
            "200000"
        ],
        "query_toks_no_value": [
            "where",
            "earnings",
            "<",
            "value"
        ],
        "question": "Keep the records that earnings is less than 200000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "earnings",
            "is",
            "less",
            "than",
            "200000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    200000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "original_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "instance_id": 1135
    },
    {
        "db_id": "poker_player",
        "query": "select max ( final_table_made ) from poker_player",
        "query_toks": [
            "select",
            "max",
            "(",
            "final_table_made",
            ")",
            "from",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "final_table_made",
            ")",
            "from",
            "poker_player"
        ],
        "question": "Get the maximum value of final table made of poker player",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "final",
            "table",
            "made",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "original_question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "instance_id": 1136
    },
    {
        "db_id": "poker_player",
        "query": "where earnings < 200000",
        "query_toks": [
            "where",
            "earnings",
            "<",
            "200000"
        ],
        "query_toks_no_value": [
            "where",
            "earnings",
            "<",
            "value"
        ],
        "question": "Keep the records that earnings is less than 200000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "earnings",
            "is",
            "less",
            "than",
            "200000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    200000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
        "original_question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "instance_id": 1137
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people join poker_player",
        "query_toks": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player"
        ],
        "question": "Get name of people that has poker player",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "original_question": "What are the names of poker players?",
        "instance_id": 1138
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people join poker_player",
        "query_toks": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player"
        ],
        "question": "Get name of people that has poker player",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
        "original_question": "Return the names of all the poker players.",
        "instance_id": 1139
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get name of people that has poker player",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "original_question": "What are the names of poker players whose earnings is higher than 300000?",
        "instance_id": 1140
    },
    {
        "db_id": "poker_player",
        "query": "where poker_player.earnings > 300000",
        "query_toks": [
            "where",
            "poker_player.earnings",
            ">",
            "300000"
        ],
        "query_toks_no_value": [
            "where",
            "poker_player.earnings",
            ">",
            "value"
        ],
        "question": "Keep the records that earnings of poker player is greater than 300000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "earnings",
            "of",
            "poker",
            "player",
            "is",
            "greater",
            "than",
            "300000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    300000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "original_question": "What are the names of poker players whose earnings is higher than 300000?",
        "instance_id": 1141
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get name of people that has poker player",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "original_question": "Give the names of poker players who have earnings above 300000.",
        "instance_id": 1142
    },
    {
        "db_id": "poker_player",
        "query": "where poker_player.earnings > 300000",
        "query_toks": [
            "where",
            "poker_player.earnings",
            ">",
            "300000"
        ],
        "query_toks_no_value": [
            "where",
            "poker_player.earnings",
            ">",
            "value"
        ],
        "question": "Keep the records that earnings of poker player is greater than 300000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "earnings",
            "of",
            "poker",
            "player",
            "is",
            "greater",
            "than",
            "300000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    300000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
        "original_question": "Give the names of poker players who have earnings above 300000.",
        "instance_id": 1143
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get name of people that has poker player",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "original_question": "List the names of poker players ordered by the final tables made in ascending order.",
        "instance_id": 1144
    },
    {
        "db_id": "poker_player",
        "query": "order by poker_player.final_table_made ",
        "query_toks": [
            "order",
            "by",
            "poker_player.final_table_made"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "poker_player.final_table_made"
        ],
        "question": "Order these records based on final table made of poker player",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "final",
            "table",
            "made",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "original_question": "List the names of poker players ordered by the final tables made in ascending order.",
        "instance_id": 1145
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get name of people that has poker player",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "original_question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "instance_id": 1146
    },
    {
        "db_id": "poker_player",
        "query": "order by poker_player.final_table_made ",
        "query_toks": [
            "order",
            "by",
            "poker_player.final_table_made"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "poker_player.final_table_made"
        ],
        "question": "Order these records based on final table made of poker player",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "final",
            "table",
            "made",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
        "original_question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "instance_id": 1147
    },
    {
        "db_id": "poker_player",
        "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "people.birth_date",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "people.birth_date",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get birth date of people that has poker player",
        "question_toks": [
            "Get",
            "birth",
            "date",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "original_question": "What is the birth date of the poker player with the lowest earnings?",
        "instance_id": 1148
    },
    {
        "db_id": "poker_player",
        "query": "order by poker_player.earnings asc ",
        "query_toks": [
            "order",
            "by",
            "poker_player.earnings",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "poker_player.earnings",
            "asc"
        ],
        "question": "Order these records based on earnings of poker player and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "earnings",
            "of",
            "poker",
            "player",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "original_question": "What is the birth date of the poker player with the lowest earnings?",
        "instance_id": 1149
    },
    {
        "db_id": "poker_player",
        "query": "select people.birth_date from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "people.birth_date",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "people.birth_date",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get birth date of people that has poker player",
        "question_toks": [
            "Get",
            "birth",
            "date",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "original_question": "Return the birth date of the poker player with the lowest earnings.",
        "instance_id": 1150
    },
    {
        "db_id": "poker_player",
        "query": "order by poker_player.earnings asc ",
        "query_toks": [
            "order",
            "by",
            "poker_player.earnings",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "poker_player.earnings",
            "asc"
        ],
        "question": "Order these records based on earnings of poker player and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "earnings",
            "of",
            "poker",
            "player",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
        "original_question": "Return the birth date of the poker player with the lowest earnings.",
        "instance_id": 1151
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "poker_player.money_rank",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "poker_player.money_rank",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get money rank of people that has poker player",
        "question_toks": [
            "Get",
            "money",
            "rank",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "original_question": "What is the money rank of the tallest poker player?",
        "instance_id": 1152
    },
    {
        "db_id": "poker_player",
        "query": "order by people.height desc ",
        "query_toks": [
            "order",
            "by",
            "people.height",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "people.height",
            "desc"
        ],
        "question": "Order these records based on height of people and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "height",
            "of",
            "people",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "original_question": "What is the money rank of the tallest poker player?",
        "instance_id": 1153
    },
    {
        "db_id": "poker_player",
        "query": "select poker_player.money_rank from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "poker_player.money_rank",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "poker_player.money_rank",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get money rank of people that has poker player",
        "question_toks": [
            "Get",
            "money",
            "rank",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "original_question": "Return the money rank of the poker player with the greatest height.",
        "instance_id": 1154
    },
    {
        "db_id": "poker_player",
        "query": "order by people.height desc ",
        "query_toks": [
            "order",
            "by",
            "people.height",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "people.height",
            "desc"
        ],
        "question": "Order these records based on height of people and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "height",
            "of",
            "people",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "original_question": "Return the money rank of the poker player with the greatest height.",
        "instance_id": 1155
    },
    {
        "db_id": "poker_player",
        "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get the average value of earnings of people that has poker player",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "earnings",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "original_question": "What is the average earnings of poker players with height higher than 200?",
        "instance_id": 1156
    },
    {
        "db_id": "poker_player",
        "query": "where people.height > 200",
        "query_toks": [
            "where",
            "people.height",
            ">",
            "200"
        ],
        "query_toks_no_value": [
            "where",
            "people.height",
            ">",
            "value"
        ],
        "question": "Keep the records that height of people is greater than 200",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "height",
            "of",
            "people",
            "is",
            "greater",
            "than",
            "200"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    200.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "original_question": "What is the average earnings of poker players with height higher than 200?",
        "instance_id": 1157
    },
    {
        "db_id": "poker_player",
        "query": "select avg ( poker_player.earnings ) from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "poker_player.earnings",
            ")",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get the average value of earnings of people that has poker player",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "earnings",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "original_question": "Give average earnings of poker players who are taller than 200.",
        "instance_id": 1158
    },
    {
        "db_id": "poker_player",
        "query": "where people.height > 200",
        "query_toks": [
            "where",
            "people.height",
            ">",
            "200"
        ],
        "query_toks_no_value": [
            "where",
            "people.height",
            ">",
            "value"
        ],
        "question": "Keep the records that height of people is greater than 200",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "height",
            "of",
            "people",
            "is",
            "greater",
            "than",
            "200"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    200.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
        "original_question": "Give average earnings of poker players who are taller than 200.",
        "instance_id": 1159
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get name of people that has poker player",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "original_question": "What are the names of poker players in descending order of earnings?",
        "instance_id": 1160
    },
    {
        "db_id": "poker_player",
        "query": "order by poker_player.earnings ",
        "query_toks": [
            "order",
            "by",
            "poker_player.earnings"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "poker_player.earnings"
        ],
        "question": "Order these records based on earnings of poker player",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "earnings",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "original_question": "What are the names of poker players in descending order of earnings?",
        "instance_id": 1161
    },
    {
        "db_id": "poker_player",
        "query": "select people.name from people join poker_player on people.people_id = poker_player.people_id",
        "query_toks": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "query_toks_no_value": [
            "select",
            "people.name",
            "from",
            "people",
            "join",
            "poker_player",
            "on",
            "people.people_id",
            "=",
            "poker_player.people_id"
        ],
        "question": "Get name of people that has poker player",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people",
            "that",
            "has",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "original_question": "Return the names of poker players sorted by their earnings descending.",
        "instance_id": 1162
    },
    {
        "db_id": "poker_player",
        "query": "order by poker_player.earnings ",
        "query_toks": [
            "order",
            "by",
            "poker_player.earnings"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "poker_player.earnings"
        ],
        "question": "Order these records based on earnings of poker player",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "earnings",
            "of",
            "poker",
            "player"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
        "original_question": "Return the names of poker players sorted by their earnings descending.",
        "instance_id": 1163
    },
    {
        "db_id": "poker_player",
        "query": "select nationality , count ( * ) from people",
        "query_toks": [
            "select",
            "nationality",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people"
        ],
        "question": "Get the number and nationality of people",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "nationality",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "original_question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "instance_id": 1164
    },
    {
        "db_id": "poker_player",
        "query": "group by nationality",
        "query_toks": [
            "group",
            "by",
            "nationality"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "nationality"
        ],
        "question": "Group the records based on nationality",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "nationality"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "original_question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "instance_id": 1165
    },
    {
        "db_id": "poker_player",
        "query": "select nationality , count ( * ) from people",
        "query_toks": [
            "select",
            "nationality",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "people"
        ],
        "question": "Get the number and nationality of people",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "nationality",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "original_question": "How many people are there of each nationality?",
        "instance_id": 1166
    },
    {
        "db_id": "poker_player",
        "query": "group by nationality",
        "query_toks": [
            "group",
            "by",
            "nationality"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "nationality"
        ],
        "question": "Group the records based on nationality",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "nationality"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
        "original_question": "How many people are there of each nationality?",
        "instance_id": 1167
    },
    {
        "db_id": "poker_player",
        "query": "select nationality from people",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "question": "Get nationality of people",
        "question_toks": [
            "Get",
            "nationality",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the most common nationality of people?",
        "instance_id": 1168
    },
    {
        "db_id": "poker_player",
        "query": "group by nationality",
        "query_toks": [
            "group",
            "by",
            "nationality"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "nationality"
        ],
        "question": "Group the records based on nationality",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "nationality"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the most common nationality of people?",
        "instance_id": 1169
    },
    {
        "db_id": "poker_player",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the most common nationality of people?",
        "instance_id": 1170
    },
    {
        "db_id": "poker_player",
        "query": "select nationality from people",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "question": "Get nationality of people",
        "question_toks": [
            "Get",
            "nationality",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Give the nationality that is most common across all people.",
        "instance_id": 1171
    },
    {
        "db_id": "poker_player",
        "query": "group by nationality",
        "query_toks": [
            "group",
            "by",
            "nationality"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "nationality"
        ],
        "question": "Group the records based on nationality",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "nationality"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Give the nationality that is most common across all people.",
        "instance_id": 1172
    },
    {
        "db_id": "poker_player",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Give the nationality that is most common across all people.",
        "instance_id": 1173
    },
    {
        "db_id": "poker_player",
        "query": "select nationality from people",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "question": "Get nationality of people",
        "question_toks": [
            "Get",
            "nationality",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "original_question": "What are the nationalities that are shared by at least two people?",
        "instance_id": 1174
    },
    {
        "db_id": "poker_player",
        "query": "group by nationality having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on nationality that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "nationality",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "original_question": "What are the nationalities that are shared by at least two people?",
        "instance_id": 1175
    },
    {
        "db_id": "poker_player",
        "query": "select nationality from people",
        "query_toks": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "nationality",
            "from",
            "people"
        ],
        "question": "Get nationality of people",
        "question_toks": [
            "Get",
            "nationality",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "original_question": "Return the nationalities for which there are two or more people.",
        "instance_id": 1176
    },
    {
        "db_id": "poker_player",
        "query": "group by nationality having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "nationality",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on nationality that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "nationality",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
        "original_question": "Return the nationalities for which there are two or more people.",
        "instance_id": 1177
    },
    {
        "db_id": "poker_player",
        "query": "select name , birth_date from people",
        "query_toks": [
            "select",
            "name",
            ",",
            "birth_date",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "birth_date",
            "from",
            "people"
        ],
        "question": "Get name and birth date of people",
        "question_toks": [
            "Get",
            "name",
            "and",
            "birth",
            "date",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "original_question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "instance_id": 1178
    },
    {
        "db_id": "poker_player",
        "query": "order by name ",
        "query_toks": [
            "order",
            "by",
            "name"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "name"
        ],
        "question": "Order these records based on name",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "name"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "original_question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "instance_id": 1179
    },
    {
        "db_id": "poker_player",
        "query": "select name , birth_date from people",
        "query_toks": [
            "select",
            "name",
            ",",
            "birth_date",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "birth_date",
            "from",
            "people"
        ],
        "question": "Get name and birth date of people",
        "question_toks": [
            "Get",
            "name",
            "and",
            "birth",
            "date",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "original_question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "instance_id": 1180
    },
    {
        "db_id": "poker_player",
        "query": "order by name ",
        "query_toks": [
            "order",
            "by",
            "name"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "name"
        ],
        "question": "Order these records based on name",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "name"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
        "original_question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "instance_id": 1181
    },
    {
        "db_id": "poker_player",
        "query": "select name from people",
        "query_toks": [
            "select",
            "name",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "people"
        ],
        "question": "Get name of people",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "original_question": "Show names of people whose nationality is not \"Russia\".",
        "instance_id": 1182
    },
    {
        "db_id": "poker_player",
        "query": "where nationality != \"russia\"",
        "query_toks": [
            "where",
            "nationality",
            "!=",
            "\"russia\""
        ],
        "query_toks_no_value": [
            "where",
            "nationality",
            "!=",
            "\"russia\""
        ],
        "question": "Keep the records that nationality is not \"russia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "nationality",
            "is",
            "not",
            "\"russia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"Russia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "original_question": "Show names of people whose nationality is not \"Russia\".",
        "instance_id": 1183
    },
    {
        "db_id": "poker_player",
        "query": "select name from people",
        "query_toks": [
            "select",
            "name",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "people"
        ],
        "question": "Get name of people",
        "question_toks": [
            "Get",
            "name",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "original_question": "What are the names of people who are not from Russia?",
        "instance_id": 1184
    },
    {
        "db_id": "poker_player",
        "query": "where nationality != \"russia\"",
        "query_toks": [
            "where",
            "nationality",
            "!=",
            "\"russia\""
        ],
        "query_toks_no_value": [
            "where",
            "nationality",
            "!=",
            "\"russia\""
        ],
        "question": "Keep the records that nationality is not \"russia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "nationality",
            "is",
            "not",
            "\"russia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ],
                    "\"Russia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "original_question": "What are the names of people who are not from Russia?",
        "instance_id": 1185
    },
    {
        "db_id": "poker_player",
        "query": "select count ( distinct nationality ) from people",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "people"
        ],
        "question": "Get the number of distinct nationality of people",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "nationality",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "original_question": "How many distinct nationalities are there?",
        "instance_id": 1186
    },
    {
        "db_id": "poker_player",
        "query": "select count ( distinct nationality ) from people",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "people"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "people"
        ],
        "question": "Get the number of distinct nationality of people",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "nationality",
            "of",
            "people"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                8,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "original_question": "Count the number of different nationalities.",
        "instance_id": 1187
    },
    {
        "db_id": "voter_1",
        "query": "select count ( * ) from area_code_state",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "area_code_state"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "area_code_state"
        ],
        "question": "Get the number of area code state",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "area",
            "code",
            "state"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM area_code_state",
        "original_question": "How many states are there?",
        "instance_id": 1188
    },
    {
        "db_id": "voter_1",
        "query": "select contestant_number , contestant_name from contestants",
        "query_toks": [
            "select",
            "contestant_number",
            ",",
            "contestant_name",
            "from",
            "contestants"
        ],
        "query_toks_no_value": [
            "select",
            "contestant_number",
            ",",
            "contestant_name",
            "from",
            "contestants"
        ],
        "question": "Get contestant number and contestant name of contestants",
        "question_toks": [
            "Get",
            "contestant",
            "number",
            "and",
            "contestant",
            "name",
            "of",
            "contestants"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "original_question": "List the contestant numbers and names, ordered by contestant name descending.",
        "instance_id": 1189
    },
    {
        "db_id": "voter_1",
        "query": "order by contestant_name ",
        "query_toks": [
            "order",
            "by",
            "contestant_name"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "contestant_name"
        ],
        "question": "Order these records based on contestant name",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "contestant",
            "name"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
        "original_question": "List the contestant numbers and names, ordered by contestant name descending.",
        "instance_id": 1190
    },
    {
        "db_id": "voter_1",
        "query": "select vote_id , phone_number , state from votes",
        "query_toks": [
            "select",
            "vote_id",
            ",",
            "phone_number",
            ",",
            "state",
            "from",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "vote_id",
            ",",
            "phone_number",
            ",",
            "state",
            "from",
            "votes"
        ],
        "question": "Get vote id and phone number and state of votes",
        "question_toks": [
            "Get",
            "vote",
            "id",
            "and",
            "phone",
            "number",
            "and",
            "state",
            "of",
            "votes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT vote_id ,  phone_number ,  state FROM votes",
        "original_question": "List the vote ids, phone numbers and states of all votes.",
        "instance_id": 1191
    },
    {
        "db_id": "voter_1",
        "query": "select max ( area_code ) , min ( area_code ) from area_code_state",
        "query_toks": [
            "select",
            "max",
            "(",
            "area_code",
            ")",
            ",",
            "min",
            "(",
            "area_code",
            ")",
            "from",
            "area_code_state"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "area_code",
            ")",
            ",",
            "min",
            "(",
            "area_code",
            ")",
            "from",
            "area_code_state"
        ],
        "question": "Get the maximum value of area code and the minimum value of area code of area code state",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "area",
            "code",
            "and",
            "the",
            "minimum",
            "value",
            "of",
            "area",
            "code",
            "of",
            "area",
            "code",
            "state"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
        "original_question": "What are the maximum and minimum values of area codes?",
        "instance_id": 1192
    },
    {
        "db_id": "voter_1",
        "query": "select max ( created ) from votes",
        "query_toks": [
            "select",
            "max",
            "(",
            "created",
            ")",
            "from",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "created",
            ")",
            "from",
            "votes"
        ],
        "question": "Get the maximum value of created of votes",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "created",
            "of",
            "votes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "original_question": "What is last date created of votes from the state 'CA'?",
        "instance_id": 1193
    },
    {
        "db_id": "voter_1",
        "query": "where state = \"ca\"",
        "query_toks": [
            "where",
            "state",
            "=",
            "\"ca\""
        ],
        "query_toks_no_value": [
            "where",
            "state",
            "=",
            "\"ca\""
        ],
        "question": "Keep the records that state is \"ca\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "state",
            "is",
            "\"ca\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"CA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(created) FROM votes WHERE state  =  'CA'",
        "original_question": "What is last date created of votes from the state 'CA'?",
        "instance_id": 1194
    },
    {
        "db_id": "voter_1",
        "query": "select contestant_name from contestants",
        "query_toks": [
            "select",
            "contestant_name",
            "from",
            "contestants"
        ],
        "query_toks_no_value": [
            "select",
            "contestant_name",
            "from",
            "contestants"
        ],
        "question": "Get contestant name of contestants",
        "question_toks": [
            "Get",
            "contestant",
            "name",
            "of",
            "contestants"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "original_question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "instance_id": 1195
    },
    {
        "db_id": "voter_1",
        "query": "where contestant_name != \"jessie alloway\"",
        "query_toks": [
            "where",
            "contestant_name",
            "!=",
            "\"jessie",
            "alloway\""
        ],
        "query_toks_no_value": [
            "where",
            "contestant_name",
            "!=",
            "\"jessie",
            "alloway\""
        ],
        "question": "Keep the records that contestant name is not \"jessie alloway\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "contestant",
            "name",
            "is",
            "not",
            "\"jessie",
            "alloway\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Jessie Alloway\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
        "original_question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "instance_id": 1196
    },
    {
        "db_id": "voter_1",
        "query": "select distinct state , created from votes",
        "query_toks": [
            "select",
            "distinct",
            "state",
            ",",
            "created",
            "from",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "state",
            ",",
            "created",
            "from",
            "votes"
        ],
        "question": "Get distinct and state and created of votes",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "state",
            "and",
            "created",
            "of",
            "votes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT state ,  created FROM votes",
        "original_question": "What are the distinct states and create time of all votes?",
        "instance_id": 1197
    },
    {
        "db_id": "voter_1",
        "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number",
        "query_toks": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "from",
            "contestants",
            "join",
            "votes",
            "on",
            "contestants.contestant_number",
            "=",
            "votes.contestant_number"
        ],
        "query_toks_no_value": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "from",
            "contestants",
            "join",
            "votes",
            "on",
            "contestants.contestant_number",
            "=",
            "votes.contestant_number"
        ],
        "question": "Get contestant number and contestant name of contestants that has votes",
        "question_toks": [
            "Get",
            "contestant",
            "number",
            "and",
            "contestant",
            "name",
            "of",
            "contestants",
            "that",
            "has",
            "votes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "original_question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "instance_id": 1198
    },
    {
        "db_id": "voter_1",
        "query": "group by contestants.contestant_number having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "contestants.contestant_number",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "contestants.contestant_number",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on contestant number of contestants that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "contestant",
            "number",
            "of",
            "contestants",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
        "original_question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "instance_id": 1199
    },
    {
        "db_id": "voter_1",
        "query": "select contestants.contestant_number , contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number",
        "query_toks": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "from",
            "contestants",
            "join",
            "votes",
            "on",
            "contestants.contestant_number",
            "=",
            "votes.contestant_number"
        ],
        "query_toks_no_value": [
            "select",
            "contestants.contestant_number",
            ",",
            "contestants.contestant_name",
            "from",
            "contestants",
            "join",
            "votes",
            "on",
            "contestants.contestant_number",
            "=",
            "votes.contestant_number"
        ],
        "question": "Get contestant number and contestant name of contestants that has votes",
        "question_toks": [
            "Get",
            "contestant",
            "number",
            "and",
            "contestant",
            "name",
            "of",
            "contestants",
            "that",
            "has",
            "votes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "instance_id": 1200
    },
    {
        "db_id": "voter_1",
        "query": "group by contestants.contestant_number",
        "query_toks": [
            "group",
            "by",
            "contestants.contestant_number"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "contestants.contestant_number"
        ],
        "question": "Group the records based on contestant number of contestants",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "contestant",
            "number",
            "of",
            "contestants"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "instance_id": 1201
    },
    {
        "db_id": "voter_1",
        "query": "order by count ( * ) asc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "asc"
        ],
        "question": "Order these records based on the number and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
        "original_question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "instance_id": 1202
    },
    {
        "db_id": "voter_1",
        "query": "select count ( * ) from votes",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "votes"
        ],
        "question": "Get the number of votes",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "votes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "original_question": "What are the number of votes from state 'NY' or 'CA'?",
        "instance_id": 1203
    },
    {
        "db_id": "voter_1",
        "query": "where state = \"ny\" or state = \"ca\"",
        "query_toks": [
            "where",
            "state",
            "=",
            "\"ny\"",
            "or",
            "state",
            "=",
            "\"ca\""
        ],
        "query_toks_no_value": [
            "where",
            "state",
            "=",
            "\"ny\"",
            "or",
            "state",
            "=",
            "\"ca\""
        ],
        "question": "Keep the records that state is \"ny\" or state is \"ca\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "state",
            "is",
            "\"ny\"",
            "or",
            "state",
            "is",
            "\"ca\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"NY\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"CA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
        "original_question": "What are the number of votes from state 'NY' or 'CA'?",
        "instance_id": 1204
    },
    {
        "db_id": "voter_1",
        "query": "select area_code_state.area_code from area_code_state join votes on area_code_state.state = votes.state",
        "query_toks": [
            "select",
            "area_code_state.area_code",
            "from",
            "area_code_state",
            "join",
            "votes",
            "on",
            "area_code_state.state",
            "=",
            "votes.state"
        ],
        "query_toks_no_value": [
            "select",
            "area_code_state.area_code",
            "from",
            "area_code_state",
            "join",
            "votes",
            "on",
            "area_code_state.state",
            "=",
            "votes.state"
        ],
        "question": "Get area code of area code state that has votes",
        "question_toks": [
            "Get",
            "area",
            "code",
            "of",
            "area",
            "code",
            "state",
            "that",
            "has",
            "votes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the area code in which the most voters voted?",
        "instance_id": 1205
    },
    {
        "db_id": "voter_1",
        "query": "group by area_code_state.area_code",
        "query_toks": [
            "group",
            "by",
            "area_code_state.area_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "area_code_state.area_code"
        ],
        "question": "Group the records based on area code of area code state",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "area",
            "code",
            "of",
            "area",
            "code",
            "state"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    1,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the area code in which the most voters voted?",
        "instance_id": 1206
    },
    {
        "db_id": "voter_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the area code in which the most voters voted?",
        "instance_id": 1207
    },
    {
        "db_id": "voter_1",
        "query": "select votes.created , votes.state , votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number",
        "query_toks": [
            "select",
            "votes.created",
            ",",
            "votes.state",
            ",",
            "votes.phone_number",
            "from",
            "contestants",
            "join",
            "votes",
            "on",
            "contestants.contestant_number",
            "=",
            "votes.contestant_number"
        ],
        "query_toks_no_value": [
            "select",
            "votes.created",
            ",",
            "votes.state",
            ",",
            "votes.phone_number",
            "from",
            "contestants",
            "join",
            "votes",
            "on",
            "contestants.contestant_number",
            "=",
            "votes.contestant_number"
        ],
        "question": "Get created and state and phone number of contestants that has votes",
        "question_toks": [
            "Get",
            "created",
            "and",
            "state",
            "and",
            "phone",
            "number",
            "of",
            "contestants",
            "that",
            "has",
            "votes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "original_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "instance_id": 1208
    },
    {
        "db_id": "voter_1",
        "query": "where contestants.contestant_name = \"tabatha gehling\"",
        "query_toks": [
            "where",
            "contestants.contestant_name",
            "=",
            "\"tabatha",
            "gehling\""
        ],
        "query_toks_no_value": [
            "where",
            "contestants.contestant_name",
            "=",
            "\"tabatha",
            "gehling\""
        ],
        "question": "Keep the records that contestant name of contestants is \"tabatha gehling\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "contestant",
            "name",
            "of",
            "contestants",
            "is",
            "\"tabatha",
            "gehling\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Tabatha Gehling\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
        "original_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "instance_id": 1209
    },
    {
        "db_id": "voter_1",
        "query": "select contestant_name from contestants",
        "query_toks": [
            "select",
            "contestant_name",
            "from",
            "contestants"
        ],
        "query_toks_no_value": [
            "select",
            "contestant_name",
            "from",
            "contestants"
        ],
        "question": "Get contestant name of contestants",
        "question_toks": [
            "Get",
            "contestant",
            "name",
            "of",
            "contestants"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "original_question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "instance_id": 1210
    },
    {
        "db_id": "voter_1",
        "query": "where contestant_name like \"% al %\"",
        "query_toks": [
            "where",
            "contestant_name",
            "like",
            "\"%",
            "al",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "contestant_name",
            "like",
            "\"%",
            "al",
            "%\""
        ],
        "question": "Keep the records that contestant name is in the form of \"% al %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "contestant",
            "name",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "al",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"%al%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select contestant_name from contestants where contestant_name like \"%al%\"",
        "original_question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "instance_id": 1211
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "original_question": "What are the names of all the countries that became independent after 1950?",
        "instance_id": 1212
    },
    {
        "db_id": "world_1",
        "query": "where indepyear > 1950",
        "query_toks": [
            "where",
            "indepyear",
            ">",
            "1950"
        ],
        "query_toks_no_value": [
            "where",
            "indepyear",
            ">",
            "value"
        ],
        "question": "Keep the records that indepyear is greater than 1950",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "indepyear",
            "is",
            "greater",
            "than",
            "1950"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    1950.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "original_question": "What are the names of all the countries that became independent after 1950?",
        "instance_id": 1213
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "original_question": "Give the names of the nations that were founded after 1950.",
        "instance_id": 1214
    },
    {
        "db_id": "world_1",
        "query": "where indepyear > 1950",
        "query_toks": [
            "where",
            "indepyear",
            ">",
            "1950"
        ],
        "query_toks_no_value": [
            "where",
            "indepyear",
            ">",
            "value"
        ],
        "question": "Keep the records that indepyear is greater than 1950",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "indepyear",
            "is",
            "greater",
            "than",
            "1950"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    1950.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "original_question": "Give the names of the nations that were founded after 1950.",
        "instance_id": 1215
    },
    {
        "db_id": "world_1",
        "query": "select count ( * ) from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "question": "Get the number of country",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "original_question": "How many countries have a republic as their form of government?",
        "instance_id": 1216
    },
    {
        "db_id": "world_1",
        "query": "where governmentform = \"republic\"",
        "query_toks": [
            "where",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "query_toks_no_value": [
            "where",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "question": "Keep the records that governmentform is \"republic\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "governmentform",
            "is",
            "\"republic\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "original_question": "How many countries have a republic as their form of government?",
        "instance_id": 1217
    },
    {
        "db_id": "world_1",
        "query": "select count ( * ) from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "question": "Get the number of country",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "original_question": "How many countries have governments that are republics?",
        "instance_id": 1218
    },
    {
        "db_id": "world_1",
        "query": "where governmentform = \"republic\"",
        "query_toks": [
            "where",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "query_toks_no_value": [
            "where",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "question": "Keep the records that governmentform is \"republic\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "governmentform",
            "is",
            "\"republic\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"",
        "original_question": "How many countries have governments that are republics?",
        "instance_id": 1219
    },
    {
        "db_id": "world_1",
        "query": "select sum ( surfacearea ) from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "question": "Get the sum of surfacearea and sum of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "surfacearea",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "original_question": "What is the total surface area of the countries in the Caribbean region?",
        "instance_id": 1220
    },
    {
        "db_id": "world_1",
        "query": "where region = \"caribbean\"",
        "query_toks": [
            "where",
            "region",
            "=",
            "\"caribbean\""
        ],
        "query_toks_no_value": [
            "where",
            "region",
            "=",
            "\"caribbean\""
        ],
        "question": "Keep the records that region is \"caribbean\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "region",
            "is",
            "\"caribbean\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Caribbean\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "original_question": "What is the total surface area of the countries in the Caribbean region?",
        "instance_id": 1221
    },
    {
        "db_id": "world_1",
        "query": "select sum ( surfacearea ) from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "question": "Get the sum of surfacearea and sum of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "surfacearea",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "original_question": "How much surface area do the countires in the Carribean cover together?",
        "instance_id": 1222
    },
    {
        "db_id": "world_1",
        "query": "where region = \"caribbean\"",
        "query_toks": [
            "where",
            "region",
            "=",
            "\"caribbean\""
        ],
        "query_toks_no_value": [
            "where",
            "region",
            "=",
            "\"caribbean\""
        ],
        "question": "Keep the records that region is \"caribbean\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "region",
            "is",
            "\"caribbean\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Caribbean\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"",
        "original_question": "How much surface area do the countires in the Carribean cover together?",
        "instance_id": 1223
    },
    {
        "db_id": "world_1",
        "query": "select continent from country",
        "query_toks": [
            "select",
            "continent",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "continent",
            "from",
            "country"
        ],
        "question": "Get continent of country",
        "question_toks": [
            "Get",
            "continent",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "original_question": "Which continent is Anguilla in?",
        "instance_id": 1224
    },
    {
        "db_id": "world_1",
        "query": "where name = \"anguilla\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"anguilla\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"anguilla\""
        ],
        "question": "Keep the records that name is \"anguilla\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"anguilla\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Anguilla\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "original_question": "Which continent is Anguilla in?",
        "instance_id": 1225
    },
    {
        "db_id": "world_1",
        "query": "select continent from country",
        "query_toks": [
            "select",
            "continent",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "continent",
            "from",
            "country"
        ],
        "question": "Get continent of country",
        "question_toks": [
            "Get",
            "continent",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "original_question": "What is the continent name which Anguilla belongs to?",
        "instance_id": 1226
    },
    {
        "db_id": "world_1",
        "query": "where name = \"anguilla\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"anguilla\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"anguilla\""
        ],
        "question": "Keep the records that name is \"anguilla\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"anguilla\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Anguilla\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"",
        "original_question": "What is the continent name which Anguilla belongs to?",
        "instance_id": 1227
    },
    {
        "db_id": "world_1",
        "query": "select region from country join city on country.code = city.countrycode",
        "query_toks": [
            "select",
            "region",
            "from",
            "country",
            "join",
            "city",
            "on",
            "country.code",
            "=",
            "city.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "region",
            "from",
            "country",
            "join",
            "city",
            "on",
            "country.code",
            "=",
            "city.countrycode"
        ],
        "question": "Get region of country that has city",
        "question_toks": [
            "Get",
            "region",
            "of",
            "country",
            "that",
            "has",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "original_question": "Which region is the city Kabul located in?",
        "instance_id": 1228
    },
    {
        "db_id": "world_1",
        "query": "where city.name = \"kabul\"",
        "query_toks": [
            "where",
            "city.name",
            "=",
            "\"kabul\""
        ],
        "query_toks_no_value": [
            "where",
            "city.name",
            "=",
            "\"kabul\""
        ],
        "question": "Keep the records that name of city is \"kabul\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "city",
            "is",
            "\"kabul\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kabul\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "original_question": "Which region is the city Kabul located in?",
        "instance_id": 1229
    },
    {
        "db_id": "world_1",
        "query": "select region from country join city on country.code = city.countrycode",
        "query_toks": [
            "select",
            "region",
            "from",
            "country",
            "join",
            "city",
            "on",
            "country.code",
            "=",
            "city.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "region",
            "from",
            "country",
            "join",
            "city",
            "on",
            "country.code",
            "=",
            "city.countrycode"
        ],
        "question": "Get region of country that has city",
        "question_toks": [
            "Get",
            "region",
            "of",
            "country",
            "that",
            "has",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "original_question": "What region is Kabul in?",
        "instance_id": 1230
    },
    {
        "db_id": "world_1",
        "query": "where city.name = \"kabul\"",
        "query_toks": [
            "where",
            "city.name",
            "=",
            "\"kabul\""
        ],
        "query_toks_no_value": [
            "where",
            "city.name",
            "=",
            "\"kabul\""
        ],
        "question": "Keep the records that name of city is \"kabul\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "city",
            "is",
            "\"kabul\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kabul\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"",
        "original_question": "What region is Kabul in?",
        "instance_id": 1231
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "original_question": "Which language is the most popular in Aruba?",
        "instance_id": 1232
    },
    {
        "db_id": "world_1",
        "query": "where country.name = \"aruba\" ",
        "query_toks": [
            "where",
            "country.name",
            "=",
            "\"aruba\""
        ],
        "query_toks_no_value": [
            "where",
            "country.name",
            "=",
            "\"aruba\""
        ],
        "question": "Keep the records that name of country is \"aruba\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "country",
            "is",
            "\"aruba\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Aruba\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "original_question": "Which language is the most popular in Aruba?",
        "instance_id": 1233
    },
    {
        "db_id": "world_1",
        "query": "order by percentage desc ",
        "query_toks": [
            "order",
            "by",
            "percentage",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "percentage",
            "desc"
        ],
        "question": "Order these records based on percentage and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "percentage",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "original_question": "Which language is the most popular in Aruba?",
        "instance_id": 1234
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "original_question": "What language is predominantly spoken in Aruba?",
        "instance_id": 1235
    },
    {
        "db_id": "world_1",
        "query": "where country.name = \"aruba\" ",
        "query_toks": [
            "where",
            "country.name",
            "=",
            "\"aruba\""
        ],
        "query_toks_no_value": [
            "where",
            "country.name",
            "=",
            "\"aruba\""
        ],
        "question": "Keep the records that name of country is \"aruba\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "country",
            "is",
            "\"aruba\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Aruba\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "original_question": "What language is predominantly spoken in Aruba?",
        "instance_id": 1236
    },
    {
        "db_id": "world_1",
        "query": "order by percentage desc ",
        "query_toks": [
            "order",
            "by",
            "percentage",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "percentage",
            "desc"
        ],
        "question": "Order these records based on percentage and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "percentage",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            26,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
        "original_question": "What language is predominantly spoken in Aruba?",
        "instance_id": 1237
    },
    {
        "db_id": "world_1",
        "query": "select population , lifeexpectancy from country",
        "query_toks": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country"
        ],
        "question": "Get population and lifeexpectancy of country",
        "question_toks": [
            "Get",
            "population",
            "and",
            "lifeexpectancy",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "original_question": "What are the population and life expectancies in Brazil?",
        "instance_id": 1238
    },
    {
        "db_id": "world_1",
        "query": "where name = \"brazil\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"brazil\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"brazil\""
        ],
        "question": "Keep the records that name is \"brazil\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"brazil\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Brazil\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "original_question": "What are the population and life expectancies in Brazil?",
        "instance_id": 1239
    },
    {
        "db_id": "world_1",
        "query": "select population , lifeexpectancy from country",
        "query_toks": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country"
        ],
        "question": "Get population and lifeexpectancy of country",
        "question_toks": [
            "Get",
            "population",
            "and",
            "lifeexpectancy",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "original_question": "Give me Brazil\u2019s population and life expectancies.",
        "instance_id": 1240
    },
    {
        "db_id": "world_1",
        "query": "where name = \"brazil\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"brazil\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"brazil\""
        ],
        "question": "Keep the records that name is \"brazil\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"brazil\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Brazil\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"",
        "original_question": "Give me Brazil\u2019s population and life expectancies.",
        "instance_id": 1241
    },
    {
        "db_id": "world_1",
        "query": "select population , region from country",
        "query_toks": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country"
        ],
        "question": "Get population and region of country",
        "question_toks": [
            "Get",
            "population",
            "and",
            "region",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "original_question": "What are the region and population of Angola?",
        "instance_id": 1242
    },
    {
        "db_id": "world_1",
        "query": "where name = \"angola\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"angola\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"angola\""
        ],
        "question": "Keep the records that name is \"angola\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"angola\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Angola\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "original_question": "What are the region and population of Angola?",
        "instance_id": 1243
    },
    {
        "db_id": "world_1",
        "query": "select population , region from country",
        "query_toks": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country"
        ],
        "question": "Get population and region of country",
        "question_toks": [
            "Get",
            "population",
            "and",
            "region",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "original_question": "What region does Angola belong to and what is its population?",
        "instance_id": 1244
    },
    {
        "db_id": "world_1",
        "query": "where name = \"angola\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"angola\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"angola\""
        ],
        "question": "Keep the records that name is \"angola\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"angola\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Angola\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"",
        "original_question": "What region does Angola belong to and what is its population?",
        "instance_id": 1245
    },
    {
        "db_id": "world_1",
        "query": "select avg ( lifeexpectancy ) from country",
        "query_toks": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country"
        ],
        "question": "Get the average value of lifeexpectancy of country",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "original_question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "instance_id": 1246
    },
    {
        "db_id": "world_1",
        "query": "where region = \"central africa\"",
        "query_toks": [
            "where",
            "region",
            "=",
            "\"central",
            "africa\""
        ],
        "query_toks_no_value": [
            "where",
            "region",
            "=",
            "\"central",
            "africa\""
        ],
        "question": "Keep the records that region is \"central africa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "region",
            "is",
            "\"central",
            "africa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Central Africa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "original_question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "instance_id": 1247
    },
    {
        "db_id": "world_1",
        "query": "select avg ( lifeexpectancy ) from country",
        "query_toks": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country"
        ],
        "question": "Get the average value of lifeexpectancy of country",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "original_question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "instance_id": 1248
    },
    {
        "db_id": "world_1",
        "query": "where region = \"central africa\"",
        "query_toks": [
            "where",
            "region",
            "=",
            "\"central",
            "africa\""
        ],
        "query_toks_no_value": [
            "where",
            "region",
            "=",
            "\"central",
            "africa\""
        ],
        "question": "Keep the records that region is \"central africa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "region",
            "is",
            "\"central",
            "africa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Central Africa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"",
        "original_question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "instance_id": 1249
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "original_question": "What is the name of country that has the shortest life expectancy in Asia?",
        "instance_id": 1250
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\" ",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "original_question": "What is the name of country that has the shortest life expectancy in Asia?",
        "instance_id": 1251
    },
    {
        "db_id": "world_1",
        "query": "order by lifeexpectancy ",
        "query_toks": [
            "order",
            "by",
            "lifeexpectancy"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "lifeexpectancy"
        ],
        "question": "Order these records based on lifeexpectancy",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "lifeexpectancy"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "original_question": "What is the name of country that has the shortest life expectancy in Asia?",
        "instance_id": 1252
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "original_question": "Give the name of the country in Asia with the lowest life expectancy.",
        "instance_id": 1253
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\" ",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "original_question": "Give the name of the country in Asia with the lowest life expectancy.",
        "instance_id": 1254
    },
    {
        "db_id": "world_1",
        "query": "order by lifeexpectancy ",
        "query_toks": [
            "order",
            "by",
            "lifeexpectancy"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "lifeexpectancy"
        ],
        "question": "Order these records based on lifeexpectancy",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "lifeexpectancy"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
        "original_question": "Give the name of the country in Asia with the lowest life expectancy.",
        "instance_id": 1255
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) , max ( gnp ) from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country"
        ],
        "question": "Get the sum of population and the maximum value of gnp and sum of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "gnp",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "original_question": "What is the total population and maximum GNP in Asia?",
        "instance_id": 1256
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "original_question": "What is the total population and maximum GNP in Asia?",
        "instance_id": 1257
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) , max ( gnp ) from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country"
        ],
        "question": "Get the sum of population and the maximum value of gnp and sum of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "gnp",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "original_question": "How many people live in Asia, and what is the largest GNP among them?",
        "instance_id": 1258
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"",
        "original_question": "How many people live in Asia, and what is the largest GNP among them?",
        "instance_id": 1259
    },
    {
        "db_id": "world_1",
        "query": "select avg ( lifeexpectancy ) from country",
        "query_toks": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country"
        ],
        "question": "Get the average value of lifeexpectancy of country",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "original_question": "What is the average life expectancy in African countries that are republics?",
        "instance_id": 1260
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"africa\" and governmentform = \"republic\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "question": "Keep the records that continent is \"africa\" and governmentform is \"republic\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"africa\"",
            "and",
            "governmentform",
            "is",
            "\"republic\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Africa\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "original_question": "What is the average life expectancy in African countries that are republics?",
        "instance_id": 1261
    },
    {
        "db_id": "world_1",
        "query": "select avg ( lifeexpectancy ) from country",
        "query_toks": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "from",
            "country"
        ],
        "question": "Get the average value of lifeexpectancy of country",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "original_question": "Give the average life expectancy for countries in Africa which are republics?",
        "instance_id": 1262
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"africa\" and governmentform = \"republic\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"africa\"",
            "and",
            "governmentform",
            "=",
            "\"republic\""
        ],
        "question": "Keep the records that continent is \"africa\" and governmentform is \"republic\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"africa\"",
            "and",
            "governmentform",
            "is",
            "\"republic\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Africa\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
        "original_question": "Give the average life expectancy for countries in Africa which are republics?",
        "instance_id": 1263
    },
    {
        "db_id": "world_1",
        "query": "select sum ( surfacearea ) from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "question": "Get the sum of surfacearea and sum of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "surfacearea",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "original_question": "What is the total surface area of the continents Asia and Europe?",
        "instance_id": 1264
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\" or continent = \"europe\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\"",
            "or",
            "continent",
            "=",
            "\"europe\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\"",
            "or",
            "continent",
            "=",
            "\"europe\""
        ],
        "question": "Keep the records that continent is \"asia\" or continent is \"europe\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\"",
            "or",
            "continent",
            "is",
            "\"europe\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Europe\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "original_question": "What is the total surface area of the continents Asia and Europe?",
        "instance_id": 1265
    },
    {
        "db_id": "world_1",
        "query": "select sum ( surfacearea ) from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "question": "Get the sum of surfacearea and sum of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "surfacearea",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "original_question": "Give the total surface area covered by countries in Asia or Europe.",
        "instance_id": 1266
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\" or continent = \"europe\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\"",
            "or",
            "continent",
            "=",
            "\"europe\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\"",
            "or",
            "continent",
            "=",
            "\"europe\""
        ],
        "question": "Keep the records that continent is \"asia\" or continent is \"europe\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\"",
            "or",
            "continent",
            "is",
            "\"europe\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Europe\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
        "original_question": "Give the total surface area covered by countries in Asia or Europe.",
        "instance_id": 1267
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) from city",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "city"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "city"
        ],
        "question": "Get the sum of population and sum of city",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "sum",
            "of",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "original_question": "How many people live in Gelderland district?",
        "instance_id": 1268
    },
    {
        "db_id": "world_1",
        "query": "where district = \"gelderland\"",
        "query_toks": [
            "where",
            "district",
            "=",
            "\"gelderland\""
        ],
        "query_toks_no_value": [
            "where",
            "district",
            "=",
            "\"gelderland\""
        ],
        "question": "Keep the records that district is \"gelderland\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "district",
            "is",
            "\"gelderland\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Gelderland\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "original_question": "How many people live in Gelderland district?",
        "instance_id": 1269
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) from city",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "city"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "city"
        ],
        "question": "Get the sum of population and sum of city",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "sum",
            "of",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "original_question": "What is the total population of Gelderland district?",
        "instance_id": 1270
    },
    {
        "db_id": "world_1",
        "query": "where district = \"gelderland\"",
        "query_toks": [
            "where",
            "district",
            "=",
            "\"gelderland\""
        ],
        "query_toks_no_value": [
            "where",
            "district",
            "=",
            "\"gelderland\""
        ],
        "question": "Keep the records that district is \"gelderland\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "district",
            "is",
            "\"gelderland\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Gelderland\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"",
        "original_question": "What is the total population of Gelderland district?",
        "instance_id": 1271
    },
    {
        "db_id": "world_1",
        "query": "select avg ( gnp ) , sum ( population ) from country",
        "query_toks": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country"
        ],
        "question": "Get the average value of gnp and the sum of population and sum of country",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "gnp",
            "and",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "original_question": "What is the average GNP and total population in all nations whose government is US territory?",
        "instance_id": 1272
    },
    {
        "db_id": "world_1",
        "query": "where governmentform = \"us territory\"",
        "query_toks": [
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "query_toks_no_value": [
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "question": "Keep the records that governmentform is \"us territory\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "governmentform",
            "is",
            "\"us",
            "territory\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"US Territory\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "original_question": "What is the average GNP and total population in all nations whose government is US territory?",
        "instance_id": 1273
    },
    {
        "db_id": "world_1",
        "query": "select avg ( gnp ) , sum ( population ) from country",
        "query_toks": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country"
        ],
        "question": "Get the average value of gnp and the sum of population and sum of country",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "gnp",
            "and",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "original_question": "Give the mean GNP and total population of nations which are considered US territory.",
        "instance_id": 1274
    },
    {
        "db_id": "world_1",
        "query": "where governmentform = \"us territory\"",
        "query_toks": [
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "query_toks_no_value": [
            "where",
            "governmentform",
            "=",
            "\"us",
            "territory\""
        ],
        "question": "Keep the records that governmentform is \"us territory\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "governmentform",
            "is",
            "\"us",
            "territory\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"US Territory\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"",
        "original_question": "Give the mean GNP and total population of nations which are considered US territory.",
        "instance_id": 1275
    },
    {
        "db_id": "world_1",
        "query": "select count ( distinct language ) from countrylanguage",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "Get the number of distinct language of countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "language",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "original_question": "How many unique languages are spoken in the world?",
        "instance_id": 1276
    },
    {
        "db_id": "world_1",
        "query": "select count ( distinct language ) from countrylanguage",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "language",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "Get the number of distinct language of countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "language",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage",
        "original_question": "What is the number of distinct languages used around the world?",
        "instance_id": 1277
    },
    {
        "db_id": "world_1",
        "query": "select count ( distinct governmentform ) from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country"
        ],
        "question": "Get the number of distinct governmentform of country",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "governmentform",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "original_question": "How many type of governments are in Africa?",
        "instance_id": 1278
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"africa\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"africa\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"africa\""
        ],
        "question": "Keep the records that continent is \"africa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"africa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Africa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "original_question": "How many type of governments are in Africa?",
        "instance_id": 1279
    },
    {
        "db_id": "world_1",
        "query": "select count ( distinct governmentform ) from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "governmentform",
            ")",
            "from",
            "country"
        ],
        "question": "Get the number of distinct governmentform of country",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "governmentform",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                19,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "original_question": "How many different forms of governments are there in Africa?",
        "instance_id": 1280
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"africa\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"africa\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"africa\""
        ],
        "question": "Keep the records that continent is \"africa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"africa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Africa\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"",
        "original_question": "How many different forms of governments are there in Africa?",
        "instance_id": 1281
    },
    {
        "db_id": "world_1",
        "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "original_question": "What is the total number of languages used in Aruba?",
        "instance_id": 1282
    },
    {
        "db_id": "world_1",
        "query": "where country.name = \"aruba\"",
        "query_toks": [
            "where",
            "country.name",
            "=",
            "\"aruba\""
        ],
        "query_toks_no_value": [
            "where",
            "country.name",
            "=",
            "\"aruba\""
        ],
        "question": "Keep the records that name of country is \"aruba\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "country",
            "is",
            "\"aruba\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Aruba\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "original_question": "What is the total number of languages used in Aruba?",
        "instance_id": 1283
    },
    {
        "db_id": "world_1",
        "query": "select count ( countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "original_question": "How many languages are spoken in Aruba?",
        "instance_id": 1284
    },
    {
        "db_id": "world_1",
        "query": "where country.name = \"aruba\"",
        "query_toks": [
            "where",
            "country.name",
            "=",
            "\"aruba\""
        ],
        "query_toks_no_value": [
            "where",
            "country.name",
            "=",
            "\"aruba\""
        ],
        "question": "Keep the records that name of country is \"aruba\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "country",
            "is",
            "\"aruba\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Aruba\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
        "original_question": "How many languages are spoken in Aruba?",
        "instance_id": 1285
    },
    {
        "db_id": "world_1",
        "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "original_question": "How many official languages does Afghanistan have?",
        "instance_id": 1286
    },
    {
        "db_id": "world_1",
        "query": "where country.name = \"afghanistan\" and isofficial = \"t\"",
        "query_toks": [
            "where",
            "country.name",
            "=",
            "\"afghanistan\"",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_no_value": [
            "where",
            "country.name",
            "=",
            "\"afghanistan\"",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "question": "Keep the records that name of country is \"afghanistan\" and isofficial is \"t\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "country",
            "is",
            "\"afghanistan\"",
            "and",
            "isofficial",
            "is",
            "\"t\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Afghanistan\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "original_question": "How many official languages does Afghanistan have?",
        "instance_id": 1287
    },
    {
        "db_id": "world_1",
        "query": "select count ( * ) from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "original_question": "How many official languages are spoken in Afghanistan?",
        "instance_id": 1288
    },
    {
        "db_id": "world_1",
        "query": "where country.name = \"afghanistan\" and isofficial = \"t\"",
        "query_toks": [
            "where",
            "country.name",
            "=",
            "\"afghanistan\"",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_no_value": [
            "where",
            "country.name",
            "=",
            "\"afghanistan\"",
            "and",
            "isofficial",
            "=",
            "\"t\""
        ],
        "question": "Keep the records that name of country is \"afghanistan\" and isofficial is \"t\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "country",
            "is",
            "\"afghanistan\"",
            "and",
            "isofficial",
            "is",
            "\"t\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Afghanistan\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"",
        "original_question": "How many official languages are spoken in Afghanistan?",
        "instance_id": 1289
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get name of country that has countrylanguage",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is name of the country that speaks the largest number of languages?",
        "instance_id": 1290
    },
    {
        "db_id": "world_1",
        "query": "group by country.name",
        "query_toks": [
            "group",
            "by",
            "country.name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country.name"
        ],
        "question": "Group the records based on name of country",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is name of the country that speaks the largest number of languages?",
        "instance_id": 1291
    },
    {
        "db_id": "world_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is name of the country that speaks the largest number of languages?",
        "instance_id": 1292
    },
    {
        "db_id": "world_1",
        "query": "select country.name from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get name of country that has countrylanguage",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Give the name of the nation that uses the greatest amount of languages.",
        "instance_id": 1293
    },
    {
        "db_id": "world_1",
        "query": "group by country.name",
        "query_toks": [
            "group",
            "by",
            "country.name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country.name"
        ],
        "question": "Group the records based on name of country",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Give the name of the nation that uses the greatest amount of languages.",
        "instance_id": 1294
    },
    {
        "db_id": "world_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Give the name of the nation that uses the greatest amount of languages.",
        "instance_id": 1295
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "country.continent",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "country.continent",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get continent of country that has countrylanguage",
        "question_toks": [
            "Get",
            "continent",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Which continent has the most diverse languages?",
        "instance_id": 1296
    },
    {
        "db_id": "world_1",
        "query": "group by country.continent",
        "query_toks": [
            "group",
            "by",
            "country.continent"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country.continent"
        ],
        "question": "Group the records based on continent of country",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "continent",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Which continent has the most diverse languages?",
        "instance_id": 1297
    },
    {
        "db_id": "world_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Which continent has the most diverse languages?",
        "instance_id": 1298
    },
    {
        "db_id": "world_1",
        "query": "select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "country.continent",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "country.continent",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get continent of country that has countrylanguage",
        "question_toks": [
            "Get",
            "continent",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Which continent speaks the most languages?",
        "instance_id": 1299
    },
    {
        "db_id": "world_1",
        "query": "group by country.continent",
        "query_toks": [
            "group",
            "by",
            "country.continent"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country.continent"
        ],
        "question": "Group the records based on continent of country",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "continent",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Which continent speaks the most languages?",
        "instance_id": 1300
    },
    {
        "db_id": "world_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Which continent speaks the most languages?",
        "instance_id": 1301
    },
    {
        "db_id": "world_1",
        "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "continent",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "continent",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of distinct continent of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "continent",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "original_question": "What is the number of distinct continents where Chinese is spoken?",
        "instance_id": 1302
    },
    {
        "db_id": "world_1",
        "query": "where countrylanguage.language = \"chinese\"",
        "query_toks": [
            "where",
            "countrylanguage.language",
            "=",
            "\"chinese\""
        ],
        "query_toks_no_value": [
            "where",
            "countrylanguage.language",
            "=",
            "\"chinese\""
        ],
        "question": "Keep the records that language of countrylanguage is \"chinese\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"chinese\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Chinese\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "original_question": "What is the number of distinct continents where Chinese is spoken?",
        "instance_id": 1303
    },
    {
        "db_id": "world_1",
        "query": "select count ( distinct continent ) from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "continent",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "continent",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of distinct continent of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "continent",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                10,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "original_question": "How many continents speak Chinese?",
        "instance_id": 1304
    },
    {
        "db_id": "world_1",
        "query": "where countrylanguage.language = \"chinese\"",
        "query_toks": [
            "where",
            "countrylanguage.language",
            "=",
            "\"chinese\""
        ],
        "query_toks_no_value": [
            "where",
            "countrylanguage.language",
            "=",
            "\"chinese\""
        ],
        "question": "Keep the records that language of countrylanguage is \"chinese\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"chinese\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Chinese\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
        "original_question": "How many continents speak Chinese?",
        "instance_id": 1305
    },
    {
        "db_id": "world_1",
        "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "distinct",
            "country.region",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "country.region",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get distinct and region of country that has countrylanguage",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "region",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "original_question": "What are the regions that use English or Dutch?",
        "instance_id": 1306
    },
    {
        "db_id": "world_1",
        "query": "where countrylanguage.language = \"english\" or countrylanguage.language = \"dutch\"",
        "query_toks": [
            "where",
            "countrylanguage.language",
            "=",
            "\"english\"",
            "or",
            "countrylanguage.language",
            "=",
            "\"dutch\""
        ],
        "query_toks_no_value": [
            "where",
            "countrylanguage.language",
            "=",
            "\"english\"",
            "or",
            "countrylanguage.language",
            "=",
            "\"dutch\""
        ],
        "question": "Keep the records that language of countrylanguage is \"english\" or language of countrylanguage is \"dutch\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"english\"",
            "or",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"dutch\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Dutch\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "original_question": "What are the regions that use English or Dutch?",
        "instance_id": 1307
    },
    {
        "db_id": "world_1",
        "query": "select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "distinct",
            "country.region",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "country.region",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get distinct and region of country that has countrylanguage",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "region",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "original_question": "Which regions speak Dutch or English?",
        "instance_id": 1308
    },
    {
        "db_id": "world_1",
        "query": "where countrylanguage.language = \"english\" or countrylanguage.language = \"dutch\"",
        "query_toks": [
            "where",
            "countrylanguage.language",
            "=",
            "\"english\"",
            "or",
            "countrylanguage.language",
            "=",
            "\"dutch\""
        ],
        "query_toks_no_value": [
            "where",
            "countrylanguage.language",
            "=",
            "\"english\"",
            "or",
            "countrylanguage.language",
            "=",
            "\"dutch\""
        ],
        "question": "Keep the records that language of countrylanguage is \"english\" or language of countrylanguage is \"dutch\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"english\"",
            "or",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"dutch\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Dutch\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"",
        "original_question": "Which regions speak Dutch or English?",
        "instance_id": 1309
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_question": "Which language is the most popular on the Asian continent?",
        "instance_id": 1310
    },
    {
        "db_id": "world_1",
        "query": "where country.continent = \"asia\" ",
        "query_toks": [
            "where",
            "country.continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "country.continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent of country is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "of",
            "country",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_question": "Which language is the most popular on the Asian continent?",
        "instance_id": 1311
    },
    {
        "db_id": "world_1",
        "query": "group by countrylanguage.language",
        "query_toks": [
            "group",
            "by",
            "countrylanguage.language"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrylanguage.language"
        ],
        "question": "Group the records based on language of countrylanguage",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_question": "Which language is the most popular on the Asian continent?",
        "instance_id": 1312
    },
    {
        "db_id": "world_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_question": "Which language is the most popular on the Asian continent?",
        "instance_id": 1313
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_question": "What is the language that is used by the largest number of Asian nations?",
        "instance_id": 1314
    },
    {
        "db_id": "world_1",
        "query": "where country.continent = \"asia\" ",
        "query_toks": [
            "where",
            "country.continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "country.continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent of country is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "of",
            "country",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_question": "What is the language that is used by the largest number of Asian nations?",
        "instance_id": 1315
    },
    {
        "db_id": "world_1",
        "query": "group by countrylanguage.language",
        "query_toks": [
            "group",
            "by",
            "countrylanguage.language"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrylanguage.language"
        ],
        "question": "Group the records based on language of countrylanguage",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_question": "What is the language that is used by the largest number of Asian nations?",
        "instance_id": 1316
    },
    {
        "db_id": "world_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
        "original_question": "What is the language that is used by the largest number of Asian nations?",
        "instance_id": 1317
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "original_question": "Which languages are spoken by only one country in republic governments?",
        "instance_id": 1318
    },
    {
        "db_id": "world_1",
        "query": "where country.governmentform = \"republic\" ",
        "query_toks": [
            "where",
            "country.governmentform",
            "=",
            "\"republic\""
        ],
        "query_toks_no_value": [
            "where",
            "country.governmentform",
            "=",
            "\"republic\""
        ],
        "question": "Keep the records that governmentform of country is \"republic\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "governmentform",
            "of",
            "country",
            "is",
            "\"republic\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "original_question": "Which languages are spoken by only one country in republic governments?",
        "instance_id": 1319
    },
    {
        "db_id": "world_1",
        "query": "group by countrylanguage.language having count ( * ) = 1",
        "query_toks": [
            "group",
            "by",
            "countrylanguage.language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrylanguage.language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "value"
        ],
        "question": "Group the records based on language of countrylanguage that the number is 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language",
            "of",
            "countrylanguage",
            "that",
            "the",
            "number",
            "is",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "original_question": "Which languages are spoken by only one country in republic governments?",
        "instance_id": 1320
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "original_question": "What languages are only used by a single country with a republic government?",
        "instance_id": 1321
    },
    {
        "db_id": "world_1",
        "query": "where country.governmentform = \"republic\" ",
        "query_toks": [
            "where",
            "country.governmentform",
            "=",
            "\"republic\""
        ],
        "query_toks_no_value": [
            "where",
            "country.governmentform",
            "=",
            "\"republic\""
        ],
        "question": "Keep the records that governmentform of country is \"republic\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "governmentform",
            "of",
            "country",
            "is",
            "\"republic\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"Republic\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "original_question": "What languages are only used by a single country with a republic government?",
        "instance_id": 1322
    },
    {
        "db_id": "world_1",
        "query": "group by countrylanguage.language having count ( * ) = 1",
        "query_toks": [
            "group",
            "by",
            "countrylanguage.language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrylanguage.language",
            "having",
            "count",
            "(",
            "*",
            ")",
            "=",
            "value"
        ],
        "question": "Group the records based on language of countrylanguage that the number is 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language",
            "of",
            "countrylanguage",
            "that",
            "the",
            "number",
            "is",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1",
        "original_question": "What languages are only used by a single country with a republic government?",
        "instance_id": 1323
    },
    {
        "db_id": "world_1",
        "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "city.name",
            ",",
            "city.population",
            "from",
            "city",
            "join",
            "countrylanguage",
            "on",
            "city.countrycode",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "city.name",
            ",",
            "city.population",
            "from",
            "city",
            "join",
            "countrylanguage",
            "on",
            "city.countrycode",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get name and population of city that has countrylanguage",
        "question_toks": [
            "Get",
            "name",
            "and",
            "population",
            "of",
            "city",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "original_question": "Find the city with the largest population that uses English.",
        "instance_id": 1324
    },
    {
        "db_id": "world_1",
        "query": "where countrylanguage.language = \"english\" ",
        "query_toks": [
            "where",
            "countrylanguage.language",
            "=",
            "\"english\""
        ],
        "query_toks_no_value": [
            "where",
            "countrylanguage.language",
            "=",
            "\"english\""
        ],
        "question": "Keep the records that language of countrylanguage is \"english\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"english\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "original_question": "Find the city with the largest population that uses English.",
        "instance_id": 1325
    },
    {
        "db_id": "world_1",
        "query": "order by city.population desc ",
        "query_toks": [
            "order",
            "by",
            "city.population",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "city.population",
            "desc"
        ],
        "question": "Order these records based on population of city and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "population",
            "of",
            "city",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "original_question": "Find the city with the largest population that uses English.",
        "instance_id": 1326
    },
    {
        "db_id": "world_1",
        "query": "select city.name , city.population from city join countrylanguage on city.countrycode = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "city.name",
            ",",
            "city.population",
            "from",
            "city",
            "join",
            "countrylanguage",
            "on",
            "city.countrycode",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "city.name",
            ",",
            "city.population",
            "from",
            "city",
            "join",
            "countrylanguage",
            "on",
            "city.countrycode",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get name and population of city that has countrylanguage",
        "question_toks": [
            "Get",
            "name",
            "and",
            "population",
            "of",
            "city",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "original_question": "What is the most populace city that speaks English?",
        "instance_id": 1327
    },
    {
        "db_id": "world_1",
        "query": "where countrylanguage.language = \"english\" ",
        "query_toks": [
            "where",
            "countrylanguage.language",
            "=",
            "\"english\""
        ],
        "query_toks_no_value": [
            "where",
            "countrylanguage.language",
            "=",
            "\"english\""
        ],
        "question": "Keep the records that language of countrylanguage is \"english\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"english\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "original_question": "What is the most populace city that speaks English?",
        "instance_id": 1328
    },
    {
        "db_id": "world_1",
        "query": "order by city.population desc ",
        "query_toks": [
            "order",
            "by",
            "city.population",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "city.population",
            "desc"
        ],
        "question": "Order these records based on population of city and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "population",
            "of",
            "city",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1",
        "original_question": "What is the most populace city that speaks English?",
        "instance_id": 1329
    },
    {
        "db_id": "world_1",
        "query": "select name , population , lifeexpectancy from country",
        "query_toks": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country"
        ],
        "question": "Get name and population and lifeexpectancy of country",
        "question_toks": [
            "Get",
            "name",
            "and",
            "population",
            "and",
            "lifeexpectancy",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "Find the name, population and expected life length of asian country with the largest area?",
        "instance_id": 1330
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\" ",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "Find the name, population and expected life length of asian country with the largest area?",
        "instance_id": 1331
    },
    {
        "db_id": "world_1",
        "query": "order by surfacearea desc ",
        "query_toks": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "question": "Order these records based on surfacearea and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "surfacearea",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "Find the name, population and expected life length of asian country with the largest area?",
        "instance_id": 1332
    },
    {
        "db_id": "world_1",
        "query": "select name , population , lifeexpectancy from country",
        "query_toks": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country"
        ],
        "question": "Get name and population and lifeexpectancy of country",
        "question_toks": [
            "Get",
            "name",
            "and",
            "population",
            "and",
            "lifeexpectancy",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "instance_id": 1333
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\" ",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "instance_id": 1334
    },
    {
        "db_id": "world_1",
        "query": "order by surfacearea desc ",
        "query_toks": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "question": "Order these records based on surfacearea and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "surfacearea",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "instance_id": 1335
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "original_question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "instance_id": 1336
    },
    {
        "db_id": "world_1",
        "query": "where country.headofstate = \"beatrix\" and countrylanguage.isofficial = \"t\"",
        "query_toks": [
            "where",
            "country.headofstate",
            "=",
            "\"beatrix\"",
            "and",
            "countrylanguage.isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_no_value": [
            "where",
            "country.headofstate",
            "=",
            "\"beatrix\"",
            "and",
            "countrylanguage.isofficial",
            "=",
            "\"t\""
        ],
        "question": "Keep the records that headofstate of country is \"beatrix\" and isofficial of countrylanguage is \"t\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "headofstate",
            "of",
            "country",
            "is",
            "\"beatrix\"",
            "and",
            "isofficial",
            "of",
            "countrylanguage",
            "is",
            "\"t\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Beatrix\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "original_question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "instance_id": 1337
    },
    {
        "db_id": "world_1",
        "query": "select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "countrylanguage.language",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "original_question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "instance_id": 1338
    },
    {
        "db_id": "world_1",
        "query": "where country.headofstate = \"beatrix\" and countrylanguage.isofficial = \"t\"",
        "query_toks": [
            "where",
            "country.headofstate",
            "=",
            "\"beatrix\"",
            "and",
            "countrylanguage.isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_no_value": [
            "where",
            "country.headofstate",
            "=",
            "\"beatrix\"",
            "and",
            "countrylanguage.isofficial",
            "=",
            "\"t\""
        ],
        "question": "Keep the records that headofstate of country is \"beatrix\" and isofficial of countrylanguage is \"t\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "headofstate",
            "of",
            "country",
            "is",
            "\"beatrix\"",
            "and",
            "isofficial",
            "of",
            "countrylanguage",
            "is",
            "\"t\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            20,
                            false
                        ],
                        null
                    ],
                    "\"Beatrix\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"",
        "original_question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "instance_id": 1339
    },
    {
        "db_id": "world_1",
        "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of distinct language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "original_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "instance_id": 1340
    },
    {
        "db_id": "world_1",
        "query": "where indepyear < 1930 and countrylanguage.isofficial = \"t\"",
        "query_toks": [
            "where",
            "indepyear",
            "<",
            "1930",
            "and",
            "countrylanguage.isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_no_value": [
            "where",
            "indepyear",
            "<",
            "value",
            "and",
            "countrylanguage.isofficial",
            "=",
            "\"t\""
        ],
        "question": "Keep the records that indepyear is less than 1930 and isofficial of countrylanguage is \"t\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "indepyear",
            "is",
            "less",
            "than",
            "1930",
            "and",
            "isofficial",
            "of",
            "countrylanguage",
            "is",
            "\"t\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    1930.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "original_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "instance_id": 1341
    },
    {
        "db_id": "world_1",
        "query": "select count ( distinct countrylanguage.language ) from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "countrylanguage.language",
            ")",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of distinct language of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "language",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "original_question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "instance_id": 1342
    },
    {
        "db_id": "world_1",
        "query": "where indepyear < 1930 and countrylanguage.isofficial = \"t\"",
        "query_toks": [
            "where",
            "indepyear",
            "<",
            "1930",
            "and",
            "countrylanguage.isofficial",
            "=",
            "\"t\""
        ],
        "query_toks_no_value": [
            "where",
            "indepyear",
            "<",
            "value",
            "and",
            "countrylanguage.isofficial",
            "=",
            "\"t\""
        ],
        "question": "Keep the records that indepyear is less than 1930 and isofficial of countrylanguage is \"t\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "indepyear",
            "is",
            "less",
            "than",
            "1930",
            "and",
            "isofficial",
            "of",
            "countrylanguage",
            "is",
            "\"t\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ],
                    1930.0,
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"",
        "original_question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "instance_id": 1343
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrycode from countrylanguage",
        "query_toks": [
            "select",
            "distinct",
            "countrycode",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "countrycode",
            "from",
            "countrylanguage"
        ],
        "question": "Get distinct and countrycode of countrylanguage",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "countrycode",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "original_question": "What are the country codes of countries where people use languages other than English?",
        "instance_id": 1344
    },
    {
        "db_id": "world_1",
        "query": "where language != \"english\"",
        "query_toks": [
            "where",
            "language",
            "!=",
            "\"english\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "!=",
            "\"english\""
        ],
        "question": "Keep the records that language is not \"english\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "not",
            "\"english\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "original_question": "What are the country codes of countries where people use languages other than English?",
        "instance_id": 1345
    },
    {
        "db_id": "world_1",
        "query": "select distinct countrycode from countrylanguage",
        "query_toks": [
            "select",
            "distinct",
            "countrycode",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "countrycode",
            "from",
            "countrylanguage"
        ],
        "question": "Get distinct and countrycode of countrylanguage",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "countrycode",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "original_question": "Give the country codes for countries in which people speak langauges that are not English.",
        "instance_id": 1346
    },
    {
        "db_id": "world_1",
        "query": "where language != \"english\"",
        "query_toks": [
            "where",
            "language",
            "!=",
            "\"english\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "!=",
            "\"english\""
        ],
        "question": "Keep the records that language is not \"english\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "not",
            "\"english\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
        "original_question": "Give the country codes for countries in which people speak langauges that are not English.",
        "instance_id": 1347
    },
    {
        "db_id": "world_1",
        "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode",
        "query_toks": [
            "select",
            "distinct",
            "city.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "join",
            "city",
            "on",
            "country.code",
            "=",
            "city.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "city.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "join",
            "city",
            "on",
            "country.code",
            "=",
            "city.countrycode"
        ],
        "question": "Get distinct and name of country that has countrylanguage and city",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "name",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage",
            "and",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "original_question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "instance_id": 1348
    },
    {
        "db_id": "world_1",
        "query": "where countrylanguage.isofficial = \"t\" and countrylanguage.language = \"chinese\" and country.continent = \"asia\"",
        "query_toks": [
            "where",
            "countrylanguage.isofficial",
            "=",
            "\"t\"",
            "and",
            "countrylanguage.language",
            "=",
            "\"chinese\"",
            "and",
            "country.continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "countrylanguage.isofficial",
            "=",
            "\"t\"",
            "and",
            "countrylanguage.language",
            "=",
            "\"chinese\"",
            "and",
            "country.continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that isofficial of countrylanguage is \"t\" and language of countrylanguage is \"chinese\" and continent of country is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "isofficial",
            "of",
            "countrylanguage",
            "is",
            "\"t\"",
            "and",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"chinese\"",
            "and",
            "continent",
            "of",
            "country",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"t\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"chinese\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"",
        "original_question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "instance_id": 1349
    },
    {
        "db_id": "world_1",
        "query": "select distinct city.name from country join countrylanguage on country.code = countrylanguage.countrycode join city on country.code = city.countrycode",
        "query_toks": [
            "select",
            "distinct",
            "city.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "join",
            "city",
            "on",
            "country.code",
            "=",
            "city.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "city.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode",
            "join",
            "city",
            "on",
            "country.code",
            "=",
            "city.countrycode"
        ],
        "question": "Get distinct and name of country that has countrylanguage and city",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "name",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage",
            "and",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "original_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "instance_id": 1350
    },
    {
        "db_id": "world_1",
        "query": "where countrylanguage.isofficial = \"t\" and countrylanguage.language = \"chinese\" and country.continent = \"asia\"",
        "query_toks": [
            "where",
            "countrylanguage.isofficial",
            "=",
            "\"t\"",
            "and",
            "countrylanguage.language",
            "=",
            "\"chinese\"",
            "and",
            "country.continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "countrylanguage.isofficial",
            "=",
            "\"t\"",
            "and",
            "countrylanguage.language",
            "=",
            "\"chinese\"",
            "and",
            "country.continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that isofficial of countrylanguage is \"t\" and language of countrylanguage is \"chinese\" and continent of country is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "isofficial",
            "of",
            "countrylanguage",
            "is",
            "\"t\"",
            "and",
            "language",
            "of",
            "countrylanguage",
            "is",
            "\"chinese\"",
            "and",
            "continent",
            "of",
            "country",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            25,
                            false
                        ],
                        null
                    ],
                    "\"T\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Chinese\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
        "original_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "instance_id": 1351
    },
    {
        "db_id": "world_1",
        "query": "select name , surfacearea , indepyear from country",
        "query_toks": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country"
        ],
        "question": "Get name and surfacearea and indepyear of country",
        "question_toks": [
            "Get",
            "name",
            "and",
            "surfacearea",
            "and",
            "indepyear",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "original_question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "instance_id": 1352
    },
    {
        "db_id": "world_1",
        "query": "order by population ",
        "query_toks": [
            "order",
            "by",
            "population"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "population"
        ],
        "question": "Order these records based on population",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "population"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "original_question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "instance_id": 1353
    },
    {
        "db_id": "world_1",
        "query": "select name , surfacearea , indepyear from country",
        "query_toks": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country"
        ],
        "question": "Get name and surfacearea and indepyear of country",
        "question_toks": [
            "Get",
            "name",
            "and",
            "surfacearea",
            "and",
            "indepyear",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "original_question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "instance_id": 1354
    },
    {
        "db_id": "world_1",
        "query": "order by population ",
        "query_toks": [
            "order",
            "by",
            "population"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "population"
        ],
        "question": "Order these records based on population",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "population"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",
        "original_question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "instance_id": 1355
    },
    {
        "db_id": "world_1",
        "query": "select name , population , headofstate from country",
        "query_toks": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country"
        ],
        "question": "Get name and population and headofstate of country",
        "question_toks": [
            "Get",
            "name",
            "and",
            "population",
            "and",
            "headofstate",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "What are the population, name and leader of the country with the largest area?",
        "instance_id": 1356
    },
    {
        "db_id": "world_1",
        "query": "order by surfacearea desc ",
        "query_toks": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "question": "Order these records based on surfacearea and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "surfacearea",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "What are the population, name and leader of the country with the largest area?",
        "instance_id": 1357
    },
    {
        "db_id": "world_1",
        "query": "select name , population , headofstate from country",
        "query_toks": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country"
        ],
        "question": "Get name and population and headofstate of country",
        "question_toks": [
            "Get",
            "name",
            "and",
            "population",
            "and",
            "headofstate",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "Give the name, population, and head of state for the country that has the largest area.",
        "instance_id": 1358
    },
    {
        "db_id": "world_1",
        "query": "order by surfacearea desc ",
        "query_toks": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "question": "Order these records based on surfacearea and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "surfacearea",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "original_question": "Give the name, population, and head of state for the country that has the largest area.",
        "instance_id": 1359
    },
    {
        "db_id": "world_1",
        "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            ",",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            ",",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of language and name of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "language",
            "and",
            "name",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "original_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "instance_id": 1360
    },
    {
        "db_id": "world_1",
        "query": "group by country.name having count ( * ) > 2",
        "query_toks": [
            "group",
            "by",
            "country.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on name of country that the number is greater than 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "country",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "original_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "instance_id": 1361
    },
    {
        "db_id": "world_1",
        "query": "select count ( countrylanguage.language ) , country.name from country join countrylanguage on country.code = countrylanguage.countrycode",
        "query_toks": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            ",",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "countrylanguage.language",
            ")",
            ",",
            "country.name",
            "from",
            "country",
            "join",
            "countrylanguage",
            "on",
            "country.code",
            "=",
            "countrylanguage.countrycode"
        ],
        "question": "Get the number of language and name of country that has countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "language",
            "and",
            "name",
            "of",
            "country",
            "that",
            "has",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "original_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "instance_id": 1362
    },
    {
        "db_id": "world_1",
        "query": "group by country.name having count ( * ) > 2",
        "query_toks": [
            "group",
            "by",
            "country.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "country.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on name of country that the number is greater than 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "country",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
        "original_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "instance_id": 1363
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) , governmentform from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country"
        ],
        "question": "Get the sum of population and sum and governmentform of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "sum",
            "and",
            "governmentform",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "original_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "instance_id": 1364
    },
    {
        "db_id": "world_1",
        "query": "group by governmentform having avg ( lifeexpectancy ) > 72",
        "query_toks": [
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on governmentform that the average value of lifeexpectancy is greater than 72",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "governmentform",
            "that",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "is",
            "greater",
            "than",
            "72"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "original_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "instance_id": 1365
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) , governmentform from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country"
        ],
        "question": "Get the sum of population and sum and governmentform of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "sum",
            "and",
            "governmentform",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "original_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "instance_id": 1366
    },
    {
        "db_id": "world_1",
        "query": "group by governmentform having avg ( lifeexpectancy ) > 72",
        "query_toks": [
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on governmentform that the average value of lifeexpectancy is greater than 72",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "governmentform",
            "that",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "is",
            "greater",
            "than",
            "72"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
        "original_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "instance_id": 1367
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country"
        ],
        "question": "Get the sum of population and the average value of lifeexpectancy and sum and continent of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "and",
            "sum",
            "and",
            "continent",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "original_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "instance_id": 1368
    },
    {
        "db_id": "world_1",
        "query": "group by continent having avg ( lifeexpectancy ) < 72",
        "query_toks": [
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "Group the records based on continent that the average value of lifeexpectancy is less than 72",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "continent",
            "that",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "is",
            "less",
            "than",
            "72"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "original_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "instance_id": 1369
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) , avg ( lifeexpectancy ) , continent from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country"
        ],
        "question": "Get the sum of population and the average value of lifeexpectancy and sum and continent of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "and",
            "sum",
            "and",
            "continent",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "original_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "instance_id": 1370
    },
    {
        "db_id": "world_1",
        "query": "group by continent having avg ( lifeexpectancy ) < 72",
        "query_toks": [
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "Group the records based on continent that the average value of lifeexpectancy is less than 72",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "continent",
            "that",
            "the",
            "average",
            "value",
            "of",
            "lifeexpectancy",
            "is",
            "less",
            "than",
            "72"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
        "original_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "instance_id": 1371
    },
    {
        "db_id": "world_1",
        "query": "select name , surfacearea from country",
        "query_toks": [
            "select",
            "name",
            ",",
            "surfacearea",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            "from",
            "country"
        ],
        "question": "Get name and surfacearea of country",
        "question_toks": [
            "Get",
            "name",
            "and",
            "surfacearea",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "original_question": "What are the names and areas of countries with the top 5 largest area?",
        "instance_id": 1372
    },
    {
        "db_id": "world_1",
        "query": "order by surfacearea desc ",
        "query_toks": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "question": "Order these records based on surfacearea and sort them in descending order, and return the top 5 records",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "surfacearea",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "5",
            "records"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 5,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "original_question": "What are the names and areas of countries with the top 5 largest area?",
        "instance_id": 1373
    },
    {
        "db_id": "world_1",
        "query": "select name , surfacearea from country",
        "query_toks": [
            "select",
            "name",
            ",",
            "surfacearea",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            "from",
            "country"
        ],
        "question": "Get name and surfacearea of country",
        "question_toks": [
            "Get",
            "name",
            "and",
            "surfacearea",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "original_question": "Return the names and surface areas of the 5 largest countries.",
        "instance_id": 1374
    },
    {
        "db_id": "world_1",
        "query": "order by surfacearea desc ",
        "query_toks": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "surfacearea",
            "desc"
        ],
        "question": "Order these records based on surfacearea and sort them in descending order, and return the top 5 records",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "surfacearea",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "5",
            "records"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 5,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "original_question": "Return the names and surface areas of the 5 largest countries.",
        "instance_id": 1375
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "original_question": "What are names of countries with the top 3 largest population?",
        "instance_id": 1376
    },
    {
        "db_id": "world_1",
        "query": "order by population desc ",
        "query_toks": [
            "order",
            "by",
            "population",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "population",
            "desc"
        ],
        "question": "Order these records based on population and sort them in descending order, and return the top 3 records",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "population",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "3",
            "records"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "original_question": "What are names of countries with the top 3 largest population?",
        "instance_id": 1377
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "original_question": "Return the names of the 3 most populated countries.",
        "instance_id": 1378
    },
    {
        "db_id": "world_1",
        "query": "order by population desc ",
        "query_toks": [
            "order",
            "by",
            "population",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "population",
            "desc"
        ],
        "question": "Order these records based on population and sort them in descending order, and return the top 3 records",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "population",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "3",
            "records"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "original_question": "Return the names of the 3 most populated countries.",
        "instance_id": 1379
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "original_question": "What are the names of the nations with the 3 lowest populations?",
        "instance_id": 1380
    },
    {
        "db_id": "world_1",
        "query": "order by population asc ",
        "query_toks": [
            "order",
            "by",
            "population",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "population",
            "asc"
        ],
        "question": "Order these records based on population and sort them in ascending order, and return the top 3 records",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "population",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "3",
            "records"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "original_question": "What are the names of the nations with the 3 lowest populations?",
        "instance_id": 1381
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "original_question": "Return the names of the 3 countries with the fewest people.",
        "instance_id": 1382
    },
    {
        "db_id": "world_1",
        "query": "order by population asc ",
        "query_toks": [
            "order",
            "by",
            "population",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "population",
            "asc"
        ],
        "question": "Order these records based on population and sort them in ascending order, and return the top 3 records",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "population",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "3",
            "records"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 3,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "original_question": "Return the names of the 3 countries with the fewest people.",
        "instance_id": 1383
    },
    {
        "db_id": "world_1",
        "query": "select count ( * ) from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "question": "Get the number of country",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "original_question": "how many countries are in Asia?",
        "instance_id": 1384
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "original_question": "how many countries are in Asia?",
        "instance_id": 1385
    },
    {
        "db_id": "world_1",
        "query": "select count ( * ) from country",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "country"
        ],
        "question": "Get the number of country",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "original_question": "Count the number of countries in Asia.",
        "instance_id": 1386
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"asia\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"asia\""
        ],
        "question": "Keep the records that continent is \"asia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"asia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"",
        "original_question": "Count the number of countries in Asia.",
        "instance_id": 1387
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "original_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "instance_id": 1388
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"europe\" and population = \"80000\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"europe\"",
            "and",
            "population",
            "=",
            "\"80000\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"europe\"",
            "and",
            "population",
            "=",
            "\"80000\""
        ],
        "question": "Keep the records that continent is \"europe\" and population is \"80000\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"europe\"",
            "and",
            "population",
            "is",
            "\"80000\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Europe\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"80000\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "original_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "instance_id": 1389
    },
    {
        "db_id": "world_1",
        "query": "select name from country",
        "query_toks": [
            "select",
            "name",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "country"
        ],
        "question": "Get name of country",
        "question_toks": [
            "Get",
            "name",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "original_question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "instance_id": 1390
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"europe\" and population = \"80000\"",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"europe\"",
            "and",
            "population",
            "=",
            "\"80000\""
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"europe\"",
            "and",
            "population",
            "=",
            "\"80000\""
        ],
        "question": "Keep the records that continent is \"europe\" and population is \"80000\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"europe\"",
            "and",
            "population",
            "is",
            "\"80000\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Europe\"",
                    null
                ],
                "and",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"80000\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"",
        "original_question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "instance_id": 1391
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) , avg ( surfacearea ) from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "question": "Get the sum of population and the average value of surfacearea and sum of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "the",
            "average",
            "value",
            "of",
            "surfacearea",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "original_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "instance_id": 1392
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"north america\" and surfacearea > 3000",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            "and",
            "surfacearea",
            ">",
            "3000"
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            "and",
            "surfacearea",
            ">",
            "3000"
        ],
        "question": "Keep the records that continent is \"north america\" and surfacearea is greater than 3000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"north",
            "america\"",
            "and",
            "surfacearea",
            "is",
            "greater",
            "than",
            "3000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"north america\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "original_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "instance_id": 1393
    },
    {
        "db_id": "world_1",
        "query": "select sum ( population ) , avg ( surfacearea ) from country",
        "query_toks": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country"
        ],
        "question": "Get the sum of population and the average value of surfacearea and sum of country",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "population",
            "and",
            "the",
            "average",
            "value",
            "of",
            "surfacearea",
            "and",
            "sum",
            "of",
            "country"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "original_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "instance_id": 1394
    },
    {
        "db_id": "world_1",
        "query": "where continent = \"north america\" and surfacearea > 3000",
        "query_toks": [
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            "and",
            "surfacearea",
            ">",
            "3000"
        ],
        "query_toks_no_value": [
            "where",
            "continent",
            "=",
            "\"north",
            "america\"",
            "and",
            "surfacearea",
            ">",
            "3000"
        ],
        "question": "Keep the records that continent is \"north america\" and surfacearea is greater than 3000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "continent",
            "is",
            "\"north",
            "america\"",
            "and",
            "surfacearea",
            "is",
            "greater",
            "than",
            "3000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"north america\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000",
        "original_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "instance_id": 1395
    },
    {
        "db_id": "world_1",
        "query": "select name from city",
        "query_toks": [
            "select",
            "name",
            "from",
            "city"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "city"
        ],
        "question": "Get name of city",
        "question_toks": [
            "Get",
            "name",
            "of",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "original_question": "What are the cities whose population is between 160000 and 900000?",
        "instance_id": 1396
    },
    {
        "db_id": "world_1",
        "query": "where population between 160000 and 900000",
        "query_toks": [
            "where",
            "population",
            "between",
            "160000",
            "and",
            "900000"
        ],
        "query_toks_no_value": [
            "where",
            "population",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Keep the records that population is between 160000 and 900000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "population",
            "is",
            "between",
            "160000",
            "and",
            "900000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    160000.0,
                    900000.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "original_question": "What are the cities whose population is between 160000 and 900000?",
        "instance_id": 1397
    },
    {
        "db_id": "world_1",
        "query": "select name from city",
        "query_toks": [
            "select",
            "name",
            "from",
            "city"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "city"
        ],
        "question": "Get name of city",
        "question_toks": [
            "Get",
            "name",
            "of",
            "city"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select name from city where population between 160000 and 900000",
        "original_question": "Return the names of cities that have a population between 160000 and 900000 .",
        "instance_id": 1398
    },
    {
        "db_id": "world_1",
        "query": "where population between 160000 and 900000",
        "query_toks": [
            "where",
            "population",
            "between",
            "160000",
            "and",
            "900000"
        ],
        "query_toks_no_value": [
            "where",
            "population",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Keep the records that population is between 160000 and 900000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "population",
            "is",
            "between",
            "160000",
            "and",
            "900000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    160000.0,
                    900000.0
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select name from city where population between 160000 and 900000",
        "original_question": "Return the names of cities that have a population between 160000 and 900000 .",
        "instance_id": 1399
    },
    {
        "db_id": "world_1",
        "query": "select language from countrylanguage",
        "query_toks": [
            "select",
            "language",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            "from",
            "countrylanguage"
        ],
        "question": "Get language of countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which language is spoken by the largest number of countries?",
        "instance_id": 1400
    },
    {
        "db_id": "world_1",
        "query": "group by language",
        "query_toks": [
            "group",
            "by",
            "language"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "language"
        ],
        "question": "Group the records based on language",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which language is spoken by the largest number of countries?",
        "instance_id": 1401
    },
    {
        "db_id": "world_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which language is spoken by the largest number of countries?",
        "instance_id": 1402
    },
    {
        "db_id": "world_1",
        "query": "select language from countrylanguage",
        "query_toks": [
            "select",
            "language",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            "from",
            "countrylanguage"
        ],
        "question": "Get language of countrylanguage",
        "question_toks": [
            "Get",
            "language",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Give the language that is spoken in the most countries.",
        "instance_id": 1403
    },
    {
        "db_id": "world_1",
        "query": "group by language",
        "query_toks": [
            "group",
            "by",
            "language"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "language"
        ],
        "question": "Group the records based on language",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "language"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    24,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Give the language that is spoken in the most countries.",
        "instance_id": 1404
    },
    {
        "db_id": "world_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Give the language that is spoken in the most countries.",
        "instance_id": 1405
    },
    {
        "db_id": "world_1",
        "query": "select language , countrycode , max ( percentage ) from countrylanguage",
        "query_toks": [
            "select",
            "language",
            ",",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "Get the maximum value of percentage and language and countrycode of countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "percentage",
            "and",
            "language",
            "and",
            "countrycode",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "original_question": "What is the language spoken by the largest percentage of people in each country?",
        "instance_id": 1406
    },
    {
        "db_id": "world_1",
        "query": "group by countrycode",
        "query_toks": [
            "group",
            "by",
            "countrycode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrycode"
        ],
        "question": "Group the records based on countrycode",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countrycode"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "original_question": "What is the language spoken by the largest percentage of people in each country?",
        "instance_id": 1407
    },
    {
        "db_id": "world_1",
        "query": "select language , countrycode , max ( percentage ) from countrylanguage",
        "query_toks": [
            "select",
            "language",
            ",",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "Get the maximum value of percentage and language and countrycode of countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "percentage",
            "and",
            "language",
            "and",
            "countrycode",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "original_question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "instance_id": 1408
    },
    {
        "db_id": "world_1",
        "query": "group by countrycode",
        "query_toks": [
            "group",
            "by",
            "countrycode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrycode"
        ],
        "question": "Group the records based on countrycode",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countrycode"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",
        "original_question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "instance_id": 1409
    },
    {
        "db_id": "world_1",
        "query": "select count ( * ) , max ( percentage ) from countrylanguage",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "Get the number and the maximum value of percentage of countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "percentage",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "instance_id": 1410
    },
    {
        "db_id": "world_1",
        "query": "where language = \"spanish\" ",
        "query_toks": [
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "question": "Keep the records that language is \"spanish\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "\"spanish\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Spanish\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "instance_id": 1411
    },
    {
        "db_id": "world_1",
        "query": "group by countrycode",
        "query_toks": [
            "group",
            "by",
            "countrycode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrycode"
        ],
        "question": "Group the records based on countrycode",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countrycode"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "instance_id": 1412
    },
    {
        "db_id": "world_1",
        "query": "select count ( * ) , max ( percentage ) from countrylanguage",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "Get the number and the maximum value of percentage of countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "the",
            "maximum",
            "value",
            "of",
            "percentage",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "instance_id": 1413
    },
    {
        "db_id": "world_1",
        "query": "where language = \"spanish\" ",
        "query_toks": [
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "question": "Keep the records that language is \"spanish\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "\"spanish\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Spanish\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "instance_id": 1414
    },
    {
        "db_id": "world_1",
        "query": "group by countryc\"spanish\"e",
        "query_toks": [
            "group",
            "by",
            "countryc\"spanish\"e"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countryc\"spanish\"e"
        ],
        "question": "Group the records based on countryc\"spanish\"e",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countryc\"spanish\"e"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "instance_id": 1415
    },
    {
        "db_id": "world_1",
        "query": "select countrycode , max ( percentage ) from countrylanguage",
        "query_toks": [
            "select",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "Get the maximum value of percentage and countrycode of countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "percentage",
            "and",
            "countrycode",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "instance_id": 1416
    },
    {
        "db_id": "world_1",
        "query": "where language = \"spanish\" ",
        "query_toks": [
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "question": "Keep the records that language is \"spanish\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "\"spanish\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Spanish\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "instance_id": 1417
    },
    {
        "db_id": "world_1",
        "query": "group by countrycode",
        "query_toks": [
            "group",
            "by",
            "countrycode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrycode"
        ],
        "question": "Group the records based on countrycode",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countrycode"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "instance_id": 1418
    },
    {
        "db_id": "world_1",
        "query": "select countrycode , max ( percentage ) from countrylanguage",
        "query_toks": [
            "select",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "query_toks_no_value": [
            "select",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage"
        ],
        "question": "Get the maximum value of percentage and countrycode of countrylanguage",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "percentage",
            "and",
            "countrycode",
            "of",
            "countrylanguage"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "instance_id": 1419
    },
    {
        "db_id": "world_1",
        "query": "where language = \"spanish\" ",
        "query_toks": [
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "query_toks_no_value": [
            "where",
            "language",
            "=",
            "\"spanish\""
        ],
        "question": "Keep the records that language is \"spanish\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "language",
            "is",
            "\"spanish\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            24,
                            false
                        ],
                        null
                    ],
                    "\"Spanish\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "instance_id": 1420
    },
    {
        "db_id": "world_1",
        "query": "group by countrycode",
        "query_toks": [
            "group",
            "by",
            "countrycode"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "countrycode"
        ],
        "question": "Group the records based on countrycode",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "countrycode"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode",
        "original_question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "instance_id": 1421
    },
    {
        "db_id": "orchestra",
        "query": "select count ( * ) from conductor",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "conductor"
        ],
        "question": "Get the number of conductor",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM conductor",
        "original_question": "How many conductors are there?",
        "instance_id": 1422
    },
    {
        "db_id": "orchestra",
        "query": "select count ( * ) from conductor",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "conductor"
        ],
        "question": "Get the number of conductor",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM conductor",
        "original_question": "Count the number of conductors.",
        "instance_id": 1423
    },
    {
        "db_id": "orchestra",
        "query": "select name from conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "question": "Get name of conductor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "original_question": "List the names of conductors in ascending order of age.",
        "instance_id": 1424
    },
    {
        "db_id": "orchestra",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "original_question": "List the names of conductors in ascending order of age.",
        "instance_id": 1425
    },
    {
        "db_id": "orchestra",
        "query": "select name from conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "question": "Get name of conductor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "original_question": "What are the names of conductors, ordered by age?",
        "instance_id": 1426
    },
    {
        "db_id": "orchestra",
        "query": "order by age ",
        "query_toks": [
            "order",
            "by",
            "age"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "age"
        ],
        "question": "Order these records based on age",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "age"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "original_question": "What are the names of conductors, ordered by age?",
        "instance_id": 1427
    },
    {
        "db_id": "orchestra",
        "query": "select name from conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "question": "Get name of conductor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "original_question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "instance_id": 1428
    },
    {
        "db_id": "orchestra",
        "query": "where nationality != \"usa\"",
        "query_toks": [
            "where",
            "nationality",
            "!=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "nationality",
            "!=",
            "\"usa\""
        ],
        "question": "Keep the records that nationality is not \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "nationality",
            "is",
            "not",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "original_question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "instance_id": 1429
    },
    {
        "db_id": "orchestra",
        "query": "select name from conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "question": "Get name of conductor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "original_question": "Return the names of conductors that do not have the nationality \"USA\".",
        "instance_id": 1430
    },
    {
        "db_id": "orchestra",
        "query": "where nationality != \"usa\"",
        "query_toks": [
            "where",
            "nationality",
            "!=",
            "\"usa\""
        ],
        "query_toks_no_value": [
            "where",
            "nationality",
            "!=",
            "\"usa\""
        ],
        "question": "Keep the records that nationality is not \"usa\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "nationality",
            "is",
            "not",
            "\"usa\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "original_question": "Return the names of conductors that do not have the nationality \"USA\".",
        "instance_id": 1431
    },
    {
        "db_id": "orchestra",
        "query": "select record_company from orchestra",
        "query_toks": [
            "select",
            "record_company",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra"
        ],
        "question": "Get record company of orchestra",
        "question_toks": [
            "Get",
            "record",
            "company",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "original_question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "instance_id": 1432
    },
    {
        "db_id": "orchestra",
        "query": "order by year_of_founded ",
        "query_toks": [
            "order",
            "by",
            "year_of_founded"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "year_of_founded"
        ],
        "question": "Order these records based on year of founded",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "year",
            "of",
            "founded"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "original_question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "instance_id": 1433
    },
    {
        "db_id": "orchestra",
        "query": "select record_company from orchestra",
        "query_toks": [
            "select",
            "record_company",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra"
        ],
        "question": "Get record company of orchestra",
        "question_toks": [
            "Get",
            "record",
            "company",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "original_question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "instance_id": 1434
    },
    {
        "db_id": "orchestra",
        "query": "order by year_of_founded ",
        "query_toks": [
            "order",
            "by",
            "year_of_founded"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "year_of_founded"
        ],
        "question": "Order these records based on year of founded",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "year",
            "of",
            "founded"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "original_question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "instance_id": 1435
    },
    {
        "db_id": "orchestra",
        "query": "select avg ( attendance ) from show",
        "query_toks": [
            "select",
            "avg",
            "(",
            "attendance",
            ")",
            "from",
            "show"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "attendance",
            ")",
            "from",
            "show"
        ],
        "question": "Get the average value of attendance of show",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "attendance",
            "of",
            "show"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(Attendance) FROM SHOW",
        "original_question": "What is the average attendance of shows?",
        "instance_id": 1436
    },
    {
        "db_id": "orchestra",
        "query": "select avg ( attendance ) from show",
        "query_toks": [
            "select",
            "avg",
            "(",
            "attendance",
            ")",
            "from",
            "show"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "attendance",
            ")",
            "from",
            "show"
        ],
        "question": "Get the average value of attendance of show",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "attendance",
            "of",
            "show"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(Attendance) FROM SHOW",
        "original_question": "Return the average attendance across all shows.",
        "instance_id": 1437
    },
    {
        "db_id": "orchestra",
        "query": "select max ( share ) , min ( share ) from performance",
        "query_toks": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "performance"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "performance"
        ],
        "question": "Get the maximum value of share and the minimum value of share of performance",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "share",
            "and",
            "the",
            "minimum",
            "value",
            "of",
            "share",
            "of",
            "performance"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "original_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "instance_id": 1438
    },
    {
        "db_id": "orchestra",
        "query": "where type != \"live final\"",
        "query_toks": [
            "where",
            "type",
            "!=",
            "\"live",
            "final\""
        ],
        "query_toks_no_value": [
            "where",
            "type",
            "!=",
            "\"live",
            "final\""
        ],
        "question": "Keep the records that type is not \"live final\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "type",
            "is",
            "not",
            "\"live",
            "final\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"Live final\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "original_question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "instance_id": 1439
    },
    {
        "db_id": "orchestra",
        "query": "select max ( share ) , min ( share ) from performance",
        "query_toks": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "performance"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "share",
            ")",
            ",",
            "min",
            "(",
            "share",
            ")",
            "from",
            "performance"
        ],
        "question": "Get the maximum value of share and the minimum value of share of performance",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "share",
            "and",
            "the",
            "minimum",
            "value",
            "of",
            "share",
            "of",
            "performance"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "original_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "instance_id": 1440
    },
    {
        "db_id": "orchestra",
        "query": "where type != \"live final\"",
        "query_toks": [
            "where",
            "type",
            "!=",
            "\"live",
            "final\""
        ],
        "query_toks_no_value": [
            "where",
            "type",
            "!=",
            "\"live",
            "final\""
        ],
        "question": "Keep the records that type is not \"live final\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "type",
            "is",
            "not",
            "\"live",
            "final\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ],
                    "\"Live final\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
        "original_question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "instance_id": 1441
    },
    {
        "db_id": "orchestra",
        "query": "select count ( distinct nationality ) from conductor",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "conductor"
        ],
        "question": "Get the number of distinct nationality of conductor",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "nationality",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "original_question": "How many different nationalities do conductors have?",
        "instance_id": 1442
    },
    {
        "db_id": "orchestra",
        "query": "select count ( distinct nationality ) from conductor",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "nationality",
            ")",
            "from",
            "conductor"
        ],
        "question": "Get the number of distinct nationality of conductor",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "nationality",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                4,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "original_question": "Count the number of different nationalities of conductors.",
        "instance_id": 1443
    },
    {
        "db_id": "orchestra",
        "query": "select name from conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "question": "Get name of conductor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "original_question": "List names of conductors in descending order of years of work.",
        "instance_id": 1444
    },
    {
        "db_id": "orchestra",
        "query": "order by year_of_work ",
        "query_toks": [
            "order",
            "by",
            "year_of_work"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "year_of_work"
        ],
        "question": "Order these records based on year of work",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "year",
            "of",
            "work"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "original_question": "List names of conductors in descending order of years of work.",
        "instance_id": 1445
    },
    {
        "db_id": "orchestra",
        "query": "select name from conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "question": "Get name of conductor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "original_question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "instance_id": 1446
    },
    {
        "db_id": "orchestra",
        "query": "order by year_of_work ",
        "query_toks": [
            "order",
            "by",
            "year_of_work"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "year_of_work"
        ],
        "question": "Order these records based on year of work",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "year",
            "of",
            "work"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "original_question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "instance_id": 1447
    },
    {
        "db_id": "orchestra",
        "query": "select name from conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "question": "Get name of conductor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "original_question": "List the name of the conductor with the most years of work.",
        "instance_id": 1448
    },
    {
        "db_id": "orchestra",
        "query": "order by year_of_work desc ",
        "query_toks": [
            "order",
            "by",
            "year_of_work",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "year_of_work",
            "desc"
        ],
        "question": "Order these records based on year of work and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "year",
            "of",
            "work",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "original_question": "List the name of the conductor with the most years of work.",
        "instance_id": 1449
    },
    {
        "db_id": "orchestra",
        "query": "select name from conductor",
        "query_toks": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "conductor"
        ],
        "question": "Get name of conductor",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "original_question": "What is the name of the conductor who has worked the greatest number of years?",
        "instance_id": 1450
    },
    {
        "db_id": "orchestra",
        "query": "order by year_of_work desc ",
        "query_toks": [
            "order",
            "by",
            "year_of_work",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "year_of_work",
            "desc"
        ],
        "question": "Order these records based on year of work and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "year",
            "of",
            "work",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "original_question": "What is the name of the conductor who has worked the greatest number of years?",
        "instance_id": 1451
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name , orchestra.orchestra from conductor join orchestra",
        "query_toks": [
            "select",
            "conductor.name",
            ",",
            "orchestra.orchestra",
            "from",
            "conductor",
            "join",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "conductor.name",
            ",",
            "orchestra.orchestra",
            "from",
            "conductor",
            "join",
            "orchestra"
        ],
        "question": "Get name and orchestra of conductor that has orchestra",
        "question_toks": [
            "Get",
            "name",
            "and",
            "orchestra",
            "of",
            "conductor",
            "that",
            "has",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "original_question": "Show the names of conductors and the orchestras they have conducted.",
        "instance_id": 1452
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name , orchestra.orchestra from conductor join orchestra",
        "query_toks": [
            "select",
            "conductor.name",
            ",",
            "orchestra.orchestra",
            "from",
            "conductor",
            "join",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "conductor.name",
            ",",
            "orchestra.orchestra",
            "from",
            "conductor",
            "join",
            "orchestra"
        ],
        "question": "Get name and orchestra of conductor that has orchestra",
        "question_toks": [
            "Get",
            "name",
            "and",
            "orchestra",
            "of",
            "conductor",
            "that",
            "has",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
        "original_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "instance_id": 1453
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id",
        "query_toks": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "query_toks_no_value": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "question": "Get name of conductor that has orchestra",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor",
            "that",
            "has",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "original_question": "Show the names of conductors that have conducted more than one orchestras.",
        "instance_id": 1454
    },
    {
        "db_id": "orchestra",
        "query": "group by orchestra.conductor_id having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "orchestra.conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "orchestra.conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on conductor id of orchestra that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "conductor",
            "id",
            "of",
            "orchestra",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "original_question": "Show the names of conductors that have conducted more than one orchestras.",
        "instance_id": 1455
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id",
        "query_toks": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "query_toks_no_value": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "question": "Get name of conductor that has orchestra",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor",
            "that",
            "has",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "original_question": "What are the names of conductors who have conducted at more than one orchestra?",
        "instance_id": 1456
    },
    {
        "db_id": "orchestra",
        "query": "group by orchestra.conductor_id having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "orchestra.conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "orchestra.conductor_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on conductor id of orchestra that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "conductor",
            "id",
            "of",
            "orchestra",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1",
        "original_question": "What are the names of conductors who have conducted at more than one orchestra?",
        "instance_id": 1457
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id",
        "query_toks": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "query_toks_no_value": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "question": "Get name of conductor that has orchestra",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor",
            "that",
            "has",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "instance_id": 1458
    },
    {
        "db_id": "orchestra",
        "query": "group by orchestra.conductor_id",
        "query_toks": [
            "group",
            "by",
            "orchestra.conductor_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "orchestra.conductor_id"
        ],
        "question": "Group the records based on conductor id of orchestra",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "conductor",
            "id",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "instance_id": 1459
    },
    {
        "db_id": "orchestra",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "instance_id": 1460
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id",
        "query_toks": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "query_toks_no_value": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "question": "Get name of conductor that has orchestra",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor",
            "that",
            "has",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the name of the conductor who has conducted the most orchestras?",
        "instance_id": 1461
    },
    {
        "db_id": "orchestra",
        "query": "group by orchestra.conductor_id",
        "query_toks": [
            "group",
            "by",
            "orchestra.conductor_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "orchestra.conductor_id"
        ],
        "question": "Group the records based on conductor id of orchestra",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "conductor",
            "id",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the name of the conductor who has conducted the most orchestras?",
        "instance_id": 1462
    },
    {
        "db_id": "orchestra",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the name of the conductor who has conducted the most orchestras?",
        "instance_id": 1463
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id",
        "query_toks": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "query_toks_no_value": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "question": "Get name of conductor that has orchestra",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor",
            "that",
            "has",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "original_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "instance_id": 1464
    },
    {
        "db_id": "orchestra",
        "query": "where year_of_founded > 2008",
        "query_toks": [
            "where",
            "year_of_founded",
            ">",
            "2008"
        ],
        "query_toks_no_value": [
            "where",
            "year_of_founded",
            ">",
            "value"
        ],
        "question": "Keep the records that year of founded is greater than 2008",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "founded",
            "is",
            "greater",
            "than",
            "2008"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    2008.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "original_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "instance_id": 1465
    },
    {
        "db_id": "orchestra",
        "query": "select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id",
        "query_toks": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "query_toks_no_value": [
            "select",
            "conductor.name",
            "from",
            "conductor",
            "join",
            "orchestra",
            "on",
            "conductor.conductor_id",
            "=",
            "orchestra.conductor_id"
        ],
        "question": "Get name of conductor that has orchestra",
        "question_toks": [
            "Get",
            "name",
            "of",
            "conductor",
            "that",
            "has",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "original_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "instance_id": 1466
    },
    {
        "db_id": "orchestra",
        "query": "where year_of_founded > 2008",
        "query_toks": [
            "where",
            "year_of_founded",
            ">",
            "2008"
        ],
        "query_toks_no_value": [
            "where",
            "year_of_founded",
            ">",
            "value"
        ],
        "question": "Keep the records that year of founded is greater than 2008",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "year",
            "of",
            "founded",
            "is",
            "greater",
            "than",
            "2008"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    2008.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
        "original_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "instance_id": 1467
    },
    {
        "db_id": "orchestra",
        "query": "select record_company , count ( * ) from orchestra",
        "query_toks": [
            "select",
            "record_company",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra"
        ],
        "question": "Get the number and record company of orchestra",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "record",
            "company",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "original_question": "Please show the different record companies and the corresponding number of orchestras.",
        "instance_id": 1468
    },
    {
        "db_id": "orchestra",
        "query": "group by record_company",
        "query_toks": [
            "group",
            "by",
            "record_company"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "record_company"
        ],
        "question": "Group the records based on record company",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "record",
            "company"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "original_question": "Please show the different record companies and the corresponding number of orchestras.",
        "instance_id": 1469
    },
    {
        "db_id": "orchestra",
        "query": "select record_company , count ( * ) from orchestra",
        "query_toks": [
            "select",
            "record_company",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra"
        ],
        "question": "Get the number and record company of orchestra",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "record",
            "company",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "original_question": "How many orchestras does each record company manage?",
        "instance_id": 1470
    },
    {
        "db_id": "orchestra",
        "query": "group by record_company",
        "query_toks": [
            "group",
            "by",
            "record_company"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "record_company"
        ],
        "question": "Group the records based on record company",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "record",
            "company"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
        "original_question": "How many orchestras does each record company manage?",
        "instance_id": 1471
    },
    {
        "db_id": "orchestra",
        "query": "select major_record_format from orchestra",
        "query_toks": [
            "select",
            "major_record_format",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "major_record_format",
            "from",
            "orchestra"
        ],
        "question": "Get major record format of orchestra",
        "question_toks": [
            "Get",
            "major",
            "record",
            "format",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "original_question": "Please show the record formats of orchestras in ascending order of count.",
        "instance_id": 1472
    },
    {
        "db_id": "orchestra",
        "query": "group by major_record_format",
        "query_toks": [
            "group",
            "by",
            "major_record_format"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "major_record_format"
        ],
        "question": "Group the records based on major record format",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "major",
            "record",
            "format"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "original_question": "Please show the record formats of orchestras in ascending order of count.",
        "instance_id": 1473
    },
    {
        "db_id": "orchestra",
        "query": "order by count ( * ) ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "question": "Order these records based on the number",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "original_question": "Please show the record formats of orchestras in ascending order of count.",
        "instance_id": 1474
    },
    {
        "db_id": "orchestra",
        "query": "select major_record_format from orchestra",
        "query_toks": [
            "select",
            "major_record_format",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "major_record_format",
            "from",
            "orchestra"
        ],
        "question": "Get major record format of orchestra",
        "question_toks": [
            "Get",
            "major",
            "record",
            "format",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "original_question": "What are the major record formats of orchestras, sorted by their frequency?",
        "instance_id": 1475
    },
    {
        "db_id": "orchestra",
        "query": "group by major_record_format",
        "query_toks": [
            "group",
            "by",
            "major_record_format"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "major_record_format"
        ],
        "question": "Group the records based on major record format",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "major",
            "record",
            "format"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    11,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "original_question": "What are the major record formats of orchestras, sorted by their frequency?",
        "instance_id": 1476
    },
    {
        "db_id": "orchestra",
        "query": "order by count ( * ) ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")"
        ],
        "question": "Order these records based on the number",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "original_question": "What are the major record formats of orchestras, sorted by their frequency?",
        "instance_id": 1477
    },
    {
        "db_id": "orchestra",
        "query": "select record_company from orchestra",
        "query_toks": [
            "select",
            "record_company",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra"
        ],
        "question": "Get record company of orchestra",
        "question_toks": [
            "Get",
            "record",
            "company",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "List the record company shared by the most number of orchestras.",
        "instance_id": 1478
    },
    {
        "db_id": "orchestra",
        "query": "group by record_company",
        "query_toks": [
            "group",
            "by",
            "record_company"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "record_company"
        ],
        "question": "Group the records based on record company",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "record",
            "company"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "List the record company shared by the most number of orchestras.",
        "instance_id": 1479
    },
    {
        "db_id": "orchestra",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "List the record company shared by the most number of orchestras.",
        "instance_id": 1480
    },
    {
        "db_id": "orchestra",
        "query": "select record_company from orchestra",
        "query_toks": [
            "select",
            "record_company",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "record_company",
            "from",
            "orchestra"
        ],
        "question": "Get record company of orchestra",
        "question_toks": [
            "Get",
            "record",
            "company",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the record company used by the greatest number of orchestras?",
        "instance_id": 1481
    },
    {
        "db_id": "orchestra",
        "query": "group by record_company",
        "query_toks": [
            "group",
            "by",
            "record_company"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "record_company"
        ],
        "question": "Group the records based on record company",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "record",
            "company"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    9,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the record company used by the greatest number of orchestras?",
        "instance_id": 1482
    },
    {
        "db_id": "orchestra",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "What is the record company used by the greatest number of orchestras?",
        "instance_id": 1483
    },
    {
        "db_id": "orchestra",
        "query": "select count ( * ) from orchestra",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra"
        ],
        "question": "Get the number of orchestra",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "original_question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "instance_id": 1484
    },
    {
        "db_id": "orchestra",
        "query": "where major_record_format = \"cd\" or major_record_format = \"dvd\"",
        "query_toks": [
            "where",
            "major_record_format",
            "=",
            "\"cd\"",
            "or",
            "major_record_format",
            "=",
            "\"dvd\""
        ],
        "query_toks_no_value": [
            "where",
            "major_record_format",
            "=",
            "\"cd\"",
            "or",
            "major_record_format",
            "=",
            "\"dvd\""
        ],
        "question": "Keep the records that major record format is \"cd\" or major record format is \"dvd\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "major",
            "record",
            "format",
            "is",
            "\"cd\"",
            "or",
            "major",
            "record",
            "format",
            "is",
            "\"dvd\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"CD\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"DVD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "original_question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "instance_id": 1485
    },
    {
        "db_id": "orchestra",
        "query": "select count ( * ) from orchestra",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "orchestra"
        ],
        "question": "Get the number of orchestra",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "orchestra"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "original_question": "Count the number of orchestras that have CD or DVD as their record format.",
        "instance_id": 1486
    },
    {
        "db_id": "orchestra",
        "query": "where major_record_format = \"cd\" or major_record_format = \"dvd\"",
        "query_toks": [
            "where",
            "major_record_format",
            "=",
            "\"cd\"",
            "or",
            "major_record_format",
            "=",
            "\"dvd\""
        ],
        "query_toks_no_value": [
            "where",
            "major_record_format",
            "=",
            "\"cd\"",
            "or",
            "major_record_format",
            "=",
            "\"dvd\""
        ],
        "question": "Keep the records that major record format is \"cd\" or major record format is \"dvd\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "major",
            "record",
            "format",
            "is",
            "\"cd\"",
            "or",
            "major",
            "record",
            "format",
            "is",
            "\"dvd\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"CD\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"DVD\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
        "original_question": "Count the number of orchestras that have CD or DVD as their record format.",
        "instance_id": 1487
    },
    {
        "db_id": "orchestra",
        "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id",
        "query_toks": [
            "select",
            "year_of_founded",
            "from",
            "orchestra",
            "join",
            "performance",
            "on",
            "orchestra.orchestra_id",
            "=",
            "performance.orchestra_id"
        ],
        "query_toks_no_value": [
            "select",
            "year_of_founded",
            "from",
            "orchestra",
            "join",
            "performance",
            "on",
            "orchestra.orchestra_id",
            "=",
            "performance.orchestra_id"
        ],
        "question": "Get year of founded of orchestra that has performance",
        "question_toks": [
            "Get",
            "year",
            "of",
            "founded",
            "of",
            "orchestra",
            "that",
            "has",
            "performance"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "original_question": "Show the years in which orchestras that have given more than one performance are founded.",
        "instance_id": 1488
    },
    {
        "db_id": "orchestra",
        "query": "group by performance.orchestra_id having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "performance.orchestra_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "performance.orchestra_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on orchestra id of performance that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "orchestra",
            "id",
            "of",
            "performance",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "original_question": "Show the years in which orchestras that have given more than one performance are founded.",
        "instance_id": 1489
    },
    {
        "db_id": "orchestra",
        "query": "select year_of_founded from orchestra join performance on orchestra.orchestra_id = performance.orchestra_id",
        "query_toks": [
            "select",
            "year_of_founded",
            "from",
            "orchestra",
            "join",
            "performance",
            "on",
            "orchestra.orchestra_id",
            "=",
            "performance.orchestra_id"
        ],
        "query_toks_no_value": [
            "select",
            "year_of_founded",
            "from",
            "orchestra",
            "join",
            "performance",
            "on",
            "orchestra.orchestra_id",
            "=",
            "performance.orchestra_id"
        ],
        "question": "Get year of founded of orchestra that has performance",
        "question_toks": [
            "Get",
            "year",
            "of",
            "founded",
            "of",
            "orchestra",
            "that",
            "has",
            "performance"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "original_question": "What are years of founding for orchestras that have had more than a single performance?",
        "instance_id": 1490
    },
    {
        "db_id": "orchestra",
        "query": "group by performance.orchestra_id having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "performance.orchestra_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "performance.orchestra_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on orchestra id of performance that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "orchestra",
            "id",
            "of",
            "performance",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    13,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1",
        "original_question": "What are years of founding for orchestras that have had more than a single performance?",
        "instance_id": 1491
    },
    {
        "db_id": "network_1",
        "query": "select count ( * ) from highschooler",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "question": "Get the number of highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Highschooler",
        "original_question": "How many high schoolers are there?",
        "instance_id": 1492
    },
    {
        "db_id": "network_1",
        "query": "select count ( * ) from highschooler",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "question": "Get the number of highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Highschooler",
        "original_question": "Count the number of high schoolers.",
        "instance_id": 1493
    },
    {
        "db_id": "network_1",
        "query": "select name , grade from highschooler",
        "query_toks": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get name and grade of highschooler",
        "question_toks": [
            "Get",
            "name",
            "and",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  grade FROM Highschooler",
        "original_question": "Show the names and grades of each high schooler.",
        "instance_id": 1494
    },
    {
        "db_id": "network_1",
        "query": "select name , grade from highschooler",
        "query_toks": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get name and grade of highschooler",
        "question_toks": [
            "Get",
            "name",
            "and",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  grade FROM Highschooler",
        "original_question": "What are the names and grades for each high schooler?",
        "instance_id": 1495
    },
    {
        "db_id": "network_1",
        "query": "select grade from highschooler",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get grade of highschooler",
        "question_toks": [
            "Get",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler",
        "original_question": "Show all the grades of the high schoolers.",
        "instance_id": 1496
    },
    {
        "db_id": "network_1",
        "query": "select grade from highschooler",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get grade of highschooler",
        "question_toks": [
            "Get",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler",
        "original_question": "What is the grade of each high schooler?",
        "instance_id": 1497
    },
    {
        "db_id": "network_1",
        "query": "select grade from highschooler",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get grade of highschooler",
        "question_toks": [
            "Get",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "original_question": "What grade is Kyle in?",
        "instance_id": 1498
    },
    {
        "db_id": "network_1",
        "query": "where name = \"kyle\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "original_question": "What grade is Kyle in?",
        "instance_id": 1499
    },
    {
        "db_id": "network_1",
        "query": "select grade from highschooler",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get grade of highschooler",
        "question_toks": [
            "Get",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "original_question": "Return the grade for the high schooler named Kyle.",
        "instance_id": 1500
    },
    {
        "db_id": "network_1",
        "query": "where name = \"kyle\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
        "original_question": "Return the grade for the high schooler named Kyle.",
        "instance_id": 1501
    },
    {
        "db_id": "network_1",
        "query": "select name from highschooler",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "question": "Get name of highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
        "original_question": "Show the names of all high schoolers in grade 10.",
        "instance_id": 1502
    },
    {
        "db_id": "network_1",
        "query": "where grade = 10",
        "query_toks": [
            "where",
            "grade",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "where",
            "grade",
            "=",
            "value"
        ],
        "question": "Keep the records that grade is 10",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "grade",
            "is",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
        "original_question": "Show the names of all high schoolers in grade 10.",
        "instance_id": 1503
    },
    {
        "db_id": "network_1",
        "query": "select name from highschooler",
        "query_toks": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "highschooler"
        ],
        "question": "Get name of highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
        "original_question": "What are the names of all high schoolers in grade 10?",
        "instance_id": 1504
    },
    {
        "db_id": "network_1",
        "query": "where grade = 10",
        "query_toks": [
            "where",
            "grade",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "where",
            "grade",
            "=",
            "value"
        ],
        "question": "Keep the records that grade is 10",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "grade",
            "is",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name FROM Highschooler WHERE grade  =  10",
        "original_question": "What are the names of all high schoolers in grade 10?",
        "instance_id": 1505
    },
    {
        "db_id": "network_1",
        "query": "select id from highschooler",
        "query_toks": [
            "select",
            "id",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "highschooler"
        ],
        "question": "Get id of highschooler",
        "question_toks": [
            "Get",
            "id",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "original_question": "Show the ID of the high schooler named Kyle.",
        "instance_id": 1506
    },
    {
        "db_id": "network_1",
        "query": "where name = \"kyle\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "original_question": "Show the ID of the high schooler named Kyle.",
        "instance_id": 1507
    },
    {
        "db_id": "network_1",
        "query": "select id from highschooler",
        "query_toks": [
            "select",
            "id",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "id",
            "from",
            "highschooler"
        ],
        "question": "Get id of highschooler",
        "question_toks": [
            "Get",
            "id",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "original_question": "What is Kyle's id?",
        "instance_id": 1508
    },
    {
        "db_id": "network_1",
        "query": "where name = \"kyle\"",
        "query_toks": [
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
        "original_question": "What is Kyle's id?",
        "instance_id": 1509
    },
    {
        "db_id": "network_1",
        "query": "select count ( * ) from highschooler",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "question": "Get the number of highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "original_question": "How many high schoolers are there in grade 9 or 10?",
        "instance_id": 1510
    },
    {
        "db_id": "network_1",
        "query": "where grade = 9 or grade = 10",
        "query_toks": [
            "where",
            "grade",
            "=",
            "9",
            "or",
            "grade",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "where",
            "grade",
            "=",
            "value",
            "or",
            "grade",
            "=",
            "value"
        ],
        "question": "Keep the records that grade is 9 or grade is 10",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "grade",
            "is",
            "9",
            "or",
            "grade",
            "is",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    9.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "original_question": "How many high schoolers are there in grade 9 or 10?",
        "instance_id": 1511
    },
    {
        "db_id": "network_1",
        "query": "select count ( * ) from highschooler",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "question": "Get the number of highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "original_question": "Count the number of high schoolers in grades 9 or 10.",
        "instance_id": 1512
    },
    {
        "db_id": "network_1",
        "query": "where grade = 9 or grade = 10",
        "query_toks": [
            "where",
            "grade",
            "=",
            "9",
            "or",
            "grade",
            "=",
            "10"
        ],
        "query_toks_no_value": [
            "where",
            "grade",
            "=",
            "value",
            "or",
            "grade",
            "=",
            "value"
        ],
        "question": "Keep the records that grade is 9 or grade is 10",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "grade",
            "is",
            "9",
            "or",
            "grade",
            "is",
            "10"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    9.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    10.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "original_question": "Count the number of high schoolers in grades 9 or 10.",
        "instance_id": 1513
    },
    {
        "db_id": "network_1",
        "query": "select grade , count ( * ) from highschooler",
        "query_toks": [
            "select",
            "grade",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "question": "Get the number and grade of highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "original_question": "Show the number of high schoolers for each grade.",
        "instance_id": 1514
    },
    {
        "db_id": "network_1",
        "query": "group by grade",
        "query_toks": [
            "group",
            "by",
            "grade"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "grade"
        ],
        "question": "Group the records based on grade",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "grade"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "original_question": "Show the number of high schoolers for each grade.",
        "instance_id": 1515
    },
    {
        "db_id": "network_1",
        "query": "select grade , count ( * ) from highschooler",
        "query_toks": [
            "select",
            "grade",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "highschooler"
        ],
        "question": "Get the number and grade of highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "original_question": "How many high schoolers are in each grade?",
        "instance_id": 1516
    },
    {
        "db_id": "network_1",
        "query": "group by grade",
        "query_toks": [
            "group",
            "by",
            "grade"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "grade"
        ],
        "question": "Group the records based on grade",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "grade"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "original_question": "How many high schoolers are in each grade?",
        "instance_id": 1517
    },
    {
        "db_id": "network_1",
        "query": "select grade from highschooler",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get grade of highschooler",
        "question_toks": [
            "Get",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which grade has the most high schoolers?",
        "instance_id": 1518
    },
    {
        "db_id": "network_1",
        "query": "group by grade",
        "query_toks": [
            "group",
            "by",
            "grade"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "grade"
        ],
        "question": "Group the records based on grade",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "grade"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which grade has the most high schoolers?",
        "instance_id": 1519
    },
    {
        "db_id": "network_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which grade has the most high schoolers?",
        "instance_id": 1520
    },
    {
        "db_id": "network_1",
        "query": "select grade from highschooler",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get grade of highschooler",
        "question_toks": [
            "Get",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the grade that has the greatest number of high schoolers.",
        "instance_id": 1521
    },
    {
        "db_id": "network_1",
        "query": "group by grade",
        "query_toks": [
            "group",
            "by",
            "grade"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "grade"
        ],
        "question": "Group the records based on grade",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "grade"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the grade that has the greatest number of high schoolers.",
        "instance_id": 1522
    },
    {
        "db_id": "network_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the grade that has the greatest number of high schoolers.",
        "instance_id": 1523
    },
    {
        "db_id": "network_1",
        "query": "select grade from highschooler",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get grade of highschooler",
        "question_toks": [
            "Get",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "original_question": "Show me all grades that have at least 4 students.",
        "instance_id": 1524
    },
    {
        "db_id": "network_1",
        "query": "group by grade having count ( * ) <= 4",
        "query_toks": [
            "group",
            "by",
            "grade",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "4"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "grade",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on grade that the number is less than or equal to 4",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "grade",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "original_question": "Show me all grades that have at least 4 students.",
        "instance_id": 1525
    },
    {
        "db_id": "network_1",
        "query": "select grade from highschooler",
        "query_toks": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Get grade of highschooler",
        "question_toks": [
            "Get",
            "grade",
            "of",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "original_question": "Which grades have 4 or more high schoolers?",
        "instance_id": 1526
    },
    {
        "db_id": "network_1",
        "query": "group by grade having count ( * ) <= 4",
        "query_toks": [
            "group",
            "by",
            "grade",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "4"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "grade",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on grade that the number is less than or equal to 4",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "grade",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "4"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    3,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
        "original_question": "Which grades have 4 or more high schoolers?",
        "instance_id": 1527
    },
    {
        "db_id": "network_1",
        "query": "select student_id , count ( * ) from friend",
        "query_toks": [
            "select",
            "student_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend"
        ],
        "query_toks_no_value": [
            "select",
            "student_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend"
        ],
        "question": "Get the number and student id of friend",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "student",
            "id",
            "of",
            "friend"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "original_question": "Show the student IDs and numbers of friends corresponding to each.",
        "instance_id": 1528
    },
    {
        "db_id": "network_1",
        "query": "group by student_id",
        "query_toks": [
            "group",
            "by",
            "student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student_id"
        ],
        "question": "Group the records based on student id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "original_question": "Show the student IDs and numbers of friends corresponding to each.",
        "instance_id": 1529
    },
    {
        "db_id": "network_1",
        "query": "select student_id , count ( * ) from friend",
        "query_toks": [
            "select",
            "student_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend"
        ],
        "query_toks_no_value": [
            "select",
            "student_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend"
        ],
        "question": "Get the number and student id of friend",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "student",
            "id",
            "of",
            "friend"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "original_question": "How many friends does each student have?",
        "instance_id": 1530
    },
    {
        "db_id": "network_1",
        "query": "group by student_id",
        "query_toks": [
            "group",
            "by",
            "student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student_id"
        ],
        "question": "Group the records based on student id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
        "original_question": "How many friends does each student have?",
        "instance_id": 1531
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get the number and name of friend that has highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_question": "Show the names of high school students and their corresponding number of friends.",
        "instance_id": 1532
    },
    {
        "db_id": "network_1",
        "query": "group by friend.student_id",
        "query_toks": [
            "group",
            "by",
            "friend.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "friend.student_id"
        ],
        "question": "Group the records based on student id of friend",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "friend"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_question": "Show the names of high school students and their corresponding number of friends.",
        "instance_id": 1533
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , count ( * ) from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get the number and name of friend that has highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_question": "What are the names of the high schoolers and how many friends does each have?",
        "instance_id": 1534
    },
    {
        "db_id": "network_1",
        "query": "group by friend.student_id",
        "query_toks": [
            "group",
            "by",
            "friend.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "friend.student_id"
        ],
        "question": "Group the records based on student id of friend",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "friend"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_question": "What are the names of the high schoolers and how many friends does each have?",
        "instance_id": 1535
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of friend that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the high schooler who has the greatest number of friends?",
        "instance_id": 1536
    },
    {
        "db_id": "network_1",
        "query": "group by friend.student_id",
        "query_toks": [
            "group",
            "by",
            "friend.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "friend.student_id"
        ],
        "question": "Group the records based on student id of friend",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "friend"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the high schooler who has the greatest number of friends?",
        "instance_id": 1537
    },
    {
        "db_id": "network_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the high schooler who has the greatest number of friends?",
        "instance_id": 1538
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of friend that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the name of the high school student with the most friends.",
        "instance_id": 1539
    },
    {
        "db_id": "network_1",
        "query": "group by friend.student_id",
        "query_toks": [
            "group",
            "by",
            "friend.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "friend.student_id"
        ],
        "question": "Group the records based on student id of friend",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "friend"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the name of the high school student with the most friends.",
        "instance_id": 1540
    },
    {
        "db_id": "network_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the name of the high school student with the most friends.",
        "instance_id": 1541
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of friend that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "original_question": "Show the names of high schoolers who have at least 3 friends.",
        "instance_id": 1542
    },
    {
        "db_id": "network_1",
        "query": "group by friend.student_id having count ( * ) <= 3",
        "query_toks": [
            "group",
            "by",
            "friend.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "3"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "friend.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on student id of friend that the number is less than or equal to 3",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "friend",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "original_question": "Show the names of high schoolers who have at least 3 friends.",
        "instance_id": 1543
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of friend that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "original_question": "What are the names of high schoolers who have 3 or more friends?",
        "instance_id": 1544
    },
    {
        "db_id": "network_1",
        "query": "group by friend.student_id having count ( * ) <= 3",
        "query_toks": [
            "group",
            "by",
            "friend.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "3"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "friend.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on student id of friend that the number is less than or equal to 3",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "friend",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "3"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    3.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
        "original_question": "What are the names of high schoolers who have 3 or more friends?",
        "instance_id": 1545
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id",
            "join",
            "highschooler",
            "on",
            "friend.friend_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id",
            "join",
            "highschooler",
            "on",
            "friend.friend_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of friend that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "Show the names of all of the high schooler Kyle's friends.",
        "instance_id": 1546
    },
    {
        "db_id": "network_1",
        "query": "where highschooler.name = \"kyle\"",
        "query_toks": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name of highschooler is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "highschooler",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "Show the names of all of the high schooler Kyle's friends.",
        "instance_id": 1547
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id join highschooler on friend.friend_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id",
            "join",
            "highschooler",
            "on",
            "friend.friend_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id",
            "join",
            "highschooler",
            "on",
            "friend.friend_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of friend that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "Return the names of friends of the high school student Kyle.",
        "instance_id": 1548
    },
    {
        "db_id": "network_1",
        "query": "where highschooler.name = \"kyle\"",
        "query_toks": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name of highschooler is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "highschooler",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "Return the names of friends of the high school student Kyle.",
        "instance_id": 1549
    },
    {
        "db_id": "network_1",
        "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get the number of friend that has highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "How many friends does the high school student Kyle have?",
        "instance_id": 1550
    },
    {
        "db_id": "network_1",
        "query": "where highschooler.name = \"kyle\"",
        "query_toks": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name of highschooler is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "highschooler",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "How many friends does the high school student Kyle have?",
        "instance_id": 1551
    },
    {
        "db_id": "network_1",
        "query": "select count ( * ) from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get the number of friend that has highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "Count the number of friends Kyle has.",
        "instance_id": 1552
    },
    {
        "db_id": "network_1",
        "query": "where highschooler.name = \"kyle\"",
        "query_toks": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name of highschooler is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "highschooler",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "Count the number of friends Kyle has.",
        "instance_id": 1553
    },
    {
        "db_id": "network_1",
        "query": "select student_id , count ( * ) from likes",
        "query_toks": [
            "select",
            "student_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes"
        ],
        "query_toks_no_value": [
            "select",
            "student_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes"
        ],
        "question": "Get the number and student id of likes",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "student",
            "id",
            "of",
            "likes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "original_question": "Count the number of likes for each student id.",
        "instance_id": 1554
    },
    {
        "db_id": "network_1",
        "query": "group by student_id",
        "query_toks": [
            "group",
            "by",
            "student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student_id"
        ],
        "question": "Group the records based on student id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "original_question": "Count the number of likes for each student id.",
        "instance_id": 1555
    },
    {
        "db_id": "network_1",
        "query": "select student_id , count ( * ) from likes",
        "query_toks": [
            "select",
            "student_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes"
        ],
        "query_toks_no_value": [
            "select",
            "student_id",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes"
        ],
        "question": "Get the number and student id of likes",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "student",
            "id",
            "of",
            "likes"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "original_question": "How many likes correspond to each student id?",
        "instance_id": 1556
    },
    {
        "db_id": "network_1",
        "query": "group by student_id",
        "query_toks": [
            "group",
            "by",
            "student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "student_id"
        ],
        "question": "Group the records based on student id",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
        "original_question": "How many likes correspond to each student id?",
        "instance_id": 1557
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get the number and name of likes that has highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "likes",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "instance_id": 1558
    },
    {
        "db_id": "network_1",
        "query": "group by likes.student_id",
        "query_toks": [
            "group",
            "by",
            "likes.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "likes.student_id"
        ],
        "question": "Group the records based on student id of likes",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "likes"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "instance_id": 1559
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name , count ( * ) from likes join highschooler on likes.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get the number and name of likes that has highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "name",
            "of",
            "likes",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "instance_id": 1560
    },
    {
        "db_id": "network_1",
        "query": "group by likes.student_id",
        "query_toks": [
            "group",
            "by",
            "likes.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "likes.student_id"
        ],
        "question": "Group the records based on student id of likes",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "likes"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
        "original_question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "instance_id": 1561
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of likes that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "likes",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the high schooler who has the greatest number of likes?",
        "instance_id": 1562
    },
    {
        "db_id": "network_1",
        "query": "group by likes.student_id",
        "query_toks": [
            "group",
            "by",
            "likes.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "likes.student_id"
        ],
        "question": "Group the records based on student id of likes",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "likes"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the high schooler who has the greatest number of likes?",
        "instance_id": 1563
    },
    {
        "db_id": "network_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the high schooler who has the greatest number of likes?",
        "instance_id": 1564
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of likes that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "likes",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Give the name of the student with the most likes.",
        "instance_id": 1565
    },
    {
        "db_id": "network_1",
        "query": "group by likes.student_id",
        "query_toks": [
            "group",
            "by",
            "likes.student_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "likes.student_id"
        ],
        "question": "Group the records based on student id of likes",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "likes"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Give the name of the student with the most likes.",
        "instance_id": 1566
    },
    {
        "db_id": "network_1",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Give the name of the student with the most likes.",
        "instance_id": 1567
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of likes that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "likes",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "Show the names of students who have at least 2 likes.",
        "instance_id": 1568
    },
    {
        "db_id": "network_1",
        "query": "group by likes.student_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "likes.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "likes.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on student id of likes that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "likes",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "Show the names of students who have at least 2 likes.",
        "instance_id": 1569
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from likes join highschooler on likes.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of likes that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "likes",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "What are the names of students who have 2 or more likes?",
        "instance_id": 1570
    },
    {
        "db_id": "network_1",
        "query": "group by likes.student_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "likes.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "likes.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on student id of likes that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "likes",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    6,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "What are the names of students who have 2 or more likes?",
        "instance_id": 1571
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of friend that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "instance_id": 1572
    },
    {
        "db_id": "network_1",
        "query": "where highschooler.grade > 5 ",
        "query_toks": [
            "where",
            "highschooler.grade",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "where",
            "highschooler.grade",
            ">",
            "value"
        ],
        "question": "Keep the records that grade of highschooler is greater than 5",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "grade",
            "of",
            "highschooler",
            "is",
            "greater",
            "than",
            "5"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "instance_id": 1573
    },
    {
        "db_id": "network_1",
        "query": "group by friend.student_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "friend.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "friend.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on student id of friend that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "friend",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "instance_id": 1574
    },
    {
        "db_id": "network_1",
        "query": "select highschooler.name from friend join highschooler on friend.student_id = highschooler.id",
        "query_toks": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "highschooler.name",
            "from",
            "friend",
            "join",
            "highschooler",
            "on",
            "friend.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get name of friend that has highschooler",
        "question_toks": [
            "Get",
            "name",
            "of",
            "friend",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "instance_id": 1575
    },
    {
        "db_id": "network_1",
        "query": "where highschooler.grade > 5 ",
        "query_toks": [
            "where",
            "highschooler.grade",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "where",
            "highschooler.grade",
            ">",
            "value"
        ],
        "question": "Keep the records that grade of highschooler is greater than 5",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "grade",
            "of",
            "highschooler",
            "is",
            "greater",
            "than",
            "5"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "instance_id": 1576
    },
    {
        "db_id": "network_1",
        "query": "group by friend.student_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "friend.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "friend.student_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on student id of friend that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "student",
            "id",
            "of",
            "friend",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    4,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
        "original_question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "instance_id": 1577
    },
    {
        "db_id": "network_1",
        "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get the number of likes that has highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "likes",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "How many likes does Kyle have?",
        "instance_id": 1578
    },
    {
        "db_id": "network_1",
        "query": "where highschooler.name = \"kyle\"",
        "query_toks": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name of highschooler is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "highschooler",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "How many likes does Kyle have?",
        "instance_id": 1579
    },
    {
        "db_id": "network_1",
        "query": "select count ( * ) from likes join highschooler on likes.student_id = highschooler.id",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "likes",
            "join",
            "highschooler",
            "on",
            "likes.student_id",
            "=",
            "highschooler.id"
        ],
        "question": "Get the number of likes that has highschooler",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "likes",
            "that",
            "has",
            "highschooler"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "Return the number of likes that the high schooler named Kyle has.",
        "instance_id": 1580
    },
    {
        "db_id": "network_1",
        "query": "where highschooler.name = \"kyle\"",
        "query_toks": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "query_toks_no_value": [
            "where",
            "highschooler.name",
            "=",
            "\"kyle\""
        ],
        "question": "Keep the records that name of highschooler is \"kyle\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "name",
            "of",
            "highschooler",
            "is",
            "\"kyle\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Kyle\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
        "original_question": "Return the number of likes that the high schooler named Kyle has.",
        "instance_id": 1581
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id",
        "query_toks": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "from",
            "dogs",
            "join",
            "owners",
            "on",
            "dogs.owner_id",
            "=",
            "owners.owner_id"
        ],
        "query_toks_no_value": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "from",
            "dogs",
            "join",
            "owners",
            "on",
            "dogs.owner_id",
            "=",
            "owners.owner_id"
        ],
        "question": "Get owner id and first name and last name of dogs that has owners",
        "question_toks": [
            "Get",
            "owner",
            "id",
            "and",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "dogs",
            "that",
            "has",
            "owners"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "instance_id": 1582
    },
    {
        "db_id": "dog_kennels",
        "query": "group by dogs.owner_id",
        "query_toks": [
            "group",
            "by",
            "dogs.owner_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "dogs.owner_id"
        ],
        "question": "Group the records based on owner id of dogs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "owner",
            "id",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "instance_id": 1583
    },
    {
        "db_id": "dog_kennels",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "instance_id": 1584
    },
    {
        "db_id": "dog_kennels",
        "query": "select dogs.owner_id , owners.first_name , owners.last_name from dogs join owners on dogs.owner_id = owners.owner_id",
        "query_toks": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "from",
            "dogs",
            "join",
            "owners",
            "on",
            "dogs.owner_id",
            "=",
            "owners.owner_id"
        ],
        "query_toks_no_value": [
            "select",
            "dogs.owner_id",
            ",",
            "owners.first_name",
            ",",
            "owners.last_name",
            "from",
            "dogs",
            "join",
            "owners",
            "on",
            "dogs.owner_id",
            "=",
            "owners.owner_id"
        ],
        "question": "Get owner id and first name and last name of dogs that has owners",
        "question_toks": [
            "Get",
            "owner",
            "id",
            "and",
            "first",
            "name",
            "and",
            "last",
            "name",
            "of",
            "dogs",
            "that",
            "has",
            "owners"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "instance_id": 1585
    },
    {
        "db_id": "dog_kennels",
        "query": "group by dogs.owner_id",
        "query_toks": [
            "group",
            "by",
            "dogs.owner_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "dogs.owner_id"
        ],
        "question": "Group the records based on owner id of dogs",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "owner",
            "id",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    21,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "instance_id": 1586
    },
    {
        "db_id": "dog_kennels",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "instance_id": 1587
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id",
        "query_toks": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.role_code",
            ",",
            "professionals.first_name",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id"
        ],
        "query_toks_no_value": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.role_code",
            ",",
            "professionals.first_name",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id"
        ],
        "question": "Get professional id and role code and first name of professionals that has treatments",
        "question_toks": [
            "Get",
            "professional",
            "id",
            "and",
            "role",
            "code",
            "and",
            "first",
            "name",
            "of",
            "professionals",
            "that",
            "has",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "instance_id": 1588
    },
    {
        "db_id": "dog_kennels",
        "query": "group by professionals.professional_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on professional id of professionals that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "professional",
            "id",
            "of",
            "professionals",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    33,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "instance_id": 1589
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.role_code , professionals.first_name from professionals join treatments on professionals.professional_id = treatments.professional_id",
        "query_toks": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.role_code",
            ",",
            "professionals.first_name",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id"
        ],
        "query_toks_no_value": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.role_code",
            ",",
            "professionals.first_name",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id"
        ],
        "question": "Get professional id and role code and first name of professionals that has treatments",
        "question_toks": [
            "Get",
            "professional",
            "id",
            "and",
            "role",
            "code",
            "and",
            "first",
            "name",
            "of",
            "professionals",
            "that",
            "has",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "instance_id": 1590
    },
    {
        "db_id": "dog_kennels",
        "query": "group by professionals.professional_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on professional id of professionals that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "professional",
            "id",
            "of",
            "professionals",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    33,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "instance_id": 1591
    },
    {
        "db_id": "dog_kennels",
        "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code",
        "query_toks": [
            "select",
            "breeds.breed_name",
            "from",
            "breeds",
            "join",
            "dogs",
            "on",
            "breeds.breed_code",
            "=",
            "dogs.breed_code"
        ],
        "query_toks_no_value": [
            "select",
            "breeds.breed_name",
            "from",
            "breeds",
            "join",
            "dogs",
            "on",
            "breeds.breed_code",
            "=",
            "dogs.breed_code"
        ],
        "question": "Get breed name of breeds that has dogs",
        "question_toks": [
            "Get",
            "breed",
            "name",
            "of",
            "breeds",
            "that",
            "has",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the breed with the most dogs?",
        "instance_id": 1592
    },
    {
        "db_id": "dog_kennels",
        "query": "group by breeds.breed_name",
        "query_toks": [
            "group",
            "by",
            "breeds.breed_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "breeds.breed_name"
        ],
        "question": "Group the records based on breed name of breeds",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "breed",
            "name",
            "of",
            "breeds"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the breed with the most dogs?",
        "instance_id": 1593
    },
    {
        "db_id": "dog_kennels",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "What is the name of the breed with the most dogs?",
        "instance_id": 1594
    },
    {
        "db_id": "dog_kennels",
        "query": "select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code",
        "query_toks": [
            "select",
            "breeds.breed_name",
            "from",
            "breeds",
            "join",
            "dogs",
            "on",
            "breeds.breed_code",
            "=",
            "dogs.breed_code"
        ],
        "query_toks_no_value": [
            "select",
            "breeds.breed_name",
            "from",
            "breeds",
            "join",
            "dogs",
            "on",
            "breeds.breed_code",
            "=",
            "dogs.breed_code"
        ],
        "question": "Get breed name of breeds that has dogs",
        "question_toks": [
            "Get",
            "breed",
            "name",
            "of",
            "breeds",
            "that",
            "has",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which breed do the most dogs have? Give me the breed name.",
        "instance_id": 1595
    },
    {
        "db_id": "dog_kennels",
        "query": "group by breeds.breed_name",
        "query_toks": [
            "group",
            "by",
            "breeds.breed_name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "breeds.breed_name"
        ],
        "question": "Group the records based on breed name of breeds",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "breed",
            "name",
            "of",
            "breeds"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which breed do the most dogs have? Give me the breed name.",
        "instance_id": 1596
    },
    {
        "db_id": "dog_kennels",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which breed do the most dogs have? Give me the breed name.",
        "instance_id": 1597
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id",
        "query_toks": [
            "select",
            "owners.owner_id",
            ",",
            "owners.last_name",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments.dog_id"
        ],
        "query_toks_no_value": [
            "select",
            "owners.owner_id",
            ",",
            "owners.last_name",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments.dog_id"
        ],
        "question": "Get owner id and last name of owners that has dogs and treatments",
        "question_toks": [
            "Get",
            "owner",
            "id",
            "and",
            "last",
            "name",
            "of",
            "owners",
            "that",
            "has",
            "dogs",
            "and",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "instance_id": 1598
    },
    {
        "db_id": "dog_kennels",
        "query": "group by owners.owner_id",
        "query_toks": [
            "group",
            "by",
            "owners.owner_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "owners.owner_id"
        ],
        "question": "Group the records based on owner id of owners",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "owner",
            "id",
            "of",
            "owners"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "instance_id": 1599
    },
    {
        "db_id": "dog_kennels",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "instance_id": 1600
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.owner_id , owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id",
        "query_toks": [
            "select",
            "owners.owner_id",
            ",",
            "owners.last_name",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments.dog_id"
        ],
        "query_toks_no_value": [
            "select",
            "owners.owner_id",
            ",",
            "owners.last_name",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments.dog_id"
        ],
        "question": "Get owner id and last name of owners that has dogs and treatments",
        "question_toks": [
            "Get",
            "owner",
            "id",
            "and",
            "last",
            "name",
            "of",
            "owners",
            "that",
            "has",
            "dogs",
            "and",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "instance_id": 1601
    },
    {
        "db_id": "dog_kennels",
        "query": "group by owners.owner_id",
        "query_toks": [
            "group",
            "by",
            "owners.owner_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "owners.owner_id"
        ],
        "question": "Group the records based on owner id of owners",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "owner",
            "id",
            "of",
            "owners"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "instance_id": 1602
    },
    {
        "db_id": "dog_kennels",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "original_question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "instance_id": 1603
    },
    {
        "db_id": "dog_kennels",
        "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code",
        "query_toks": [
            "select",
            "treatment_types.treatment_type_description",
            "from",
            "treatment_types",
            "join",
            "treatments",
            "on",
            "treatment_types.treatment_type_code",
            "=",
            "treatments.treatment_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "treatment_types.treatment_type_description",
            "from",
            "treatment_types",
            "join",
            "treatments",
            "on",
            "treatment_types.treatment_type_code",
            "=",
            "treatments.treatment_type_code"
        ],
        "question": "Get treatment type description of treatment types that has treatments",
        "question_toks": [
            "Get",
            "treatment",
            "type",
            "description",
            "of",
            "treatment",
            "types",
            "that",
            "has",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "original_question": "What is the description of the treatment type that costs the least money in total?",
        "instance_id": 1604
    },
    {
        "db_id": "dog_kennels",
        "query": "group by treatment_types.treatment_type_code",
        "query_toks": [
            "group",
            "by",
            "treatment_types.treatment_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "treatment_types.treatment_type_code"
        ],
        "question": "Group the records based on treatment type code of treatment types",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "treatment",
            "type",
            "code",
            "of",
            "treatment",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "original_question": "What is the description of the treatment type that costs the least money in total?",
        "instance_id": 1605
    },
    {
        "db_id": "dog_kennels",
        "query": "order by sum ( cost_of_treatment ) asc ",
        "query_toks": [
            "order",
            "by",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "asc"
        ],
        "question": "Order these records based on the sum of cost of treatment and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "sum",
            "of",
            "cost",
            "of",
            "treatment",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            49,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "original_question": "What is the description of the treatment type that costs the least money in total?",
        "instance_id": 1606
    },
    {
        "db_id": "dog_kennels",
        "query": "select treatment_types.treatment_type_description from treatment_types join treatments on treatment_types.treatment_type_code = treatments.treatment_type_code",
        "query_toks": [
            "select",
            "treatment_types.treatment_type_description",
            "from",
            "treatment_types",
            "join",
            "treatments",
            "on",
            "treatment_types.treatment_type_code",
            "=",
            "treatments.treatment_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "treatment_types.treatment_type_description",
            "from",
            "treatment_types",
            "join",
            "treatments",
            "on",
            "treatment_types.treatment_type_code",
            "=",
            "treatments.treatment_type_code"
        ],
        "question": "Get treatment type description of treatment types that has treatments",
        "question_toks": [
            "Get",
            "treatment",
            "type",
            "description",
            "of",
            "treatment",
            "types",
            "that",
            "has",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            47,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "original_question": "Give me the description of the treatment type whose total cost is the lowest.",
        "instance_id": 1607
    },
    {
        "db_id": "dog_kennels",
        "query": "group by treatment_types.treatment_type_code",
        "query_toks": [
            "group",
            "by",
            "treatment_types.treatment_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "treatment_types.treatment_type_code"
        ],
        "question": "Group the records based on treatment type code of treatment types",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "treatment",
            "type",
            "code",
            "of",
            "treatment",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    8,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "original_question": "Give me the description of the treatment type whose total cost is the lowest.",
        "instance_id": 1608
    },
    {
        "db_id": "dog_kennels",
        "query": "order by sum ( cost_of_treatment ) asc ",
        "query_toks": [
            "order",
            "by",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "asc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "sum",
            "(",
            "cost_of_treatment",
            ")",
            "asc"
        ],
        "question": "Order these records based on the sum of cost of treatment and sort them in ascending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "sum",
            "of",
            "cost",
            "of",
            "treatment",
            "and",
            "sort",
            "them",
            "in",
            "ascending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            4,
                            49,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
        "original_question": "Give me the description of the treatment type whose total cost is the lowest.",
        "instance_id": 1609
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id",
        "query_toks": [
            "select",
            "owners.owner_id",
            ",",
            "owners.zip_code",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments.dog_id"
        ],
        "query_toks_no_value": [
            "select",
            "owners.owner_id",
            ",",
            "owners.zip_code",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments.dog_id"
        ],
        "question": "Get owner id and zip code of owners that has dogs and treatments",
        "question_toks": [
            "Get",
            "owner",
            "id",
            "and",
            "zip",
            "code",
            "of",
            "owners",
            "that",
            "has",
            "dogs",
            "and",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "original_question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "instance_id": 1610
    },
    {
        "db_id": "dog_kennels",
        "query": "group by owners.owner_id",
        "query_toks": [
            "group",
            "by",
            "owners.owner_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "owners.owner_id"
        ],
        "question": "Group the records based on owner id of owners",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "owner",
            "id",
            "of",
            "owners"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "original_question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "instance_id": 1611
    },
    {
        "db_id": "dog_kennels",
        "query": "order by sum ( treatments.cost_of_treatment ) desc ",
        "query_toks": [
            "order",
            "by",
            "sum",
            "(",
            "treatments.cost_of_treatment",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "sum",
            "(",
            "treatments.cost_of_treatment",
            ")",
            "desc"
        ],
        "question": "Order these records based on the sum of cost of treatment of treatments and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "sum",
            "of",
            "cost",
            "of",
            "treatment",
            "of",
            "treatments",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            49,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "original_question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "instance_id": 1612
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.owner_id , owners.zip_code from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id",
        "query_toks": [
            "select",
            "owners.owner_id",
            ",",
            "owners.zip_code",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments.dog_id"
        ],
        "query_toks_no_value": [
            "select",
            "owners.owner_id",
            ",",
            "owners.zip_code",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id",
            "join",
            "treatments",
            "on",
            "dogs.dog_id",
            "=",
            "treatments.dog_id"
        ],
        "question": "Get owner id and zip code of owners that has dogs and treatments",
        "question_toks": [
            "Get",
            "owner",
            "id",
            "and",
            "zip",
            "code",
            "of",
            "owners",
            "that",
            "has",
            "dogs",
            "and",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "original_question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "instance_id": 1613
    },
    {
        "db_id": "dog_kennels",
        "query": "group by owners.owner_id",
        "query_toks": [
            "group",
            "by",
            "owners.owner_id"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "owners.owner_id"
        ],
        "question": "Group the records based on owner id of owners",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "owner",
            "id",
            "of",
            "owners"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "original_question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "instance_id": 1614
    },
    {
        "db_id": "dog_kennels",
        "query": "order by sum ( treatments.cost_of_treatment ) desc ",
        "query_toks": [
            "order",
            "by",
            "sum",
            "(",
            "treatments.cost_of_treatment",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "sum",
            "(",
            "treatments.cost_of_treatment",
            ")",
            "desc"
        ],
        "question": "Order these records based on the sum of cost of treatment of treatments and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "sum",
            "of",
            "cost",
            "of",
            "treatment",
            "of",
            "treatments",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            4,
                            49,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
        "original_question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "instance_id": 1615
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id",
        "query_toks": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.cell_number",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id"
        ],
        "query_toks_no_value": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.cell_number",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id"
        ],
        "question": "Get professional id and cell number of professionals that has treatments",
        "question_toks": [
            "Get",
            "professional",
            "id",
            "and",
            "cell",
            "number",
            "of",
            "professionals",
            "that",
            "has",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "instance_id": 1616
    },
    {
        "db_id": "dog_kennels",
        "query": "group by professionals.professional_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on professional id of professionals that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "professional",
            "id",
            "of",
            "professionals",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    33,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "instance_id": 1617
    },
    {
        "db_id": "dog_kennels",
        "query": "select professionals.professional_id , professionals.cell_number from professionals join treatments on professionals.professional_id = treatments.professional_id",
        "query_toks": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.cell_number",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id"
        ],
        "query_toks_no_value": [
            "select",
            "professionals.professional_id",
            ",",
            "professionals.cell_number",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id"
        ],
        "question": "Get professional id and cell number of professionals that has treatments",
        "question_toks": [
            "Get",
            "professional",
            "id",
            "and",
            "cell",
            "number",
            "of",
            "professionals",
            "that",
            "has",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "instance_id": 1618
    },
    {
        "db_id": "dog_kennels",
        "query": "group by professionals.professional_id having count ( * ) <= 2",
        "query_toks": [
            "group",
            "by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "2"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "professionals.professional_id",
            "having",
            "count",
            "(",
            "*",
            ")",
            "<=",
            "value"
        ],
        "question": "Group the records based on professional id of professionals that the number is less than or equal to 2",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "professional",
            "id",
            "of",
            "professionals",
            "that",
            "the",
            "number",
            "is",
            "less",
            "than",
            "or",
            "equal",
            "to",
            "2"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    33,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    5,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    2.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
        "original_question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "instance_id": 1619
    },
    {
        "db_id": "dog_kennels",
        "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals",
        "query_toks": [
            "select",
            "treatments.date_of_treatment",
            ",",
            "professionals.first_name",
            "from",
            "treatments",
            "join",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "treatments.date_of_treatment",
            ",",
            "professionals.first_name",
            "from",
            "treatments",
            "join",
            "professionals"
        ],
        "question": "Get date of treatment and first name of treatments that has professionals",
        "question_toks": [
            "Get",
            "date",
            "of",
            "treatment",
            "and",
            "first",
            "name",
            "of",
            "treatments",
            "that",
            "has",
            "professionals"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                48,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "original_question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "instance_id": 1620
    },
    {
        "db_id": "dog_kennels",
        "query": "select treatments.date_of_treatment , professionals.first_name from treatments join professionals",
        "query_toks": [
            "select",
            "treatments.date_of_treatment",
            ",",
            "professionals.first_name",
            "from",
            "treatments",
            "join",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "treatments.date_of_treatment",
            ",",
            "professionals.first_name",
            "from",
            "treatments",
            "join",
            "professionals"
        ],
        "question": "Get date of treatment and first name of treatments that has professionals",
        "question_toks": [
            "Get",
            "date",
            "of",
            "treatment",
            "and",
            "first",
            "name",
            "of",
            "treatments",
            "that",
            "has",
            "professionals"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                46,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            33,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                48,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
        "original_question": "What are the date and the operating professional's first name of each treatment?",
        "instance_id": 1621
    },
    {
        "db_id": "dog_kennels",
        "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types",
        "query_toks": [
            "select",
            "treatments.cost_of_treatment",
            ",",
            "treatment_types.treatment_type_description",
            "from",
            "treatments",
            "join",
            "treatment_types"
        ],
        "query_toks_no_value": [
            "select",
            "treatments.cost_of_treatment",
            ",",
            "treatment_types.treatment_type_description",
            "from",
            "treatments",
            "join",
            "treatment_types"
        ],
        "question": "Get cost of treatment and treatment type description of treatments that has treatment types",
        "question_toks": [
            "Get",
            "cost",
            "of",
            "treatment",
            "and",
            "treatment",
            "type",
            "description",
            "of",
            "treatments",
            "that",
            "has",
            "treatment",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                47,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                49,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "original_question": "List the cost of each treatment and the corresponding treatment type description.",
        "instance_id": 1622
    },
    {
        "db_id": "dog_kennels",
        "query": "select treatments.cost_of_treatment , treatment_types.treatment_type_description from treatments join treatment_types",
        "query_toks": [
            "select",
            "treatments.cost_of_treatment",
            ",",
            "treatment_types.treatment_type_description",
            "from",
            "treatments",
            "join",
            "treatment_types"
        ],
        "query_toks_no_value": [
            "select",
            "treatments.cost_of_treatment",
            ",",
            "treatment_types.treatment_type_description",
            "from",
            "treatments",
            "join",
            "treatment_types"
        ],
        "question": "Get cost of treatment and treatment type description of treatments that has treatment types",
        "question_toks": [
            "Get",
            "cost",
            "of",
            "treatment",
            "and",
            "treatment",
            "type",
            "description",
            "of",
            "treatments",
            "that",
            "has",
            "treatment",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                47,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                49,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "original_question": "What are the cost and treatment type description of each treatment?",
        "instance_id": 1623
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs",
        "query_toks": [
            "select",
            "owners.first_name",
            ",",
            "owners.last_name",
            ",",
            "dogs.size_code",
            "from",
            "owners",
            "join",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "owners.first_name",
            ",",
            "owners.last_name",
            ",",
            "dogs.size_code",
            "from",
            "owners",
            "join",
            "dogs"
        ],
        "question": "Get first name and last name and size code of owners that has dogs",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "last",
            "name",
            "and",
            "size",
            "code",
            "of",
            "owners",
            "that",
            "has",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "original_question": "List each owner's first name, last name, and the size of his for her dog.",
        "instance_id": 1624
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , owners.last_name , dogs.size_code from owners join dogs",
        "query_toks": [
            "select",
            "owners.first_name",
            ",",
            "owners.last_name",
            ",",
            "dogs.size_code",
            "from",
            "owners",
            "join",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "owners.first_name",
            ",",
            "owners.last_name",
            ",",
            "dogs.size_code",
            "from",
            "owners",
            "join",
            "dogs"
        ],
        "question": "Get first name and last name and size code of owners that has dogs",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "last",
            "name",
            "and",
            "size",
            "code",
            "of",
            "owners",
            "that",
            "has",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "original_question": "What are each owner's first name, last name, and the size of their dog?",
        "instance_id": 1625
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , dogs.name from owners join dogs",
        "query_toks": [
            "select",
            "owners.first_name",
            ",",
            "dogs.name",
            "from",
            "owners",
            "join",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "owners.first_name",
            ",",
            "dogs.name",
            "from",
            "owners",
            "join",
            "dogs"
        ],
        "question": "Get first name and name of owners that has dogs",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "name",
            "of",
            "owners",
            "that",
            "has",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "original_question": "List pairs of the owner's first name and the dogs's name.",
        "instance_id": 1626
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , dogs.name from owners join dogs",
        "query_toks": [
            "select",
            "owners.first_name",
            ",",
            "dogs.name",
            "from",
            "owners",
            "join",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "owners.first_name",
            ",",
            "dogs.name",
            "from",
            "owners",
            "join",
            "dogs"
        ],
        "question": "Get first name and name of owners that has dogs",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "name",
            "of",
            "owners",
            "that",
            "has",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
        "original_question": "What are each owner's first name and their dogs's name?",
        "instance_id": 1627
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
        "query_toks": [
            "select",
            "owners.first_name",
            ",",
            "dogs.name",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id"
        ],
        "query_toks_no_value": [
            "select",
            "owners.first_name",
            ",",
            "dogs.name",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id"
        ],
        "question": "Get first name and name of owners that has dogs",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "name",
            "of",
            "owners",
            "that",
            "has",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "original_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "instance_id": 1628
    },
    {
        "db_id": "dog_kennels",
        "query": "where owners.state = \"virginia\"",
        "query_toks": [
            "where",
            "owners.state",
            "=",
            "\"virginia\""
        ],
        "query_toks_no_value": [
            "where",
            "owners.state",
            "=",
            "\"virginia\""
        ],
        "question": "Keep the records that state of owners is \"virginia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "state",
            "of",
            "owners",
            "is",
            "\"virginia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"Virginia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "original_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "instance_id": 1629
    },
    {
        "db_id": "dog_kennels",
        "query": "select owners.first_name , dogs.name from owners join dogs on owners.owner_id = dogs.owner_id",
        "query_toks": [
            "select",
            "owners.first_name",
            ",",
            "dogs.name",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id"
        ],
        "query_toks_no_value": [
            "select",
            "owners.first_name",
            ",",
            "dogs.name",
            "from",
            "owners",
            "join",
            "dogs",
            "on",
            "owners.owner_id",
            "=",
            "dogs.owner_id"
        ],
        "question": "Get first name and name of owners that has dogs",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "name",
            "of",
            "owners",
            "that",
            "has",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ],
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            21,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "original_question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "instance_id": 1630
    },
    {
        "db_id": "dog_kennels",
        "query": "where owners.state = \"virginia\"",
        "query_toks": [
            "where",
            "owners.state",
            "=",
            "\"virginia\""
        ],
        "query_toks_no_value": [
            "where",
            "owners.state",
            "=",
            "\"virginia\""
        ],
        "question": "Keep the records that state of owners is \"virginia\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "state",
            "of",
            "owners",
            "is",
            "\"virginia\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"Virginia\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
        "original_question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "instance_id": 1631
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments",
        "query_toks": [
            "select",
            "distinct",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            "from",
            "dogs",
            "join",
            "treatments"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            "from",
            "dogs",
            "join",
            "treatments"
        ],
        "question": "Get distinct and date arrived and date departed of dogs that has treatments",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "date",
            "arrived",
            "and",
            "date",
            "departed",
            "of",
            "dogs",
            "that",
            "has",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "original_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "instance_id": 1632
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct dogs.date_arrived , dogs.date_departed from dogs join treatments",
        "query_toks": [
            "select",
            "distinct",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            "from",
            "dogs",
            "join",
            "treatments"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "dogs.date_arrived",
            ",",
            "dogs.date_departed",
            "from",
            "dogs",
            "join",
            "treatments"
        ],
        "question": "Get distinct and date arrived and date departed of dogs that has treatments",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "date",
            "arrived",
            "and",
            "date",
            "departed",
            "of",
            "dogs",
            "that",
            "has",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ],
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            45,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
        "original_question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "instance_id": 1633
    },
    {
        "db_id": "dog_kennels",
        "query": "select email_address from professionals",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            "from",
            "professionals"
        ],
        "question": "Get email address of professionals",
        "question_toks": [
            "Get",
            "email",
            "address",
            "of",
            "professionals"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "original_question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "instance_id": 1634
    },
    {
        "db_id": "dog_kennels",
        "query": "where state = \"hawaii\" or state = \"wisconsin\"",
        "query_toks": [
            "where",
            "state",
            "=",
            "\"hawaii\"",
            "or",
            "state",
            "=",
            "\"wisconsin\""
        ],
        "query_toks_no_value": [
            "where",
            "state",
            "=",
            "\"hawaii\"",
            "or",
            "state",
            "=",
            "\"wisconsin\""
        ],
        "question": "Keep the records that state is \"hawaii\" or state is \"wisconsin\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "state",
            "is",
            "\"hawaii\"",
            "or",
            "state",
            "is",
            "\"wisconsin\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"Hawaii\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"Wisconsin\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "original_question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "instance_id": 1635
    },
    {
        "db_id": "dog_kennels",
        "query": "select email_address from professionals",
        "query_toks": [
            "select",
            "email_address",
            "from",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            "from",
            "professionals"
        ],
        "question": "Get email address of professionals",
        "question_toks": [
            "Get",
            "email",
            "address",
            "of",
            "professionals"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "original_question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "instance_id": 1636
    },
    {
        "db_id": "dog_kennels",
        "query": "where state = \"hawaii\" or state = \"wisconsin\"",
        "query_toks": [
            "where",
            "state",
            "=",
            "\"hawaii\"",
            "or",
            "state",
            "=",
            "\"wisconsin\""
        ],
        "query_toks_no_value": [
            "where",
            "state",
            "=",
            "\"hawaii\"",
            "or",
            "state",
            "=",
            "\"wisconsin\""
        ],
        "question": "Keep the records that state is \"hawaii\" or state is \"wisconsin\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "state",
            "is",
            "\"hawaii\"",
            "or",
            "state",
            "is",
            "\"wisconsin\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"Hawaii\"",
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            38,
                            false
                        ],
                        null
                    ],
                    "\"Wisconsin\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
        "original_question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "instance_id": 1637
    },
    {
        "db_id": "dog_kennels",
        "query": "select date_arrived , date_departed from dogs",
        "query_toks": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "question": "Get date arrived and date departed of dogs",
        "question_toks": [
            "Get",
            "date",
            "arrived",
            "and",
            "date",
            "departed",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
        "original_question": "What are the arriving date and the departing date of all the dogs?",
        "instance_id": 1638
    },
    {
        "db_id": "dog_kennels",
        "query": "select date_arrived , date_departed from dogs",
        "query_toks": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "question": "Get date arrived and date departed of dogs",
        "question_toks": [
            "Get",
            "date",
            "arrived",
            "and",
            "date",
            "departed",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT date_arrived ,  date_departed FROM Dogs",
        "original_question": "List the arrival date and the departure date for all the dogs.",
        "instance_id": 1639
    },
    {
        "db_id": "dog_kennels",
        "query": "select count ( distinct dog_id ) from treatments",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "dog_id",
            ")",
            "from",
            "treatments"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "dog_id",
            ")",
            "from",
            "treatments"
        ],
        "question": "Get the number of distinct dog id of treatments",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "dog",
            "id",
            "of",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                45,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "original_question": "How many dogs went through any treatments?",
        "instance_id": 1640
    },
    {
        "db_id": "dog_kennels",
        "query": "select count ( distinct dog_id ) from treatments",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "dog_id",
            ")",
            "from",
            "treatments"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "dog_id",
            ")",
            "from",
            "treatments"
        ],
        "question": "Get the number of distinct dog id of treatments",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "dog",
            "id",
            "of",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                45,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "original_question": "Count the number of dogs that went through a treatment.",
        "instance_id": 1641
    },
    {
        "db_id": "dog_kennels",
        "query": "select count ( distinct professional_id ) from treatments",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "treatments"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "treatments"
        ],
        "question": "Get the number of distinct professional id of treatments",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "professional",
            "id",
            "of",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                46,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "original_question": "How many professionals have performed any treatment to dogs?",
        "instance_id": 1642
    },
    {
        "db_id": "dog_kennels",
        "query": "select count ( distinct professional_id ) from treatments",
        "query_toks": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "treatments"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "professional_id",
            ")",
            "from",
            "treatments"
        ],
        "question": "Get the number of distinct professional id of treatments",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "distinct",
            "professional",
            "id",
            "of",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                46,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "original_question": "Find the number of professionals who have ever treated dogs.",
        "instance_id": 1643
    },
    {
        "db_id": "dog_kennels",
        "query": "select role_code , street , city , state from professionals",
        "query_toks": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals"
        ],
        "question": "Get role code and street and city and state of professionals",
        "question_toks": [
            "Get",
            "role",
            "code",
            "and",
            "street",
            "and",
            "city",
            "and",
            "state",
            "of",
            "professionals"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "original_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "instance_id": 1644
    },
    {
        "db_id": "dog_kennels",
        "query": "where city like \"% west %\"",
        "query_toks": [
            "where",
            "city",
            "like",
            "\"%",
            "west",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "city",
            "like",
            "\"%",
            "west",
            "%\""
        ],
        "question": "Keep the records that city is in the form of \"% west %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "west",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "original_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "instance_id": 1645
    },
    {
        "db_id": "dog_kennels",
        "query": "select role_code , street , city , state from professionals",
        "query_toks": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals"
        ],
        "question": "Get role code and street and city and state of professionals",
        "question_toks": [
            "Get",
            "role",
            "code",
            "and",
            "street",
            "and",
            "city",
            "and",
            "state",
            "of",
            "professionals"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "original_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "instance_id": 1646
    },
    {
        "db_id": "dog_kennels",
        "query": "where city like \"% west %\"",
        "query_toks": [
            "where",
            "city",
            "like",
            "\"%",
            "west",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "city",
            "like",
            "\"%",
            "west",
            "%\""
        ],
        "question": "Keep the records that city is in the form of \"% west %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "city",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "west",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
        "original_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "instance_id": 1647
    },
    {
        "db_id": "dog_kennels",
        "query": "select first_name , last_name , email_address from owners",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners"
        ],
        "question": "Get first name and last name and email address of owners",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "last",
            "name",
            "and",
            "email",
            "address",
            "of",
            "owners"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "original_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "instance_id": 1648
    },
    {
        "db_id": "dog_kennels",
        "query": "where state like \"% north %\"",
        "query_toks": [
            "where",
            "state",
            "like",
            "\"%",
            "north",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "state",
            "like",
            "\"%",
            "north",
            "%\""
        ],
        "question": "Keep the records that state is in the form of \"% north %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "state",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "north",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%North%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "original_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "instance_id": 1649
    },
    {
        "db_id": "dog_kennels",
        "query": "select first_name , last_name , email_address from owners",
        "query_toks": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners"
        ],
        "question": "Get first name and last name and email address of owners",
        "question_toks": [
            "Get",
            "first",
            "name",
            "and",
            "last",
            "name",
            "and",
            "email",
            "address",
            "of",
            "owners"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "original_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "instance_id": 1650
    },
    {
        "db_id": "dog_kennels",
        "query": "where state like \"% north %\"",
        "query_toks": [
            "where",
            "state",
            "like",
            "\"%",
            "north",
            "%\""
        ],
        "query_toks_no_value": [
            "where",
            "state",
            "like",
            "\"%",
            "north",
            "%\""
        ],
        "question": "Keep the records that state is in the form of \"% north %\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "state",
            "is",
            "in",
            "the",
            "form",
            "of",
            "\"%",
            "north",
            "%\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%North%\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "original_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "instance_id": 1651
    },
    {
        "db_id": "dog_kennels",
        "query": "select cost_of_treatment from treatments",
        "query_toks": [
            "select",
            "cost_of_treatment",
            "from",
            "treatments"
        ],
        "query_toks_no_value": [
            "select",
            "cost_of_treatment",
            "from",
            "treatments"
        ],
        "question": "Get cost of treatment of treatments",
        "question_toks": [
            "Get",
            "cost",
            "of",
            "treatment",
            "of",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                49,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "original_question": "How much does the most recent treatment cost?",
        "instance_id": 1652
    },
    {
        "db_id": "dog_kennels",
        "query": "order by date_of_treatment desc ",
        "query_toks": [
            "order",
            "by",
            "date_of_treatment",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "date_of_treatment",
            "desc"
        ],
        "question": "Order these records based on date of treatment and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "date",
            "of",
            "treatment",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            48,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "original_question": "How much does the most recent treatment cost?",
        "instance_id": 1653
    },
    {
        "db_id": "dog_kennels",
        "query": "select cost_of_treatment from treatments",
        "query_toks": [
            "select",
            "cost_of_treatment",
            "from",
            "treatments"
        ],
        "query_toks_no_value": [
            "select",
            "cost_of_treatment",
            "from",
            "treatments"
        ],
        "question": "Get cost of treatment of treatments",
        "question_toks": [
            "Get",
            "cost",
            "of",
            "treatment",
            "of",
            "treatments"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        7
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                49,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "original_question": "Show me the cost of the most recently performed treatment.",
        "instance_id": 1654
    },
    {
        "db_id": "dog_kennels",
        "query": "order by date_of_treatment desc ",
        "query_toks": [
            "order",
            "by",
            "date_of_treatment",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "date_of_treatment",
            "desc"
        ],
        "question": "Order these records based on date of treatment and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "date",
            "of",
            "treatment",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            48,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "original_question": "Show me the cost of the most recently performed treatment.",
        "instance_id": 1655
    },
    {
        "db_id": "dog_kennels",
        "query": "select name , age , weight from dogs",
        "query_toks": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs"
        ],
        "question": "Get name and age and weight of dogs",
        "question_toks": [
            "Get",
            "name",
            "and",
            "age",
            "and",
            "weight",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "original_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "instance_id": 1656
    },
    {
        "db_id": "dog_kennels",
        "query": "where abandoned_yn = 1",
        "query_toks": [
            "where",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "Keep the records that abandoned yn is 1",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "abandoned",
            "yn",
            "is",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "original_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "instance_id": 1657
    },
    {
        "db_id": "dog_kennels",
        "query": "select name , age , weight from dogs",
        "query_toks": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs"
        ],
        "question": "Get name and age and weight of dogs",
        "question_toks": [
            "Get",
            "name",
            "and",
            "age",
            "and",
            "weight",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "original_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "instance_id": 1658
    },
    {
        "db_id": "dog_kennels",
        "query": "where abandoned_yn = 1",
        "query_toks": [
            "where",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "Keep the records that abandoned yn is 1",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "abandoned",
            "yn",
            "is",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
        "original_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "instance_id": 1659
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg ( age ) from dogs",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "question": "Get the average value of age of dogs",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "age",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(age) FROM Dogs",
        "original_question": "What is the average age of all the dogs?",
        "instance_id": 1660
    },
    {
        "db_id": "dog_kennels",
        "query": "select avg ( age ) from dogs",
        "query_toks": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "question": "Get the average value of age of dogs",
        "question_toks": [
            "Get",
            "the",
            "average",
            "value",
            "of",
            "age",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT avg(age) FROM Dogs",
        "original_question": "Compute the average age of all the dogs.",
        "instance_id": 1661
    },
    {
        "db_id": "dog_kennels",
        "query": "select max ( age ) from dogs",
        "query_toks": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "question": "Get the maximum value of age of dogs",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "age",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(age) FROM Dogs",
        "original_question": "What is the age of the oldest dog?",
        "instance_id": 1662
    },
    {
        "db_id": "dog_kennels",
        "query": "select max ( age ) from dogs",
        "query_toks": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "age",
            ")",
            "from",
            "dogs"
        ],
        "question": "Get the maximum value of age of dogs",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "age",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(age) FROM Dogs",
        "original_question": "Tell me the age of the oldest dog.",
        "instance_id": 1663
    },
    {
        "db_id": "dog_kennels",
        "query": "select charge_type , charge_amount from charges",
        "query_toks": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "query_toks_no_value": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "question": "Get charge type and charge amount of charges",
        "question_toks": [
            "Get",
            "charge",
            "type",
            "and",
            "charge",
            "amount",
            "of",
            "charges"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "original_question": "How much does each charge type costs? List both charge type and amount.",
        "instance_id": 1664
    },
    {
        "db_id": "dog_kennels",
        "query": "select charge_type , charge_amount from charges",
        "query_toks": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "query_toks_no_value": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "question": "Get charge type and charge amount of charges",
        "question_toks": [
            "Get",
            "charge",
            "type",
            "and",
            "charge",
            "amount",
            "of",
            "charges"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "original_question": "List each charge type and its amount.",
        "instance_id": 1665
    },
    {
        "db_id": "dog_kennels",
        "query": "select max ( charge_amount ) from charges",
        "query_toks": [
            "select",
            "max",
            "(",
            "charge_amount",
            ")",
            "from",
            "charges"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "charge_amount",
            ")",
            "from",
            "charges"
        ],
        "question": "Get the maximum value of charge amount of charges",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "charge",
            "amount",
            "of",
            "charges"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(charge_amount) FROM Charges",
        "original_question": "How much does the most expensive charge type costs?",
        "instance_id": 1666
    },
    {
        "db_id": "dog_kennels",
        "query": "select max ( charge_amount ) from charges",
        "query_toks": [
            "select",
            "max",
            "(",
            "charge_amount",
            ")",
            "from",
            "charges"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "charge_amount",
            ")",
            "from",
            "charges"
        ],
        "question": "Get the maximum value of charge amount of charges",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "charge",
            "amount",
            "of",
            "charges"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT max(charge_amount) FROM Charges",
        "original_question": "What is the charge amount of the most expensive charge type?",
        "instance_id": 1667
    },
    {
        "db_id": "dog_kennels",
        "query": "select email_address , cell_number , home_phone from professionals",
        "query_toks": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "Get email address and cell number and home phone of professionals",
        "question_toks": [
            "Get",
            "email",
            "address",
            "and",
            "cell",
            "number",
            "and",
            "home",
            "phone",
            "of",
            "professionals"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "original_question": "List the email, cell phone and home phone of all the professionals.",
        "instance_id": 1668
    },
    {
        "db_id": "dog_kennels",
        "query": "select email_address , cell_number , home_phone from professionals",
        "query_toks": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "Get email address and cell number and home phone of professionals",
        "question_toks": [
            "Get",
            "email",
            "address",
            "and",
            "cell",
            "number",
            "and",
            "home",
            "phone",
            "of",
            "professionals"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
        "original_question": "What are the email, cell phone and home phone of each professional?",
        "instance_id": 1669
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct breed_code , size_code from dogs",
        "query_toks": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "question": "Get distinct and breed code and size code of dogs",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "breed",
            "code",
            "and",
            "size",
            "code",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "original_question": "What are all the possible breed type and size type combinations?",
        "instance_id": 1670
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct breed_code , size_code from dogs",
        "query_toks": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "question": "Get distinct and breed code and size code of dogs",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "breed",
            "code",
            "and",
            "size",
            "code",
            "of",
            "dogs"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ],
                "conds": []
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
        "original_question": "Find the distinct breed type and size type combinations for dogs.",
        "instance_id": 1671
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types",
        "query_toks": [
            "select",
            "distinct",
            "professionals.first_name",
            ",",
            "treatment_types.treatment_type_description",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id",
            "join",
            "treatment_types"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "professionals.first_name",
            ",",
            "treatment_types.treatment_type_description",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id",
            "join",
            "treatment_types"
        ],
        "question": "Get distinct and first name and treatment type description of professionals that has treatments and treatment types",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "first",
            "name",
            "and",
            "treatment",
            "type",
            "description",
            "of",
            "professionals",
            "that",
            "has",
            "treatments",
            "and",
            "treatment",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                47,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "original_question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "instance_id": 1672
    },
    {
        "db_id": "dog_kennels",
        "query": "select distinct professionals.first_name , treatment_types.treatment_type_description from professionals join treatments on professionals.professional_id = treatments.professional_id join treatment_types",
        "query_toks": [
            "select",
            "distinct",
            "professionals.first_name",
            ",",
            "treatment_types.treatment_type_description",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id",
            "join",
            "treatment_types"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "professionals.first_name",
            ",",
            "treatment_types.treatment_type_description",
            "from",
            "professionals",
            "join",
            "treatments",
            "on",
            "professionals.professional_id",
            "=",
            "treatments.professional_id",
            "join",
            "treatment_types"
        ],
        "question": "Get distinct and first name and treatment type description of professionals that has treatments and treatment types",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "first",
            "name",
            "and",
            "treatment",
            "type",
            "description",
            "of",
            "professionals",
            "that",
            "has",
            "treatments",
            "and",
            "treatment",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        6
                    ],
                    [
                        "table_unit",
                        7
                    ],
                    [
                        "table_unit",
                        3
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                33,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            46,
                            false
                        ],
                        null
                    ],
                    "and",
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                47,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
        "original_question": "What are each professional's first name and description of the treatment they have performed?",
        "instance_id": 1673
    },
    {
        "db_id": "singer",
        "query": "select count ( * ) from singer",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the number of singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM singer",
        "original_question": "How many singers are there?",
        "instance_id": 1674
    },
    {
        "db_id": "singer",
        "query": "select count ( * ) from singer",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the number of singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM singer",
        "original_question": "What is the count of singers?",
        "instance_id": 1675
    },
    {
        "db_id": "singer",
        "query": "select name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "question": "Get name of singer",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "original_question": "List the name of singers in ascending order of net worth.",
        "instance_id": 1676
    },
    {
        "db_id": "singer",
        "query": "order by net_worth_millions ",
        "query_toks": [
            "order",
            "by",
            "net_worth_millions"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "net_worth_millions"
        ],
        "question": "Order these records based on net worth millions",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "net",
            "worth",
            "millions"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "original_question": "List the name of singers in ascending order of net worth.",
        "instance_id": 1677
    },
    {
        "db_id": "singer",
        "query": "select name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "question": "Get name of singer",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "original_question": "What are the names of singers ordered by ascending net worth?",
        "instance_id": 1678
    },
    {
        "db_id": "singer",
        "query": "order by net_worth_millions ",
        "query_toks": [
            "order",
            "by",
            "net_worth_millions"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "net_worth_millions"
        ],
        "question": "Order these records based on net worth millions",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "net",
            "worth",
            "millions"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "original_question": "What are the names of singers ordered by ascending net worth?",
        "instance_id": 1679
    },
    {
        "db_id": "singer",
        "query": "select birth_year , citizenship from singer",
        "query_toks": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "Get birth year and citizenship of singer",
        "question_toks": [
            "Get",
            "birth",
            "year",
            "and",
            "citizenship",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
        "original_question": "What are the birth year and citizenship of singers?",
        "instance_id": 1680
    },
    {
        "db_id": "singer",
        "query": "select birth_year , citizenship from singer",
        "query_toks": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "Get birth year and citizenship of singer",
        "question_toks": [
            "Get",
            "birth",
            "year",
            "and",
            "citizenship",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Birth_Year ,  Citizenship FROM singer",
        "original_question": "What are the birth years and citizenships of the singers?",
        "instance_id": 1681
    },
    {
        "db_id": "singer",
        "query": "select name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "question": "Get name of singer",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "original_question": "List the name of singers whose citizenship is not \"France\".",
        "instance_id": 1682
    },
    {
        "db_id": "singer",
        "query": "where citizenship != \"france\"",
        "query_toks": [
            "where",
            "citizenship",
            "!=",
            "\"france\""
        ],
        "query_toks_no_value": [
            "where",
            "citizenship",
            "!=",
            "\"france\""
        ],
        "question": "Keep the records that citizenship is not \"france\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "citizenship",
            "is",
            "not",
            "\"france\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"France\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "original_question": "List the name of singers whose citizenship is not \"France\".",
        "instance_id": 1683
    },
    {
        "db_id": "singer",
        "query": "select name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "question": "Get name of singer",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "original_question": "What are the names of the singers who are not French citizens?",
        "instance_id": 1684
    },
    {
        "db_id": "singer",
        "query": "where citizenship != \"france\"",
        "query_toks": [
            "where",
            "citizenship",
            "!=",
            "\"france\""
        ],
        "query_toks_no_value": [
            "where",
            "citizenship",
            "!=",
            "\"france\""
        ],
        "question": "Keep the records that citizenship is not \"france\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "citizenship",
            "is",
            "not",
            "\"france\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ],
                    "\"France\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "original_question": "What are the names of the singers who are not French citizens?",
        "instance_id": 1685
    },
    {
        "db_id": "singer",
        "query": "select name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "question": "Get name of singer",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "original_question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "instance_id": 1686
    },
    {
        "db_id": "singer",
        "query": "where birth_year = 1948 or birth_year = 1949",
        "query_toks": [
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949"
        ],
        "query_toks_no_value": [
            "where",
            "birth_year",
            "=",
            "value",
            "or",
            "birth_year",
            "=",
            "value"
        ],
        "question": "Keep the records that birth year is 1948 or birth year is 1949",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "birth",
            "year",
            "is",
            "1948",
            "or",
            "birth",
            "year",
            "is",
            "1949"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    1948.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    1949.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "original_question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "instance_id": 1687
    },
    {
        "db_id": "singer",
        "query": "select name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "question": "Get name of singer",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "original_question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "instance_id": 1688
    },
    {
        "db_id": "singer",
        "query": "where birth_year = 1948 or birth_year = 1949",
        "query_toks": [
            "where",
            "birth_year",
            "=",
            "1948",
            "or",
            "birth_year",
            "=",
            "1949"
        ],
        "query_toks_no_value": [
            "where",
            "birth_year",
            "=",
            "value",
            "or",
            "birth_year",
            "=",
            "value"
        ],
        "question": "Keep the records that birth year is 1948 or birth year is 1949",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "birth",
            "year",
            "is",
            "1948",
            "or",
            "birth",
            "year",
            "is",
            "1949"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    1948.0,
                    null
                ],
                "or",
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ],
                    1949.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
        "original_question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "instance_id": 1689
    },
    {
        "db_id": "singer",
        "query": "select name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "question": "Get name of singer",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "original_question": "What is the name of the singer with the largest net worth?",
        "instance_id": 1690
    },
    {
        "db_id": "singer",
        "query": "order by net_worth_millions desc ",
        "query_toks": [
            "order",
            "by",
            "net_worth_millions",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "net_worth_millions",
            "desc"
        ],
        "question": "Order these records based on net worth millions and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "net",
            "worth",
            "millions",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "original_question": "What is the name of the singer with the largest net worth?",
        "instance_id": 1691
    },
    {
        "db_id": "singer",
        "query": "select name from singer",
        "query_toks": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            "from",
            "singer"
        ],
        "question": "Get name of singer",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "original_question": "What is the name of the singer who is worth the most?",
        "instance_id": 1692
    },
    {
        "db_id": "singer",
        "query": "order by net_worth_millions desc ",
        "query_toks": [
            "order",
            "by",
            "net_worth_millions",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "net_worth_millions",
            "desc"
        ],
        "question": "Order these records based on net worth millions and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "net",
            "worth",
            "millions",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "original_question": "What is the name of the singer who is worth the most?",
        "instance_id": 1693
    },
    {
        "db_id": "singer",
        "query": "select citizenship , count ( * ) from singer",
        "query_toks": [
            "select",
            "citizenship",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the number and citizenship of singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "citizenship",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "original_question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "instance_id": 1694
    },
    {
        "db_id": "singer",
        "query": "group by citizenship",
        "query_toks": [
            "group",
            "by",
            "citizenship"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "citizenship"
        ],
        "question": "Group the records based on citizenship",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "citizenship"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "original_question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "instance_id": 1695
    },
    {
        "db_id": "singer",
        "query": "select citizenship , count ( * ) from singer",
        "query_toks": [
            "select",
            "citizenship",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "count",
            "(",
            "*",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the number and citizenship of singer",
        "question_toks": [
            "Get",
            "the",
            "number",
            "and",
            "citizenship",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "original_question": "For each citizenship, how many singers are from that country?",
        "instance_id": 1696
    },
    {
        "db_id": "singer",
        "query": "group by citizenship",
        "query_toks": [
            "group",
            "by",
            "citizenship"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "citizenship"
        ],
        "question": "Group the records based on citizenship",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "citizenship"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
        "original_question": "For each citizenship, how many singers are from that country?",
        "instance_id": 1697
    },
    {
        "db_id": "singer",
        "query": "select citizenship from singer",
        "query_toks": [
            "select",
            "citizenship",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "Get citizenship of singer",
        "question_toks": [
            "Get",
            "citizenship",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Please show the most common citizenship of singers.",
        "instance_id": 1698
    },
    {
        "db_id": "singer",
        "query": "group by citizenship",
        "query_toks": [
            "group",
            "by",
            "citizenship"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "citizenship"
        ],
        "question": "Group the records based on citizenship",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "citizenship"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Please show the most common citizenship of singers.",
        "instance_id": 1699
    },
    {
        "db_id": "singer",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "original_question": "Please show the most common citizenship of singers.",
        "instance_id": 1700
    },
    {
        "db_id": "singer",
        "query": "select citizenship from singer",
        "query_toks": [
            "select",
            "citizenship",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "Get citizenship of singer",
        "question_toks": [
            "Get",
            "citizenship",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "original_question": "What is the most common singer citizenship ?",
        "instance_id": 1701
    },
    {
        "db_id": "singer",
        "query": "group by citizenship",
        "query_toks": [
            "group",
            "by",
            "citizenship"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "citizenship"
        ],
        "question": "Group the records based on citizenship",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "citizenship"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "original_question": "What is the most common singer citizenship ?",
        "instance_id": 1702
    },
    {
        "db_id": "singer",
        "query": "order by count ( * ) desc ",
        "query_toks": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "query_toks_no_value": [
            "order",
            "by",
            "count",
            "(",
            "*",
            ")",
            "desc"
        ],
        "question": "Order these records based on the number and sort them in descending order, and return the top 1 record",
        "question_toks": [
            "Order",
            "these",
            "records",
            "based",
            "on",
            "the",
            "number",
            "and",
            "sort",
            "them",
            "in",
            "descending",
            "order,",
            "and",
            "return",
            "the",
            "top",
            "1",
            "record"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "limit": 1,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1",
        "original_question": "What is the most common singer citizenship ?",
        "instance_id": 1703
    },
    {
        "db_id": "singer",
        "query": "select citizenship , max ( net_worth_millions ) from singer",
        "query_toks": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the maximum value of net worth millions and citizenship of singer",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "net",
            "worth",
            "millions",
            "and",
            "citizenship",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "original_question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "instance_id": 1704
    },
    {
        "db_id": "singer",
        "query": "group by citizenship",
        "query_toks": [
            "group",
            "by",
            "citizenship"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "citizenship"
        ],
        "question": "Group the records based on citizenship",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "citizenship"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "original_question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "instance_id": 1705
    },
    {
        "db_id": "singer",
        "query": "select citizenship , max ( net_worth_millions ) from singer",
        "query_toks": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer"
        ],
        "question": "Get the maximum value of net worth millions and citizenship of singer",
        "question_toks": [
            "Get",
            "the",
            "maximum",
            "value",
            "of",
            "net",
            "worth",
            "millions",
            "and",
            "citizenship",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "original_question": "For each citizenship, what is the maximum net worth?",
        "instance_id": 1706
    },
    {
        "db_id": "singer",
        "query": "group by citizenship",
        "query_toks": [
            "group",
            "by",
            "citizenship"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "citizenship"
        ],
        "question": "Group the records based on citizenship",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "citizenship"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "original_question": "For each citizenship, what is the maximum net worth?",
        "instance_id": 1707
    },
    {
        "db_id": "singer",
        "query": "select song.title , singer.name from singer join song",
        "query_toks": [
            "select",
            "song.title",
            ",",
            "singer.name",
            "from",
            "singer",
            "join",
            "song"
        ],
        "query_toks_no_value": [
            "select",
            "song.title",
            ",",
            "singer.name",
            "from",
            "singer",
            "join",
            "song"
        ],
        "question": "Get title and name of singer that has song",
        "question_toks": [
            "Get",
            "title",
            "and",
            "name",
            "of",
            "singer",
            "that",
            "has",
            "song"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "original_question": "Show titles of songs and names of singers.",
        "instance_id": 1708
    },
    {
        "db_id": "singer",
        "query": "select song.title , singer.name from singer join song",
        "query_toks": [
            "select",
            "song.title",
            ",",
            "singer.name",
            "from",
            "singer",
            "join",
            "song"
        ],
        "query_toks_no_value": [
            "select",
            "song.title",
            ",",
            "singer.name",
            "from",
            "singer",
            "join",
            "song"
        ],
        "question": "Get title and name of singer that has song",
        "question_toks": [
            "Get",
            "title",
            "and",
            "name",
            "of",
            "singer",
            "that",
            "has",
            "song"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
        "original_question": "What are the song titles and singer names?",
        "instance_id": 1709
    },
    {
        "db_id": "singer",
        "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id",
        "query_toks": [
            "select",
            "distinct",
            "singer.name",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "singer.name",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "question": "Get distinct and name of singer that has song",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "name",
            "of",
            "singer",
            "that",
            "has",
            "song"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "original_question": "Show distinct names of singers that have songs with sales more than 300000.",
        "instance_id": 1710
    },
    {
        "db_id": "singer",
        "query": "where song.sales > 300000",
        "query_toks": [
            "where",
            "song.sales",
            ">",
            "300000"
        ],
        "query_toks_no_value": [
            "where",
            "song.sales",
            ">",
            "value"
        ],
        "question": "Keep the records that sales of song is greater than 300000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sales",
            "of",
            "song",
            "is",
            "greater",
            "than",
            "300000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    300000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "original_question": "Show distinct names of singers that have songs with sales more than 300000.",
        "instance_id": 1711
    },
    {
        "db_id": "singer",
        "query": "select distinct singer.name from singer join song on singer.singer_id = song.singer_id",
        "query_toks": [
            "select",
            "distinct",
            "singer.name",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "singer.name",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "question": "Get distinct and name of singer that has song",
        "question_toks": [
            "Get",
            "distinct",
            "and",
            "name",
            "of",
            "singer",
            "that",
            "has",
            "song"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "original_question": "what are the different names of the singers that have sales more than 300000?",
        "instance_id": 1712
    },
    {
        "db_id": "singer",
        "query": "where song.sales > 300000",
        "query_toks": [
            "where",
            "song.sales",
            ">",
            "300000"
        ],
        "query_toks_no_value": [
            "where",
            "song.sales",
            ">",
            "value"
        ],
        "question": "Keep the records that sales of song is greater than 300000",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "sales",
            "of",
            "song",
            "is",
            "greater",
            "than",
            "300000"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    300000.0,
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
        "original_question": "what are the different names of the singers that have sales more than 300000?",
        "instance_id": 1713
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer join song on singer.singer_id = song.singer_id",
        "query_toks": [
            "select",
            "singer.name",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "question": "Get name of singer that has song",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer",
            "that",
            "has",
            "song"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "original_question": "Show the names of singers that have more than one song.",
        "instance_id": 1714
    },
    {
        "db_id": "singer",
        "query": "group by singer.name having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "singer.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "singer.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on name of singer that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "singer",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "original_question": "Show the names of singers that have more than one song.",
        "instance_id": 1715
    },
    {
        "db_id": "singer",
        "query": "select singer.name from singer join song on singer.singer_id = song.singer_id",
        "query_toks": [
            "select",
            "singer.name",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "question": "Get name of singer that has song",
        "question_toks": [
            "Get",
            "name",
            "of",
            "singer",
            "that",
            "has",
            "song"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "original_question": "What are the names of the singers that have more than one songs?",
        "instance_id": 1716
    },
    {
        "db_id": "singer",
        "query": "group by singer.name having count ( * ) > 1",
        "query_toks": [
            "group",
            "by",
            "singer.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "1"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "singer.name",
            "having",
            "count",
            "(",
            "*",
            ")",
            ">",
            "value"
        ],
        "question": "Group the records based on name of singer that the number is greater than 1",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "singer",
            "that",
            "the",
            "number",
            "is",
            "greater",
            "than",
            "1"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            3,
                            0,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
        "original_question": "What are the names of the singers that have more than one songs?",
        "instance_id": 1717
    },
    {
        "db_id": "singer",
        "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id",
        "query_toks": [
            "select",
            "singer.name",
            ",",
            "sum",
            "(",
            "song.sales",
            ")",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name",
            ",",
            "sum",
            "(",
            "song.sales",
            ")",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "question": "Get the sum of sales and name and sum of singer that has song",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "sales",
            "and",
            "name",
            "and",
            "sum",
            "of",
            "singer",
            "that",
            "has",
            "song"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "original_question": "Show the names of singers and the total sales of their songs.",
        "instance_id": 1718
    },
    {
        "db_id": "singer",
        "query": "group by singer.name",
        "query_toks": [
            "group",
            "by",
            "singer.name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "singer.name"
        ],
        "question": "Group the records based on name of singer",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "original_question": "Show the names of singers and the total sales of their songs.",
        "instance_id": 1719
    },
    {
        "db_id": "singer",
        "query": "select singer.name , sum ( song.sales ) from singer join song on singer.singer_id = song.singer_id",
        "query_toks": [
            "select",
            "singer.name",
            ",",
            "sum",
            "(",
            "song.sales",
            ")",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "query_toks_no_value": [
            "select",
            "singer.name",
            ",",
            "sum",
            "(",
            "song.sales",
            ")",
            "from",
            "singer",
            "join",
            "song",
            "on",
            "singer.singer_id",
            "=",
            "song.singer_id"
        ],
        "question": "Get the sum of sales and name and sum of singer that has song",
        "question_toks": [
            "Get",
            "the",
            "sum",
            "of",
            "sales",
            "and",
            "name",
            "and",
            "sum",
            "of",
            "singer",
            "that",
            "has",
            "song"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        0
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                1,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "original_question": "For each singer name, what is the total sales for their songs?",
        "instance_id": 1720
    },
    {
        "db_id": "singer",
        "query": "group by singer.name",
        "query_toks": [
            "group",
            "by",
            "singer.name"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "singer.name"
        ],
        "question": "Group the records based on name of singer",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "name",
            "of",
            "singer"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    2,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
        "original_question": "For each singer name, what is the total sales for their songs?",
        "instance_id": 1721
    },
    {
        "db_id": "real_estate_properties",
        "query": "select count ( * ) from other_available_features",
        "query_toks": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "other_available_features"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "*",
            ")",
            "from",
            "other_available_features"
        ],
        "question": "Get the number of other available features",
        "question_toks": [
            "Get",
            "the",
            "number",
            "of",
            "other",
            "available",
            "features"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ],
                "conds": []
            },
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                0,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT count(*) FROM Other_Available_Features",
        "original_question": "How many available features are there in total?",
        "instance_id": 1722
    },
    {
        "db_id": "real_estate_properties",
        "query": "select ref_feature_types.feature_type_name from other_available_features join ref_feature_types on other_available_features.feature_type_code = ref_feature_types.feature_type_code",
        "query_toks": [
            "select",
            "ref_feature_types.feature_type_name",
            "from",
            "other_available_features",
            "join",
            "ref_feature_types",
            "on",
            "other_available_features.feature_type_code",
            "=",
            "ref_feature_types.feature_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "ref_feature_types.feature_type_name",
            "from",
            "other_available_features",
            "join",
            "ref_feature_types",
            "on",
            "other_available_features.feature_type_code",
            "=",
            "ref_feature_types.feature_type_code"
        ],
        "question": "Get feature type name of other available features that has ref feature types",
        "question_toks": [
            "Get",
            "feature",
            "type",
            "name",
            "of",
            "other",
            "available",
            "features",
            "that",
            "has",
            "ref",
            "feature",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        2
                    ],
                    [
                        "table_unit",
                        0
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            1,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "original_question": "What is the feature type name of feature AirCon?",
        "instance_id": 1723
    },
    {
        "db_id": "real_estate_properties",
        "query": "where other_available_features.feature_name = \"aircon\"",
        "query_toks": [
            "where",
            "other_available_features.feature_name",
            "=",
            "\"aircon\""
        ],
        "query_toks_no_value": [
            "where",
            "other_available_features.feature_name",
            "=",
            "\"aircon\""
        ],
        "question": "Keep the records that feature name of other available features is \"aircon\"",
        "question_toks": [
            "Keep",
            "the",
            "records",
            "that",
            "feature",
            "name",
            "of",
            "other",
            "available",
            "features",
            "is",
            "\"aircon\""
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"AirCon\"",
                    null
                ]
            ],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
        "original_question": "What is the feature type name of feature AirCon?",
        "instance_id": 1724
    },
    {
        "db_id": "real_estate_properties",
        "query": "select ref_property_types.property_type_description from properties join ref_property_types on properties.property_type_code = ref_property_types.property_type_code",
        "query_toks": [
            "select",
            "ref_property_types.property_type_description",
            "from",
            "properties",
            "join",
            "ref_property_types",
            "on",
            "properties.property_type_code",
            "=",
            "ref_property_types.property_type_code"
        ],
        "query_toks_no_value": [
            "select",
            "ref_property_types.property_type_description",
            "from",
            "properties",
            "join",
            "ref_property_types",
            "on",
            "properties.property_type_code",
            "=",
            "ref_property_types.property_type_code"
        ],
        "question": "Get property type description of properties that has ref property types",
        "question_toks": [
            "Get",
            "property",
            "type",
            "description",
            "of",
            "properties",
            "that",
            "has",
            "ref",
            "property",
            "types"
        ],
        "sql": {
            "from": {
                "table_units": [
                    [
                        "table_unit",
                        3
                    ],
                    [
                        "table_unit",
                        1
                    ]
                ],
                "conds": [
                    [
                        false,
                        2,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ],
                        [
                            0,
                            3,
                            false
                        ],
                        null
                    ]
                ]
            },
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "where": [],
            "groupBy": [],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "original_question": "Show the property type descriptions of properties belonging to that code.",
        "instance_id": 1725
    },
    {
        "db_id": "real_estate_properties",
        "query": "group by properties.property_type_code",
        "query_toks": [
            "group",
            "by",
            "properties.property_type_code"
        ],
        "query_toks_no_value": [
            "group",
            "by",
            "properties.property_type_code"
        ],
        "question": "Group the records based on property type code of properties",
        "question_toks": [
            "Group",
            "the",
            "records",
            "based",
            "on",
            "property",
            "type",
            "code",
            "of",
            "properties"
        ],
        "sql": {
            "from": {
                "table_units": [],
                "conds": []
            },
            "select": [],
            "where": [],
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [],
            "orderBy": [],
            "limit": null,
            "intersect": null,
            "union": null,
            "except": null
        },
        "original_sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
        "original_question": "Show the property type descriptions of properties belonging to that code.",
        "instance_id": 1726
    }
]